swagger: "2.0"
info:
    contact:
        name: Asana Support
        url: "https://asana.com/support"
    description: >-
        This is the interface for interacting with the [Asana
        Platform](https://developers.asana.com). Our API reference is generated from
        our [OpenAPI spec]
        (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
    license:
        name: Apache 2.0
        url: "https://www.apache.org/licenses/LICENSE-2.0"
    termsOfService: "https://asana.com/terms"
    title: Asana
    version: "1.0"
    x-apisguru-categories:
        - developer_tools
    x-docs-schema-whitelist:
        - AsanaResource
        - AsanaNamedResource
        - AuditLogEvent
        - AttachmentResponse
        - AttachmentCompact
        - BatchResponse
        - CustomFieldSettingResponse
        - CustomFieldSettingCompact
        - CustomFieldResponse
        - CustomFieldCompact
        - EnumOption
        - EventResponse
        - ErrorResponse
        - GoalResponse
        - GoalCompact
        - GoalMembershipCompact
        - GoalMembershipBase
        - GoalMembershipResponse
        - GoalRelationshipResponse
        - GoalRelationshipCompact
        - JobResponse
        - JobCompact
        - OrganizationExportResponse
        - OrganizationExportCompact
        - PortfolioMembershipResponse
        - PortfolioMembershipCompact
        - PortfolioResponse
        - PortfolioCompact
        - ProjectBriefResponse
        - ProjectBriefCompact
        - ProjectMembershipResponse
        - ProjectMembershipCompact
        - ProjectResponse
        - ProjectCompact
        - ProjectStatusResponse
        - ProjectStatusCompact
        - ProjectTemplateCompact
        - ProjectTemplateResponse
        - SectionResponse
        - SectionCompact
        - StatusUpdateResponse
        - StatusUpdateCompact
        - StoryResponse
        - StoryCompact
        - TagResponse
        - TagCompact
        - TaskResponse
        - TaskCompact
        - TaskCountResponse
        - TeamMembershipResponse
        - TeamMembershipCompact
        - TeamResponse
        - TeamCompact
        - TimePeriodResponse
        - TimePeriodCompact
        - UserTaskListResponse
        - UserTaskListCompact
        - UserResponse
        - UserCompact
        - WebhookFilter
        - WebhookResponse
        - WebhookCompact
        - WorkspaceMembershipResponse
        - WorkspaceMembershipCompact
        - WorkspaceResponse
        - WorkspaceCompact
    x-logo:
        url: >-
            https://api.apis.guru/v2/cache/logo/https_d1gwm4cf8hecp4.cloudfront.net_images_favicons_apple-touch-icon-57x57.png
    x-origin:
        - format: openapi
          url: >-
              https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml
          version: "3.0"
    x-providerName: asana.com
    x-public-description: >-
        This is the interface for interacting with the [Asana
        Platform](https://developers.asana.com). Our API reference is generated from
        our [OpenAPI spec]
        (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
host: app.asana.com
basePath: /api/1.0
schemes:
    - https
paths:
    /attachments:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: >-
                      Globally unique identifier for object to fetch statuses from. Must
                      be a GID for a `project`, `project_brief`, or `task`.
                  in: query
                  name: parent
                  required: true
                  type: string
                  x-example: "159874"
            responses:
                "200":
                    description: Successfully retrieved the specified object's attachments.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/AttachmentCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Attachments
            description: >-
                Returns the compact records for all attachments on the object.


                There are three possible `parent` values for this request: `project`,
                `project_brief`, and `task`. For a project, an attachment refers to a
                file uploaded to the "Key resources" section in the project Overview.
                For a project brief, an attachment refers to inline files in the project
                brief itself. For a task, an attachment refers to a file directly
                associated to that task.
            operationId: getAttachmentsForObject
            summary: Get attachments from an object
        post:
            consumes:
                - multipart/form-data
            produces:
                - application/json
            parameters:
                - description: >
                      *Optional*. Only relevant for external attachments with a parent
                      task. A boolean indicating whether the current app should be
                      connected with the attachment for the purposes of showing an app
                      components widget. Requires the app to have been added to a project
                      the parent task is in.
                  in: formData
                  name: connect_to_app
                  type: boolean
                - description: |
                      Required for `asana` attachments.
                  format: binary
                  in: formData
                  name: file
                  type: string
                - description: >
                      The name of the external resource being attached. Required for
                      attachments of type `external`.
                  in: formData
                  name: name
                  type: string
                - description: >
                      Required identifier of the parent task, project, or project_brief,
                      as a string.
                  in: formData
                  name: parent
                  type: string
                - description: >
                      The type of the attachment. Must be one of the given values. If not
                      specified, a file attachment of type `asana` will be assumed. Note
                      that if the value of `resource_subtype` is `external`, a `parent`,
                      `name`, and `url` must also be provided.
                  enum:
                      - asana
                      - dropbox
                      - gdrive
                      - onedrive
                      - box
                      - vimeo
                      - external
                  in: formData
                  name: resource_subtype
                  type: string
                - description: >
                      The URL of the external resource being attached. Required for
                      attachments of type `external`.
                  in: formData
                  name: url
                  type: string
            responses:
                "200":
                    description: Successfully uploaded the attachment to the parent object.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/AttachmentResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Attachments
            description: >-
                Upload an attachment.


                This method uploads an attachment on an object and returns the compact

                record for the created attachment object. This is possible by either:


                - Providing the URL of the external resource being attached, or

                - Downloading the file content first and then uploading it as any other
                attachment. Note that it is not possible to attach

                files from third party services such as Dropbox, Box, Vimeo & Google
                Drive via the API


                The 100MB size limit on attachments in Asana is enforced on this
                endpoint.


                This endpoint expects a multipart/form-data encoded request containing
                the full contents of the file to be uploaded.


                Requests made should follow the HTTP/1.1 specification that line

                terminators are of the form `CRLF` or `\r\n` outlined

                [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)
                in order for the server to reliably and properly handle the request.
            operationId: createAttachmentForObject
            summary: Upload an attachment
    "/attachments/{attachment_gid}":
        parameters:
            - description: Globally unique identifier for the attachment.
              in: path
              name: attachment_gid
              required: true
              type: string
              x-env-variable: attachment
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified attachment.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Attachments
            description: |-
                Deletes a specific, existing attachment.

                Returns an empty data record.
            operationId: deleteAttachment
            summary: Delete an attachment
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for a single attachment.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/AttachmentResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "424":
                    description: >-
                        You have exceeded one of the enforced rate limits in the API. See
                        the [documentation on rate
                        limiting](https://developers.asana.com/docs/#rate-limits) for more
                        information.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "501":
                    description: There is an issue between the load balancers and Asana's API.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "503":
                    description: >-
                        Either the upstream service is unavailable to the API, or the API
                        has been intentionally shut off.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "504":
                    description: This request took too long to complete.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Attachments
            description: Get the full record for a single attachment.
            operationId: getAttachment
            summary: Get an attachment
    /batch:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The requests to batch together via the Batch API.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/BatchRequest"
                      type: object
            responses:
                "200":
                    description: Successfully completed the requested batch API operations.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/BatchResponse"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Batch API
            description: Make multiple requests in parallel to Asana's API.
            operationId: createBatchRequest
            summary: Submit parallel requests
    /custom_fields:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The custom field object to create.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/CustomFieldRequest"
                      type: object
            responses:
                "201":
                    description: Custom field successfully created.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/CustomFieldResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Creates a new custom field in a workspace. Every custom field is
                required

                to be created in a specific workspace, and this workspace cannot be

                changed once set.


                A custom field’s name must be unique within a workspace and not conflict

                with names of existing task properties such as `Due Date` or `Assignee`.

                A custom field’s type must be one of `text`, `enum`, `multi_enum`,
                `number`,

                `date`, or `people`.


                Returns the full record of the newly created custom field.
            operationId: createCustomField
            summary: Create a custom field
    "/custom_fields/{custom_field_gid}":
        parameters:
            - description: Globally unique identifier for the custom field.
              in: path
              name: custom_field_gid
              required: true
              type: string
              x-env-variable: custom_field
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: The custom field was successfully deleted.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                A specific, existing custom field can be deleted by making a DELETE
                request on the URL for that custom field.

                Locked custom fields can only be deleted by the user who locked the
                field.

                Returns an empty data record.
            operationId: deleteCustomField
            summary: Delete a custom field
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: >-
                        Successfully retrieved the complete definition of a custom field’s
                        metadata.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/CustomFieldResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Get the complete definition of a custom field’s metadata.


                Since custom fields can be defined for one of a number of types, and

                these types have different data and behaviors, there are fields that are

                relevant to a particular type. For instance, as noted above,
                enum_options

                is only relevant for the enum type and defines the set of choices that

                the enum could represent. The examples below show some of these

                type-specific custom field definitions.
            operationId: getCustomField
            summary: Get a custom field
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The custom field object with all updated properties.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/CustomFieldRequest"
                      type: object
            responses:
                "200":
                    description: The custom field was successfully updated.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/CustomFieldResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                A specific, existing custom field can be updated by making a PUT request
                on the URL for that custom field. Only the fields provided in the `data`
                block will be updated; any unspecified fields will remain unchanged

                When using this method, it is best to specify only those fields you wish
                to change, or else you may overwrite changes made by another user since
                you last retrieved the custom field.

                A custom field’s `type` cannot be updated.

                An enum custom field’s `enum_options` cannot be updated with this
                endpoint. Instead see “Work With Enum Options” for information on how to
                update `enum_options`.

                Locked custom fields can only be updated by the user who locked the
                field.

                Returns the complete updated custom field record.
            operationId: updateCustomField
            summary: Update a custom field
    "/custom_fields/{custom_field_gid}/enum_options":
        parameters:
            - description: Globally unique identifier for the custom field.
              in: path
              name: custom_field_gid
              required: true
              type: string
              x-env-variable: custom_field
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The enum option object to create.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/EnumOptionRequest"
                      type: object
            responses:
                "201":
                    description: Custom field enum option successfully created.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EnumOption"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Creates an enum option and adds it to this custom field’s list of enum
                options. A custom field can have at most 500 enum options (including
                disabled options). By default new enum options are inserted at the end
                of a custom field’s list.

                Locked custom fields can only have enum options added by the user who
                locked the field.

                Returns the full record of the newly created enum option.
            operationId: createEnumOptionForCustomField
            summary: Create an enum option
    "/custom_fields/{custom_field_gid}/enum_options/insert":
        parameters:
            - description: Globally unique identifier for the custom field.
              in: path
              name: custom_field_gid
              required: true
              type: string
              x-env-variable: custom_field
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The enum option object to create.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/EnumOptionInsertRequest"
                      type: object
            responses:
                "200":
                    description: Custom field enum option successfully reordered.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EnumOption"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Moves a particular enum option to be either before or after another
                specified enum option in the custom field.

                Locked custom fields can only be reordered by the user who locked the
                field.
            operationId: insertEnumOptionForCustomField
            summary: Reorder a custom field's enum
    "/enum_options/{enum_option_gid}":
        parameters:
            - description: Globally unique identifier for the enum option.
              in: path
              name: enum_option_gid
              required: true
              type: string
              x-example: "124578"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The enum option object to update
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/EnumOptionRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the specified custom field enum.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EnumOption"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Updates an existing enum option. Enum custom fields require at least one
                enabled enum option.

                Locked custom fields can only be updated by the user who locked the
                field.

                Returns the full record of the updated enum option.
            operationId: updateEnumOption
            summary: Update an enum option
    /events:
        parameters:
            - description: A resource ID to subscribe to. The resource can be a task or project.
              in: query
              name: resource
              required: true
              type: string
              x-example: "12345"
            - description: >-
                  A sync token received from the last request, or none on first sync.
                  Events will be returned from the point in time that the sync token was
                  generated.

                  *Note: On your first request, omit the sync token. The response will
                  be the same as for an expired sync token, and will include a new valid
                  sync token.If the sync token is too old (which may happen from time to
                  time) the API will return a `412 Precondition Failed` error, and
                  include a fresh sync token in the response.*
              in: query
              name: sync
              required: false
              type: string
              x-example: de4774f6915eae04714ca93bb2f5ee81
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved events.
                    schema:
                        description: >-
                            The full record for all events that have occurred since the sync
                            token was created.
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/EventResponse"
                                type: array
                            has_more:
                                description: Indicates whether there are more events to pull.
                                example: true
                                type: boolean
                            sync:
                                description: >-
                                    A sync token to be used with the next call to the /events
                                    endpoint.
                                example: de4774f6915eae04714ca93bb2f5ee81
                                type: string
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Events
            description: >-
                Returns the full record for all events that have occurred since the sync

                token was created.


                A `GET` request to the endpoint `/[path_to_resource]/events` can be made
                in

                lieu of including the resource ID in the data for the request.


                Asana limits a single sync token to 100 events. If more than 100 events
                exist

                for a given resource, `has_more: true` will be returned in the response,
                indicating

                that there are more events to pull. 


                *Note: The resource returned will be the resource that triggered the

                event. This may be different from the one that the events were requested

                for. For example, a subscription to a project will contain events for

                tasks contained within the project.*
            operationId: getEvents
            summary: Get events on a resource
    /goal_relationships:
        get:
            produces:
                - application/json
            parameters:
                - allowEmptyValue: true
                  description: >-
                      Provides “pretty” output.

                      Provides the response in a “pretty” format. In the case of JSON this
                      means doing proper line breaking and indentation to make it
                      readable. This will take extra time and increase the response size
                      so it is advisable only to use this during debugging.
                  in: query
                  name: opt_pretty
                  required: false
                  type: boolean
                  x-example: true
                - collectionFormat: multi
                  description: >-
                      Defines fields to return.

                      Some requests return *compact* representations of objects in order
                      to conserve resources and complete the request more efficiently.
                      Other times requests return more information than you may need. This
                      option allows you to list the exact set of fields that the API
                      should be sure to return for the objects. The field names should be
                      provided as paths, described below.

                      The id of included objects will always be returned, regardless of
                      the field options.
                  in: query
                  items:
                      type: string
                  name: opt_fields
                  required: false
                  type: array
                  x-example:
                      - followers
                      - assignee
                - description: >-
                      Globally unique identifier for the supported goal in the goal
                      relationship.
                  in: query
                  name: supported_goal
                  required: true
                  type: string
                  x-example: "12345"
                - description: >-
                      If provided, filter to goal relationships with a given
                      resource_subtype.
                  in: query
                  name: resource_subtype
                  type: string
                  x-example: subgoal
            responses:
                "200":
                    description: Successfully retrieved the requested goal relationships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/GoalRelationshipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goal relationships
            description: Returns compact goal relationship records.
            operationId: getGoalRelationships
            summary: Get goal relationships
    "/goal_relationships/{goal_relationship_gid}":
        parameters:
            - description: Globally unique identifier for the goal relationship.
              in: path
              name: goal_relationship_gid
              required: true
              type: string
              x-env-variable: goal_relationship
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for the goal relationship.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalRelationshipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goal relationships
            description: >-
                Returns the complete updated goal relationship record for a single goal
                relationship.
            operationId: getGoalRelationship
            summary: Get a goal relationship
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the goal relationship.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalRelationshipRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the goal relationship.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalRelationshipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goal relationships
            description: >-
                An existing goal relationship can be updated by making a PUT request on
                the URL for

                that goal relationship. Only the fields provided in the `data` block
                will be updated;

                any unspecified fields will remain unchanged.


                Returns the complete updated goal relationship record.
            operationId: updateGoalRelationship
            summary: Update a goal relationship
    /goals:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters:
                - description: Globally unique identifier for supporting portfolio.
                  in: query
                  name: portfolio
                  type: string
                  x-example: "159874"
                - description: Globally unique identifier for supporting project.
                  in: query
                  name: project
                  type: string
                  x-example: "512241"
                - description: >-
                      Filter to goals with is_workspace_level set to query value. Must be
                      used with the workspace parameter.
                  in: query
                  name: is_workspace_level
                  type: boolean
                  x-example: false
                - description: Globally unique identifier for the team.
                  in: query
                  name: team
                  type: string
                  x-example: "31326"
                - description: Globally unique identifier for the workspace.
                  in: query
                  name: workspace
                  type: string
                  x-example: "31326"
                - collectionFormat: multi
                  description: Globally unique identifiers for the time periods.
                  in: query
                  items:
                      type: string
                  name: time_periods
                  type: array
                  x-example: "221693,506165"
            responses:
                "200":
                    description: Successfully retrieved the requested goals.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/GoalCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: Returns compact goal records.
            operationId: getGoals
            summary: Get goals
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The goal to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new goal.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: |-
                Creates a new goal in a workspace or team.

                Returns the full record of the newly created goal.
            operationId: createGoal
            summary: Create a goal
    "/goals/{goal_gid}":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified goal.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: >-
                A specific, existing goal can be deleted by making a DELETE request on
                the URL for that goal.


                Returns an empty data record.
            operationId: deleteGoal
            summary: Delete a goal
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for a single goal.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: Returns the complete goal record for a single goal.
            operationId: getGoal
            summary: Get a goal
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the goal.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the goal.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: |-
                An existing goal can be updated by making a PUT request on the URL for
                that goal. Only the fields provided in the `data` block will be updated;
                any unspecified fields will remain unchanged.

                Returns the complete updated goal record.
            operationId: updateGoal
            summary: Update a goal
    "/goals/{goal_gid}/addFollowers":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The followers to be added as collaborators
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskAddFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added users as collaborators.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: >-
                Adds followers to a goal. Returns the goal the followers were added to.

                Each goal can be associated with zero or more followers in the system.

                Requests to add/remove followers, if successful, will return the
                complete updated goal record, described above.
            operationId: addFollowers
            summary: Add a collaborator to a goal
    "/goals/{goal_gid}/addSupportingRelationship":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The supporting resource to be added to the goal
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalAddSupportingRelationshipRequest"
                      type: object
            responses:
                "200":
                    description: Successfully created the goal relationship.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalRelationshipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goal relationships
            description: >-
                Creates a goal relationship by adding a supporting resource to a given
                goal.


                Returns the newly created goal relationship record.
            operationId: addSupportingRelationship
            summary: Add a supporting goal relationship
    "/goals/{goal_gid}/parentGoals":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified goal's parent goals.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/GoalCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: Returns a compact representation of all of the parent goals of a goal.
            operationId: getParentGoalsForGoal
            summary: Get parent goals from a goal
    "/goals/{goal_gid}/removeFollowers":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The followers to be removed as collaborators
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskAddFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed users as collaborators.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: >-
                Removes followers from a goal. Returns the goal the followers were
                removed from.

                Each goal can be associated with zero or more followers in the system.

                Requests to add/remove followers, if successful, will return the
                complete updated goal record, described above.
            operationId: removeFollowers
            summary: Remove a collaborator from a goal
    "/goals/{goal_gid}/removeSupportingRelationship":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The supporting resource to be removed from the goal
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalRemoveSupportingRelationshipRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the goal relationship.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goal relationships
            description: Removes a goal relationship for a given parent goal.
            operationId: removeSupportingRelationship
            summary: Removes a supporting goal relationship
    "/goals/{goal_gid}/setMetric":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The goal metric to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalMetricRequest"
                      type: object
            responses:
                "200":
                    description: Successfully created a new goal metric.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: >-
                Creates and adds a goal metric to a specified goal. Note that this
                replaces an existing goal metric if one already exists.
            operationId: createGoalMetric
            summary: Create a goal metric
    "/goals/{goal_gid}/setMetricCurrentValue":
        parameters:
            - description: Globally unique identifier for the goal.
              in: path
              name: goal_gid
              required: true
              type: string
              x-env-variable: goal
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the goal metric.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/GoalMetricCurrentValueRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the goal metric.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/GoalResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Goals
            description: |-
                Updates a goal's existing metric's `current_number_value` if one exists,
                otherwise responds with a 400 status code.

                Returns the complete updated goal metric record.
            operationId: updateGoalMetric
            summary: Update a goal metric
    "/jobs/{job_gid}":
        parameters:
            - description: Globally unique identifier for the job.
              in: path
              name: job_gid
              required: true
              type: string
              x-env-variable: job
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved Job.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/JobResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Jobs
            description: Returns the full record for a job.
            operationId: getJob
            summary: Get a job by id
    /organization_exports:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The organization to export.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/OrganizationExportRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created organization export request.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/OrganizationExportResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Organization exports
            description: >-
                This method creates a request to export an Organization. Asana will
                complete the export at some point after you create the request.
            operationId: createOrganizationExport
            summary: Create an organization export request
    "/organization_exports/{organization_export_gid}":
        parameters:
            - description: Globally unique identifier for the organization export.
              in: path
              name: organization_export_gid
              required: true
              type: string
              x-env-variable: organization_export
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved organization export object.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/OrganizationExportResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Organization exports
            description: Returns details of a previously-requested Organization export.
            operationId: getOrganizationExport
            summary: Get details on an org export request
    /portfolio_memberships:
        parameters:
            - description: The portfolio to filter results on.
              in: query
              name: portfolio
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - description: The workspace to filter results on.
              in: query
              name: workspace
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: query
              name: user
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved portfolio memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/PortfolioMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolio memberships
            description: >-
                Returns a list of portfolio memberships in compact representation. You
                must specify `portfolio`, `portfolio` and `user`, or `workspace` and
                `user`.
            operationId: getPortfolioMemberships
            summary: Get multiple portfolio memberships
    "/portfolio_memberships/{portfolio_membership_gid}":
        parameters:
            - in: path
              name: portfolio_membership_gid
              required: true
              type: string
              x-env-variable: portfolio_membership
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested portfolio membership.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioMembershipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolio memberships
            description: Returns the complete portfolio record for a single portfolio membership.
            operationId: getPortfolioMembership
            summary: Get a portfolio membership
    /portfolios:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: The workspace or organization to filter portfolios on.
                  in: query
                  name: workspace
                  required: true
                  type: string
                  x-example: "1331"
                - description: >-
                      The user who owns the portfolio. Currently, API users can only get a
                      list of portfolios that they themselves own.
                  in: query
                  name: owner
                  required: true
                  type: string
                  x-example: "14916"
            responses:
                "200":
                    description: Successfully retrieved portfolios.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/PortfolioCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: >-
                Returns a list of the portfolios in compact representation that are
                owned by the current API user.
            operationId: getPortfolios
            summary: Get multiple portfolios
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The portfolio to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/PortfolioRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                Creates a new portfolio in the given workspace with the supplied name.

                Note that portfolios created in the Asana UI may have some state
                (like the “Priority” custom field) which is automatically added
                to the portfolio when it is created. Portfolios created via our
                API will *not* be created with the same initial state to allow
                integrations to create their own starting state on a portfolio.
            operationId: createPortfolio
            summary: Create a portfolio
    "/portfolios/{portfolio_gid}":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                An existing portfolio can be deleted by making a DELETE request on
                the URL for that portfolio.

                Returns an empty data record.
            operationId: deletePortfolio
            summary: Delete a portfolio
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: Returns the complete portfolio record for a single portfolio.
            operationId: getPortfolio
            summary: Get a portfolio
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the portfolio.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/PortfolioRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: >-
                An existing portfolio can be updated by making a PUT request on the URL
                for

                that portfolio. Only the fields provided in the `data` block will be
                updated;

                any unspecified fields will remain unchanged.


                Returns the complete updated portfolio record.
            operationId: updatePortfolio
            summary: Update a portfolio
    "/portfolios/{portfolio_gid}/addCustomFieldSetting":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the custom field setting.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/AddCustomFieldSettingRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the custom field to the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/CustomFieldSettingResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: >-
                Custom fields are associated with portfolios by way of custom field
                settings.  This method creates a setting for the portfolio.
            operationId: addCustomFieldSettingForPortfolio
            summary: Add a custom field to a portfolio
    "/portfolios/{portfolio_gid}/addItem":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the item being inserted.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/PortfolioAddItemRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the item to the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                Add an item to a portfolio.
                Returns an empty data block.
            operationId: addItemForPortfolio
            summary: Add a portfolio item
    "/portfolios/{portfolio_gid}/addMembers":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the members being added.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/AddMembersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added members to the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                Adds the specified list of users as members of the portfolio.
                Returns the updated portfolio record.
            operationId: addMembersForPortfolio
            summary: Add users to a portfolio
    "/portfolios/{portfolio_gid}/custom_field_settings":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: >-
                        Successfully retrieved custom field settings objects for a
                        portfolio.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/CustomFieldSettingResponse"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom field settings
            description: >-
                Returns a list of all of the custom fields settings on a portfolio, in
                compact form.
            operationId: getCustomFieldSettingsForPortfolio
            summary: Get a portfolio's custom fields
    "/portfolios/{portfolio_gid}/items":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested portfolio's items.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: Get a list of the items in compact form in a portfolio.
            operationId: getItemsForPortfolio
            summary: Get portfolio items
    "/portfolios/{portfolio_gid}/portfolio_memberships":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: query
              name: user
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested portfolio's memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/PortfolioMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolio memberships
            description: Returns the compact portfolio membership records for the portfolio.
            operationId: getPortfolioMembershipsForPortfolio
            summary: Get memberships from a portfolio
    "/portfolios/{portfolio_gid}/removeCustomFieldSetting":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the custom field setting being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/RemoveCustomFieldSettingRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the custom field from the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: Removes a custom field setting from a portfolio.
            operationId: removeCustomFieldSettingForPortfolio
            summary: Remove a custom field from a portfolio
    "/portfolios/{portfolio_gid}/removeItem":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the item being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/PortfolioRemoveItemRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the item from the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                Remove an item from a portfolio.
                Returns an empty data block.
            operationId: removeItemForPortfolio
            summary: Remove a portfolio item
    "/portfolios/{portfolio_gid}/removeMembers":
        parameters:
            - description: Globally unique identifier for the portfolio.
              in: path
              name: portfolio_gid
              required: true
              type: string
              x-env-variable: portfolio
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the members being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/RemoveMembersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the members from the portfolio.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/PortfolioResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Portfolios
            description: |-
                Removes the specified list of users from members of the portfolio.
                Returns the updated portfolio record.
            operationId: removeMembersForPortfolio
            summary: Remove users from a portfolio
    "/project_briefs/{project_brief_gid}":
        parameters:
            - description: Globally unique identifier for the project brief.
              in: path
              name: project_brief_gid
              required: true
              type: string
              x-env-variable: project_brief
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified project brief.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project briefs
            description: |-
                Deletes a specific, existing project brief.

                Returns an empty data record.
            operationId: deleteProjectBrief
            summary: Delete a project brief
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for a project brief.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectBriefResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "424":
                    description: >-
                        You have exceeded one of the enforced rate limits in the API. See
                        the [documentation on rate
                        limiting](https://developers.asana.com/docs/#rate-limits) for more
                        information.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "501":
                    description: There is an issue between the load balancers and Asana's API.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "503":
                    description: >-
                        Either the upstream service is unavailable to the API, or the API
                        has been intentionally shut off.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "504":
                    description: This request took too long to complete.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project briefs
            description: Get the full record for a project brief.
            operationId: getProjectBrief
            summary: Get a project brief
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the project brief.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectBriefRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the project brief.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectBriefResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project briefs
            description: >-
                An existing project brief can be updated by making a PUT request on the
                URL for

                that project brief. Only the fields provided in the `data` block will be
                updated;

                any unspecified fields will remain unchanged.


                Returns the complete updated project brief record.
            operationId: updateProjectBrief
            summary: Update a project brief
    "/project_memberships/{project_membership_gid}":
        parameters:
            - in: path
              name: project_membership_gid
              required: true
              type: string
              x-env-variable: project_membership
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project membership.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectMembershipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project memberships
            description: Returns the complete project record for a single project membership.
            operationId: getProjectMembership
            summary: Get a project membership
    "/project_statuses/{project_status_gid}":
        parameters:
            - description: The project status update to get.
              in: path
              name: project_status_gid
              required: true
              type: string
              x-env-variable: project_status
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified project status.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project statuses
            description: >-
                *Deprecated: new integrations should prefer the
                `/status_updates/{status_gid}` route.*


                Deletes a specific, existing project status update.


                Returns an empty data record.
            operationId: deleteProjectStatus
            summary: Delete a project status
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified project's status updates.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectStatusResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project statuses
            description: >-
                *Deprecated: new integrations should prefer the
                `/status_updates/{status_gid}` route.*


                Returns the complete record for a single status update.
            operationId: getProjectStatus
            summary: Get a project status
    /project_templates:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: The workspace to filter results on.
                  in: query
                  name: workspace
                  type: string
                  x-env-variable: workspace
                  x-example: "12345"
                - description: The team to filter projects on.
                  in: query
                  name: team
                  type: string
                  x-env-variable: team
                  x-example: "14916"
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: >-
                        Successfully retrieved the requested team's or workspace's project
                        templates.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectTemplateCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project templates
            description: >-
                Returns the compact project template records for all project templates
                in the given team or workspace.
            operationId: getProjectTemplates
            summary: Get multiple project templates
    "/project_templates/{project_template_gid}":
        parameters:
            - description: Globally unique identifier for the project template.
              in: path
              name: project_template_gid
              required: true
              type: string
              x-env-variable: project_template
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project template.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectTemplateResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project templates
            description: >-
                Returns the complete project template record for a single project
                template.
            operationId: getProjectTemplate
            summary: Get a project template
    "/project_templates/{project_template_gid}/instantiateProject":
        parameters:
            - description: Globally unique identifier for the project template.
              in: path
              name: project_template_gid
              required: true
              type: string
              x-env-variable: project_template
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: >-
                      Describes the inputs used for instantiating a project, such as the
                      resulting project's name, which team it should be created in, and
                      values for date variables.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectTemplateInstantiateProjectRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the job to handle project instantiation.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/JobResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project templates
            description: >-
                Creates and returns a job that will asynchronously handle the project
                instantiation.


                To form this request, it is recommended to first make a request to [get
                a project template](/docs/get-a-project-template). Then, from the
                response, copy the `gid` from the object in the `requested_dates` array.
                This `gid` should be used in `requested_dates` to instantiate a project.


                _Note: The body of this request will differ if your workspace is an
                organization. To determine if your workspace is an organization, use the
                [is_organization](/docs/workspace) parameter._
            operationId: instantiateProject
            summary: Instantiate a project from a project template
    /projects:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: The workspace or organization to filter projects on.
                  in: query
                  name: workspace
                  type: string
                  x-example: "1331"
                - description: The team to filter projects on.
                  in: query
                  name: team
                  type: string
                  x-example: "14916"
                - description: >-
                      Only return projects whose `archived` field takes on the value of
                      this parameter.
                  in: query
                  name: archived
                  type: boolean
                  x-example: false
            responses:
                "200":
                    description: Successfully retrieved projects.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Returns the compact project records for some filtered set of projects.
                Use one or more of the parameters provided to filter the projects
                returned.

                *Note: This endpoint may timeout for large domains. Try filtering by
                team!*
            operationId: getProjects
            summary: Get multiple projects
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The project to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectRequest"
                      type: object
            responses:
                "201":
                    description: Successfully retrieved projects.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: |-
                Create a new project in a workspace or team.

                Every project is required to be created in a specific workspace or
                organization, and this cannot be changed once set. Note that you can use
                the `workspace` parameter regardless of whether or not it is an
                organization.

                If the workspace for your project is an organization, you must also
                supply a `team` to share the project with.

                Returns the full record of the newly created project.
            operationId: createProject
            summary: Create a project
    "/projects/{project_gid}":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                A specific, existing project can be deleted by making a DELETE request
                on

                the URL for that project.


                Returns an empty data record.
            operationId: deleteProject
            summary: Delete a project
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: Returns the complete project record for a single project.
            operationId: getProject
            summary: Get a project
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated fields for the project.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: |-
                A specific, existing project can be updated by making a PUT request on
                the URL for that project. Only the fields provided in the `data` block
                will be updated; any unspecified fields will remain unchanged.

                When using this method, it is best to specify only those fields you wish
                to change, or else you may overwrite changes made by another user since
                you last retrieved the task.

                Returns the complete updated project record.
            operationId: updateProject
            summary: Update a project
    "/projects/{project_gid}/addCustomFieldSetting":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the custom field setting.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/AddCustomFieldSettingRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the custom field to the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/CustomFieldSettingResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Custom fields are associated with projects by way of custom field
                settings.  This method creates a setting for the project.
            operationId: addCustomFieldSettingForProject
            summary: Add a custom field to a project
    "/projects/{project_gid}/addFollowers":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the followers being added.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/AddFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added followers to the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Adds the specified list of users as followers to the project. Followers
                are a subset of members who have opted in to receive "tasks added"
                notifications for a project. Therefore, if the users are not already
                members of the project, they will also become members as a result of
                this operation.

                Returns the updated project record.
            operationId: addFollowersForProject
            summary: Add followers to a project
    "/projects/{project_gid}/addMembers":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the members being added.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/AddMembersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added members to the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Adds the specified list of users as members of the project. Note that a
                user being added as a member may also be added as a *follower* as a
                result of this operation. This is because the user's default
                notification settings (i.e., in the "Notifcations" tab of "My Profile
                Settings") will override this endpoint's default behavior of setting
                "Tasks added" notifications to `false`.

                Returns the updated project record.
            operationId: addMembersForProject
            summary: Add users to a project
    "/projects/{project_gid}/custom_field_settings":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved custom field settings objects for a project.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/CustomFieldSettingResponse"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom field settings
            description: >-
                Returns a list of all of the custom fields settings on a project, in
                compact form. Note that, as in all queries to collections which return
                compact representation, `opt_fields` can be used to include more data
                than is returned in the compact representation. See the [getting started
                guide on input/output
                options](https://developers.asana.com/docs/#input-output-options) for
                more information.
            operationId: getCustomFieldSettingsForProject
            summary: Get a project's custom fields
    "/projects/{project_gid}/duplicate":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: >-
                      Describes the duplicate's name and the elements that will be
                      duplicated.
                  in: body
                  name: body
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectDuplicateRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the job to handle duplication.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/JobResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Creates and returns a job that will asynchronously handle the
                duplication.
            operationId: duplicateProject
            summary: Duplicate a project
    "/projects/{project_gid}/project_briefs":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The project brief to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectBriefRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new project brief.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectBriefResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project briefs
            description: |-
                Creates a new project brief.

                Returns the full record of the newly created project brief.
            operationId: createProjectBrief
            summary: Create a project brief
    "/projects/{project_gid}/project_memberships":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: query
              name: user
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project's memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project memberships
            description: Returns the compact project membership records for the project.
            operationId: getProjectMembershipsForProject
            summary: Get memberships from a project
    "/projects/{project_gid}/project_statuses":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: Globally unique identifier for the project.
                  in: path
                  name: project_gid
                  required: true
                  type: string
                  x-env-variable: project
                  x-example: "1331"
                - allowEmptyValue: true
                  description: >-
                      Provides “pretty” output.

                      Provides the response in a “pretty” format. In the case of JSON this
                      means doing proper line breaking and indentation to make it
                      readable. This will take extra time and increase the response size
                      so it is advisable only to use this during debugging.
                  in: query
                  name: opt_pretty
                  required: false
                  type: boolean
                  x-example: true
                - collectionFormat: multi
                  description: >-
                      Defines fields to return.

                      Some requests return *compact* representations of objects in order
                      to conserve resources and complete the request more efficiently.
                      Other times requests return more information than you may need. This
                      option allows you to list the exact set of fields that the API
                      should be sure to return for the objects. The field names should be
                      provided as paths, described below.

                      The id of included objects will always be returned, regardless of
                      the field options.
                  in: query
                  items:
                      type: string
                  name: opt_fields
                  required: false
                  type: array
                  x-example:
                      - followers
                      - assignee
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the specified project's status updates.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectStatusCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project statuses
            description: >-
                *Deprecated: new integrations should prefer the `/status_updates`
                route.*


                Returns the compact project status update records for all updates on the
                project.
            operationId: getProjectStatusesForProject
            summary: Get statuses from a project
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The project status to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectStatusRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new story.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectStatusResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project statuses
            description: >-
                *Deprecated: new integrations should prefer the `/status_updates`
                route.*


                Creates a new status update on the project.


                Returns the full record of the newly created project status update.
            operationId: createProjectStatusForProject
            summary: Create a project status
    "/projects/{project_gid}/removeCustomFieldSetting":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the custom field setting being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/RemoveCustomFieldSettingRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the custom field from the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: Removes a custom field setting from a project.
            operationId: removeCustomFieldSettingForProject
            summary: Remove a custom field from a project
    "/projects/{project_gid}/removeFollowers":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the followers being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/RemoveFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed followers from the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Removes the specified list of users from following the project, this
                will not affect project membership status.

                Returns the updated project record.
            operationId: removeFollowersForProject
            summary: Remove followers from a project
    "/projects/{project_gid}/removeMembers":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: Information about the members being removed.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/RemoveMembersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the members from the project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: |-
                Removes the specified list of users from members of the project.
                Returns the updated project record.
            operationId: removeMembersForProject
            summary: Remove users from a project
    "/projects/{project_gid}/saveAsTemplate":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: >-
                      Describes the inputs used for creating a project template, such as
                      the resulting project template's name, which team it should be
                      created in.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectSaveAsTemplateRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the job to handle project template creation.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/JobResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Creates and returns a job that will asynchronously handle the project
                template creation. Note that

                while the resulting project template can be accessed with the API, it
                won't be visible in the Asana

                UI until Project Templates 2.0 is launched in the app. See more in [this
                forum
                post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
            operationId: projectSaveAsTemplate
            summary: Create a project template from a project
    "/projects/{project_gid}/sections":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved sections in project.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/SectionCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: Returns the compact records for all sections in the specified project.
            operationId: getSectionsForProject
            summary: Get sections in a project
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The section to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/SectionRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the specified section.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/SectionResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: |-
                Creates a new section in a project.
                Returns the full record of the newly created section.
            operationId: createSectionForProject
            summary: Create a section in a project
    "/projects/{project_gid}/sections/insert":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The section's move action.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectSectionInsertRequest"
                      type: object
            responses:
                "200":
                    description: Successfully moved the specified section.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: |-
                Move sections relative to each other. One of
                `before_section` or `after_section` is required.

                Sections cannot be moved between projects.

                Returns an empty data block.
            operationId: insertSectionForProject
            summary: Move or Insert sections
    "/projects/{project_gid}/task_counts":
        parameters:
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project's task counts.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskCountResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Get an object that holds task count fields. **All fields are excluded by
                default**. You must [opt in](/docs/input-output-options) using
                `opt_fields` to get any information from this endpoint.


                This endpoint has an additional [rate limit](/docs/standard-rate-limits)
                and each field counts especially high against our [cost
                limits](/docs/cost-limits).


                Milestones are just tasks, so they are included in the `num_tasks`,
                `num_incomplete_tasks`, and `num_completed_tasks` counts.
            operationId: getTaskCountsForProject
            summary: Get task count of a project
    "/projects/{project_gid}/tasks":
        parameters:
            - description: >
                  Only return tasks that are either incomplete or that have been
                  completed since this time. Accepts a date-time string or the keyword
                  *now*.
              in: query
              name: completed_since
              required: false
              type: string
              x-example: "2012-02-22T02:06:58.158Z"
            - description: Globally unique identifier for the project.
              in: path
              name: project_gid
              required: true
              type: string
              x-env-variable: project
              x-example: "1331"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested project's tasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Returns the compact task records for all tasks within the given project,
                ordered by their priority within the project. Tasks can exist in more
                than one project at a time.
            operationId: getTasksForProject
            summary: Get tasks from a project
    "/sections/{section_gid}":
        parameters:
            - description: The globally unique identifier for the section.
              in: path
              name: section_gid
              required: true
              type: string
              x-env-variable: section
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified section.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: >-
                A specific, existing section can be deleted by making a DELETE request
                on

                the URL for that section.


                Note that sections must be empty to be deleted.


                The last remaining section cannot be deleted.


                Returns an empty data block.
            operationId: deleteSection
            summary: Delete a section
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved section.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/SectionResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: Returns the complete record for a single section.
            operationId: getSection
            summary: Get a section
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The section to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/SectionRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the specified section.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/SectionResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: >-
                A specific, existing section can be updated by making a PUT request on

                the URL for that project. Only the fields provided in the `data` block

                will be updated; any unspecified fields will remain unchanged. (note
                that

                at this time, the only field that can be updated is the `name` field.)


                When using this method, it is best to specify only those fields you wish

                to change, or else you may overwrite changes made by another user since

                you last retrieved the task.


                Returns the complete updated section record.
            operationId: updateSection
            summary: Update a section
    "/sections/{section_gid}/addTask":
        parameters:
            - description: The globally unique identifier for the section.
              in: path
              name: section_gid
              required: true
              type: string
              x-env-variable: section
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The task and optionally the insert location.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/SectionTaskInsertRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Sections
            description: >-
                Add a task to a specific, existing section. This will remove the task
                from other sections of the project.


                The task will be inserted at the top of a section unless an
                insert_before or insert_after parameter is declared.


                This does not work for separators (tasks with the resource_subtype of
                section).
            operationId: addTaskForSection
            summary: Add task to section
    "/sections/{section_gid}/tasks":
        parameters:
            - description: The globally unique identifier for the section.
              in: path
              name: section_gid
              required: true
              type: string
              x-env-variable: section
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the section's tasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                *Board view only*: Returns the compact section records for all tasks
                within the given section.
            operationId: getTasksForSection
            summary: Get tasks from a section
    /status_updates:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Globally unique identifier for object to fetch statuses from. Must
                      be a GID for a project, portfolio, or goal.
                  in: query
                  name: parent
                  required: true
                  type: string
                  x-example: "159874"
                - description: Only return statuses that have been created since the given time.
                  format: date-time
                  in: query
                  name: created_since
                  type: string
                  x-example: "2012-02-22T02:06:58.158Z"
            responses:
                "200":
                    description: Successfully retrieved the specified object's status updates.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/StatusUpdateCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Status updates
            description: Returns the compact status update records for all updates on the object.
            operationId: getStatusesForObject
            summary: Get status updates from an object
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The status update to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/StatusUpdateRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new status update.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/StatusUpdateResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Status updates
            description: |-
                Creates a new status update on an object.
                Returns the full record of the newly created status update.
            operationId: createStatusForObject
            summary: Create a status update
    "/status_updates/{status_gid}":
        parameters:
            - description: The status update to get.
              in: path
              name: status_gid
              required: true
              type: string
              x-env-variable: status
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified status.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Status updates
            description: |-
                Deletes a specific, existing status update.

                Returns an empty data record.
            operationId: deleteStatus
            summary: Delete a status update
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified object's status updates.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/StatusUpdateResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Status updates
            description: Returns the complete record for a single status update.
            operationId: getStatus
            summary: Get a status update
    "/stories/{story_gid}":
        parameters:
            - description: Globally unique identifier for the story.
              in: path
              name: story_gid
              required: true
              type: string
              x-env-variable: story
              x-example: "35678"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified story.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Stories
            description: |-
                Deletes a story. A user can only delete stories they have created.

                Returns an empty data record.
            operationId: deleteStory
            summary: Delete a story
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the specified story.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/StoryResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Stories
            description: Returns the full record for a single story.
            operationId: getStory
            summary: Get a story
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The comment story to update.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/StoryRequest"
                      type: object
            responses:
                "200":
                    description: Successfully retrieved the specified story.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/StoryResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Stories
            description: >-
                Updates the story and returns the full record for the updated story.
                Only comment stories can have their text updated, and only comment
                stories and attachment stories can be pinned. Only one of `text` and
                `html_text` can be specified.
            operationId: updateStory
            summary: Update a story
    /tags:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: The workspace to filter tags on.
                  in: query
                  name: workspace
                  type: string
                  x-example: "1331"
            responses:
                "200":
                    description: Successfully retrieved the specified set of tags.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TagCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: >-
                Returns the compact tag records for some filtered set of tags. Use one
                or more of the parameters provided to filter the tags returned.
            operationId: getTags
            summary: Get multiple tags
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The tag to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TagRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the newly specified tag.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TagResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: |-
                Creates a new tag in a workspace or organization.

                Every tag is required to be created in a specific workspace or
                organization, and this cannot be changed once set. Note that you can use
                the workspace parameter regardless of whether or not it is an
                organization.

                Returns the full record of the newly created tag.
            operationId: createTag
            summary: Create a tag
    "/tags/{tag_gid}":
        parameters:
            - description: Globally unique identifier for the tag.
              in: path
              name: tag_gid
              required: true
              type: string
              x-env-variable: tag
              x-example: "11235"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified tag.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: |-
                A specific, existing tag can be deleted by making a DELETE request on
                the URL for that tag.

                Returns an empty data record.
            operationId: deleteTag
            summary: Delete a tag
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified tag.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TagResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: Returns the complete tag record for a single tag.
            operationId: getTag
            summary: Get a tag
        put:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully updated the specified tag.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TagResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: |-
                Updates the properties of a tag. Only the fields provided in the `data`
                block will be updated; any unspecified fields will remain unchanged.

                When using this method, it is best to specify only those fields you wish
                to change, or else you may overwrite changes made by another user since
                you last retrieved the tag.

                Returns the complete updated tag record.
            operationId: updateTag
            summary: Update a tag
    "/tags/{tag_gid}/tasks":
        parameters:
            - description: Globally unique identifier for the tag.
              in: path
              name: tag_gid
              required: true
              type: string
              x-env-variable: tag
              x-example: "11235"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the tasks associated with the specified tag.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Returns the compact task records for all tasks with the given tag. Tasks
                can have more than one tag at a time.
            operationId: getTasksForTag
            summary: Get tasks from a tag
    /tasks:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: >-
                      The assignee to filter tasks on. If searching for unassigned tasks,
                      assignee.any = null can be specified.

                      *Note: If you specify `assignee`, you must also specify the
                      `workspace` to filter on.*
                  in: query
                  name: assignee
                  type: string
                  x-env-variable: assignee
                  x-example: "14641"
                - description: The project to filter tasks on.
                  in: query
                  name: project
                  type: string
                  x-env-variable: project
                  x-example: "321654"
                - description: |-
                      The section to filter tasks on.
                      *Note: Currently, this is only supported in board views.*
                  in: query
                  name: section
                  type: string
                  x-env-variable: section
                  x-example: "321654"
                - description: >-
                      The workspace to filter tasks on.

                      *Note: If you specify `workspace`, you must also specify the
                      `assignee` to filter on.*
                  in: query
                  name: workspace
                  type: string
                  x-env-variable: workspace
                  x-example: "321654"
                - description: >-
                      Only return tasks that are either incomplete or that have been
                      completed since this time.
                  format: date-time
                  in: query
                  name: completed_since
                  type: string
                - description: |-
                      Only return tasks that have been modified since the given time.

                      *Note: A task is considered “modified” if any of its properties
                      change, or associations between it and other objects are modified
                      (e.g.  a task being added to a project). A task is not considered
                      modified just because another object it is associated with (e.g. a
                      subtask) is modified. Actions that count as modifying the task
                      include assigning, renaming, completing, and adding stories.*
                  format: date-time
                  in: query
                  name: modified_since
                  type: string
                  x-example: "2012-02-22T02:06:58.158Z"
            responses:
                "200":
                    description: Successfully retrieved requested tasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Returns the compact task records for some filtered set of tasks. Use one
                or more of the parameters provided to filter the tasks returned. You
                must specify a `project` or `tag` if you do not specify `assignee` and
                `workspace`.


                For more complex task retrieval, use
                [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
            operationId: getTasks
            summary: Get multiple tasks
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The task to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Creating a new task is as easy as POSTing to the `/tasks` endpoint with
                a

                data block containing the fields you’d like to set on the task. Any

                unspecified fields will take on default values.


                Every task is required to be created in a specific workspace, and this

                workspace cannot be changed once set. The workspace need not be set

                explicitly if you specify `projects` or a `parent` task instead.
            operationId: createTask
            summary: Create a task
    "/tasks/{task_gid}":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully deleted the specified task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                A specific, existing task can be deleted by making a DELETE request on

                the URL for that task. Deleted tasks go into the “trash” of the user

                making the delete request. Tasks can be recovered from the trash within
                a

                period of 30 days; afterward they are completely removed from the
                system.


                Returns an empty data record.
            operationId: deleteTask
            summary: Delete a task
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Returns the complete task record for a single task.
            operationId: getTask
            summary: Get a task
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The task to update.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the specified task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: |-
                A specific, existing task can be updated by making a PUT request on the
                URL for that task. Only the fields provided in the `data` block will be
                updated; any unspecified fields will remain unchanged.

                When using this method, it is best to specify only those fields you wish
                to change, or else you may overwrite changes made by another user since
                you last retrieved the task.

                Returns the complete updated task record.
            operationId: updateTask
            summary: Update a task
    "/tasks/{task_gid}/addDependencies":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The list of tasks to set as dependencies.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ModifyDependenciesRequest"
                      type: object
            responses:
                "200":
                    description: Successfully set the specified dependencies on the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Marks a set of tasks as dependencies of this task, if they are not
                already dependencies. *A task can have at most 30 dependents and
                dependencies combined*.
            operationId: addDependenciesForTask
            summary: Set dependencies for a task
    "/tasks/{task_gid}/addDependents":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The list of tasks to add as dependents.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ModifyDependentsRequest"
                      type: object
            responses:
                "200":
                    description: Successfully set the specified dependents on the given task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Marks a set of tasks as dependents of this task, if they are not already
                dependents. *A task can have at most 30 dependents and dependencies
                combined*.
            operationId: addDependentsForTask
            summary: Set dependents for a task
    "/tasks/{task_gid}/addFollowers":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The followers to add to the task.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskAddFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the specified followers to the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Adds followers to a task. Returns an empty data block.

                Each task can be associated with zero or more followers in the system.

                Requests to add/remove followers, if successful, will return the
                complete updated task record, described above.
            operationId: addFollowersForTask
            summary: Add followers to a task
    "/tasks/{task_gid}/addProject":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The project to add the task to.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskAddProjectRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the specified project to the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: |-
                Adds the task to the specified project, in the optional location
                specified. If no location arguments are given, the task will be added to
                the end of the project.

                `addProject` can also be used to reorder a task within a project or
                section that already contains it.

                At most one of `insert_before`, `insert_after`, or `section` should be
                specified. Inserting into a section in an non-order-dependent way can be
                done by specifying section, otherwise, to insert within a section in a
                particular place, specify `insert_before` or `insert_after` and a task
                within the section to anchor the position of this task.

                Returns an empty data block.
            operationId: addProjectForTask
            summary: Add a project to a task
    "/tasks/{task_gid}/addTag":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The tag to add to the task.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskAddTagRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added the specified tag to the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Adds a tag to a task. Returns an empty data block.
            operationId: addTagForTask
            summary: Add a tag to a task
    "/tasks/{task_gid}/dependencies":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified task's dependencies.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Returns the compact representations of all of the dependencies of a
                task.
            operationId: getDependenciesForTask
            summary: Get dependencies from a task
    "/tasks/{task_gid}/dependents":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the specified dependents of the task.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Returns the compact representations of all of the dependents of a task.
            operationId: getDependentsForTask
            summary: Get dependents from a task
    "/tasks/{task_gid}/duplicate":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: >-
                      Describes the duplicate's name and the fields that will be
                      duplicated.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskDuplicateRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the job to handle duplication.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/JobResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Creates and returns a job that will asynchronously handle the
                duplication.
            operationId: duplicateTask
            summary: Duplicate a task
    "/tasks/{task_gid}/projects":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the projects for the given task.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: Returns a compact representation of all of the projects the task is in.
            operationId: getProjectsForTask
            summary: Get projects a task is in
    "/tasks/{task_gid}/removeDependencies":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The list of tasks to unlink as dependencies.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ModifyDependenciesRequest"
                      type: object
            responses:
                "200":
                    description: Successfully unlinked the dependencies from the specified task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Unlinks a set of dependencies from this task.
            operationId: removeDependenciesForTask
            summary: Unlink dependencies from a task
    "/tasks/{task_gid}/removeDependents":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The list of tasks to remove as dependents.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ModifyDependentsRequest"
                      type: object
            responses:
                "200":
                    description: Successfully unlinked the specified tasks as dependents.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "402":
                    description: >-
                        The request was valid, but the queried object or object mutation
                        specified in the request is above your current premium level.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Unlinks a set of dependents from this task.
            operationId: removeDependentsForTask
            summary: Unlink dependents from a task
    "/tasks/{task_gid}/removeFollowers":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The followers to remove from the task.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRemoveFollowersRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the specified followers from the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Removes each of the specified followers from the task if they are
                following. Returns the complete, updated record for the affected task.
            operationId: removeFollowerForTask
            summary: Remove followers from a task
    "/tasks/{task_gid}/removeProject":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The project to remove the task from.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRemoveProjectRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the specified project from the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Removes the task from the specified project. The task will still exist
                in

                the system, but it will not be in the project anymore.


                Returns an empty data block.
            operationId: removeProjectForTask
            summary: Remove a project from a task
    "/tasks/{task_gid}/removeTag":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The tag to remove from the task.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRemoveTagRequest"
                      type: object
            responses:
                "200":
                    description: Successfully removed the specified tag from the task.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Removes a tag from a task. Returns an empty data block.
            operationId: removeTagForTask
            summary: Remove a tag from a task
    "/tasks/{task_gid}/setParent":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The new parent of the subtask.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskSetParentRequest"
                      type: object
            responses:
                "200":
                    description: Successfully changed the parent of the specified subtask.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                parent, or no parent task at all. Returns an empty data block. When
                using `insert_before` and `insert_after`, at most one of those two
                options can be specified, and they must already be subtasks of the
                parent.
            operationId: setParentForTask
            summary: Set the parent of a task
    "/tasks/{task_gid}/stories":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the specified task's stories.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/StoryCompact"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Stories
            description: Returns the compact records for all stories on the task.
            operationId: getStoriesForTask
            summary: Get stories from a task
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The story to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/StoryRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new story.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/StoryResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Stories
            description: >-
                Adds a story to a task. This endpoint currently only allows for comment

                stories to be created. The comment will be authored by the currently

                authenticated user, and timestamped when the server receives the
                request.


                Returns the full record for the new story added to the task.
            operationId: createStoryForTask
            summary: Create a story on a task
    "/tasks/{task_gid}/subtasks":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the specified task's subtasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: Returns a compact representation of all of the subtasks of a task.
            operationId: getSubtasksForTask
            summary: Get subtasks from a task
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The new subtask to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TaskRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the specified subtask.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TaskResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Creates a new subtask and adds it to the parent task. Returns the full
                record for the newly created subtask.
            operationId: createSubtaskForTask
            summary: Create a subtask
    "/tasks/{task_gid}/tags":
        parameters:
            - description: The task to operate on.
              in: path
              name: task_gid
              required: true
              type: string
              x-env-variable: task
              x-example: "321654"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the tags for the given task.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TagCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: Get a compact representation of all of the tags the task has.
            operationId: getTagsForTask
            summary: Get a task's tags
    /team_memberships:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters:
                - description: Globally unique identifier for the team.
                  in: query
                  name: team
                  type: string
                  x-example: "159874"
                - description: >-
                      A string identifying a user. This can either be the string "me", an
                      email, or the gid of a user. This parameter must be used with the
                      workspace parameter.
                  in: query
                  name: user
                  type: string
                  x-example: "512241"
                - description: >-
                      Globally unique identifier for the workspace. This parameter must be
                      used with the user parameter.
                  in: query
                  name: workspace
                  type: string
                  x-example: "31326"
            responses:
                "200":
                    description: Successfully retrieved the requested team memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TeamMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Team memberships
            description: Returns compact team membership records.
            operationId: getTeamMemberships
            summary: Get team memberships
    "/team_memberships/{team_membership_gid}":
        parameters:
            - in: path
              name: team_membership_gid
              required: true
              type: string
              x-env-variable: team_membership
              x-example: "724362"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested team membership.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TeamMembershipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Team memberships
            description: >-
                Returns the complete team membership record for a single team
                membership.
            operationId: getTeamMembership
            summary: Get a team membership
    /teams:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The team to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TeamRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new team.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TeamResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: Creates a team within the current workspace.
            operationId: createTeam
            summary: Create a team
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The team to update.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TeamRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the team.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TeamResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: Updates a team within the current workspace.
            operationId: updateTeam
            summary: Update a team
    "/teams/{team_gid}":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for a single team.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TeamResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: Returns the full record for a single team.
            operationId: getTeam
            summary: Get a team
    "/teams/{team_gid}/addUser":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The user to add to the team.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TeamAddUserRequest"
                      type: object
            responses:
                "200":
                    description: Successfully added user to the team.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TeamMembershipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: >-
                The user making this call must be a member of the team in order to add
                others. The user being added must exist in the same organization as the
                team.


                Returns the complete team membership record for the newly added user.
            operationId: addUserForTeam
            summary: Add a user to a team
    "/teams/{team_gid}/project_templates":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the requested team's project templates.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectTemplateCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Project templates
            description: >-
                Returns the compact project template records for all project templates
                in the team.
            operationId: getProjectTemplatesForTeam
            summary: Get a team's project templates
    "/teams/{team_gid}/projects":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: >-
                      Only return projects whose `archived` field takes on the value of
                      this parameter.
                  in: query
                  name: archived
                  type: boolean
                  x-example: false
            responses:
                "200":
                    description: Successfully retrieved the requested team's projects.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: Returns the compact project records for all projects in the team.
            operationId: getProjectsForTeam
            summary: Get a team's projects
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The new project to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the specified project.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: |-
                Creates a project shared with the given team.

                Returns the full record of the newly created project.
            operationId: createProjectForTeam
            summary: Create a project in a team
    "/teams/{team_gid}/removeUser":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The user to remove from the team.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TeamRemoveUserRequest"
                      type: object
            responses:
                "204":
                    description: Returns an empty data record
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: >-
                The user making this call must be a member of the team in order to
                remove themselves or others.
            operationId: removeUserForTeam
            summary: Remove a user from a team
    "/teams/{team_gid}/team_memberships":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested team's memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TeamMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Team memberships
            description: Returns the compact team memberships for the team.
            operationId: getTeamMembershipsForTeam
            summary: Get memberships from a team
    "/teams/{team_gid}/users":
        parameters:
            - description: Globally unique identifier for the team.
              in: path
              name: team_gid
              required: true
              type: string
              x-env-variable: team
              x-example: "159874"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: >-
                        Returns the user records for all the members of the team, including
                        guests and limited access users
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/UserCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Users
            description: >-
                Returns the compact records for all users that are members of the team.

                Results are sorted alphabetically and limited to 2000. For more results
                use the `/users` endpoint.
            operationId: getUsersForTeam
            summary: Get users in a team
    /time_periods:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters:
                - description: ISO 8601 date string
                  format: date
                  in: query
                  name: start_on
                  type: string
                  x-example: "2019-09-15"
                - description: ISO 8601 date string
                  format: date
                  in: query
                  name: end_on
                  type: string
                  x-example: "2019-09-15"
                - description: Globally unique identifier for the workspace.
                  in: query
                  name: workspace
                  required: true
                  type: string
                  x-example: "31326"
            responses:
                "200":
                    description: Successfully retrieved the requested time periods.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TimePeriodCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Time periods
            description: Returns compact time period records.
            operationId: getTimePeriods
            summary: Get time periods
    "/time_periods/{time_period_gid}":
        parameters:
            - description: Globally unique identifier for the time period.
              in: path
              name: time_period_gid
              required: true
              type: string
              x-env-variable: time_period
              x-example: "917392"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the record for a single time period.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TimePeriodResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Time periods
            description: Returns the full record for a single time period.
            operationId: getTimePeriod
            summary: Get a time period
    "/user_task_lists/{user_task_list_gid}":
        parameters:
            - description: Globally unique identifier for the user task list.
              in: path
              name: user_task_list_gid
              required: true
              type: string
              x-env-variable: user_task_list
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the user task list.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/UserTaskListResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - User task lists
            description: Returns the full record for a user task list.
            operationId: getUserTaskList
            summary: Get a user task list
    "/user_task_lists/{user_task_list_gid}/tasks":
        parameters:
            - description: >
                  Only return tasks that are either incomplete or that have been
                  completed since this time. Accepts a date-time string or the keyword
                  *now*.
              in: query
              name: completed_since
              required: false
              type: string
              x-example: "2012-02-22T02:06:58.158Z"
            - description: Globally unique identifier for the user task list.
              in: path
              name: user_task_list_gid
              required: true
              type: string
              x-env-variable: user_task_list
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the user task list's tasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                Returns the compact list of tasks in a user’s My Tasks list.

                *Note: Access control is enforced for this endpoint as with all Asana
                API endpoints, meaning a user’s private tasks will be filtered out if
                the API-authenticated user does not have access to them.*

                *Note: Both complete and incomplete tasks are returned by default unless
                they are filtered out (for example, setting `completed_since=now` will
                return only incomplete tasks, which is the default view for “My Tasks”
                in Asana.)*
            operationId: getTasksForUserTaskList
            summary: Get tasks from a user task list
    /users:
        parameters:
            - description: The workspace or organization ID to filter users on.
              in: query
              name: workspace
              type: string
              x-example: "1331"
            - description: The team ID to filter users on.
              in: query
              name: team
              type: string
              x-example: "15627"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested user records.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/UserCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Users
            description: >-
                Returns the user records for all users in all workspaces and
                organizations accessible to the authenticated user. Accepts an optional
                workspace ID parameter.

                Results are sorted by user ID.
            operationId: getUsers
            summary: Get multiple users
    "/users/{user_gid}":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Returns the user specified.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/UserResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Users
            description: Returns the full user record for the single user with the provided ID.
            operationId: getUser
            summary: Get a user
    "/users/{user_gid}/favorites":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - default: project
              description: The resource type of favorites to be returned.
              enum:
                  - portfolio
                  - project
                  - tag
                  - task
                  - user
                  - project_template
              in: query
              name: resource_type
              required: true
              type: string
            - description: The workspace in which to get favorites.
              in: query
              name: workspace
              required: true
              type: string
              x-example: "1234"
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Returns the specified user's favorites.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/AsanaNamedResource"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Users
            description: >-
                Returns all of a user's favorites in the given workspace, of the given
                type.

                Results are given in order (The same order as Asana's sidebar).
            operationId: getFavoritesForUser
            summary: Get a user's favorites
    "/users/{user_gid}/team_memberships":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters:
                - description: Globally unique identifier for the workspace.
                  in: query
                  name: workspace
                  required: true
                  type: string
                  x-example: "31326"
            responses:
                "200":
                    description: Successfully retrieved the requested users's memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TeamMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Team memberships
            description: Returns the compact team membership records for the user.
            operationId: getTeamMembershipsForUser
            summary: Get memberships from a user
    "/users/{user_gid}/teams":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            - description: The workspace or organization to filter teams on.
              in: query
              name: organization
              required: true
              type: string
              x-example: "1331"
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: >-
                        Returns the team records for all teams in the organization or
                        workspace to which the given user is assigned.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TeamCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: >-
                Returns the compact records for all teams to which the given user is
                assigned.
            operationId: getTeamsForUser
            summary: Get teams for a user
    "/users/{user_gid}/user_task_list":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: The workspace in which to get the user task list.
              in: query
              name: workspace
              required: true
              type: string
              x-example: "1234"
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the user's task list.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/UserTaskListResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - User task lists
            description: Returns the full record for a user's task list.
            operationId: getUserTaskListForUser
            summary: Get a user's task list
    "/users/{user_gid}/workspace_memberships":
        parameters:
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: path
              name: user_gid
              required: true
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested user's workspace memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/WorkspaceMembershipCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspace memberships
            description: Returns the compact workspace membership records for the user.
            operationId: getWorkspaceMembershipsForUser
            summary: Get workspace memberships for a user
    /webhooks:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: The workspace to query for webhooks in.
                  in: query
                  name: workspace
                  required: true
                  type: string
                  x-example: "1331"
                - description: Only return webhooks for the given resource.
                  in: query
                  name: resource
                  type: string
                  x-example: "51648"
            responses:
                "200":
                    description: Successfully retrieved the requested webhooks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/WebhookResponse"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Webhooks
            description: >-
                Get the compact representation of all webhooks your app has registered
                for the authenticated user in the given workspace.
            operationId: getWebhooks
            summary: Get multiple webhooks
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The webhook workspace and target.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/WebhookRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created the requested webhook.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WebhookResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Webhooks
            description: >-
                Establishing a webhook is a two-part process. First, a simple HTTP POST

                request initiates the creation similar to creating any other resource.


                Next, in the middle of this request comes the confirmation handshake.

                When a webhook is created, we will send a test POST to the target with
                an

                `X-Hook-Secret` header. The target must respond with a `200 OK` or `204

                No Content` and a matching `X-Hook-Secret` header to confirm that this

                webhook subscription is indeed expected. We strongly recommend storing

                this secret to be used to verify future webhook event signatures.


                The POST request to create the webhook will then return with the status

                of the request. If you do not acknowledge the webhook’s confirmation

                handshake it will fail to setup, and you will receive an error in

                response to your attempt to create it. This means you need to be able to

                receive and complete the webhook *while* the POST request is in-flight

                (in other words, have a server that can handle requests asynchronously).


                Invalid hostnames like localhost will recieve a 403 Forbidden status
                code.


                ```

                # Request

                curl -H "Authorization: Bearer <personal_access_token>" \

                -X POST https://app.asana.com/api/1.0/webhooks \

                -d "resource=8675309" \

                -d "target=https://example.com/receive-webhook/7654"

                ```


                ```

                # Handshake sent to https://example.com/

                POST /receive-webhook/7654

                X-Hook-Secret:
                b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81

                ```


                ```

                # Handshake response sent by example.com

                HTTP/1.1 200

                X-Hook-Secret:
                b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81

                ```


                ```

                # Response

                HTTP/1.1 201

                {
                  "data": {
                    "gid": "43214",
                    "resource": {
                      "gid": "8675309",
                      "name": "Bugs"
                    },
                    "target": "https://example.com/receive-webhook/7654",
                    "active": false,
                    "last_success_at": null,
                    "last_failure_at": null,
                    "last_failure_content": null
                  }
                }

                ```
            operationId: createWebhook
            summary: Establish a webhook
    "/webhooks/{webhook_gid}":
        parameters:
            - description: Globally unique identifier for the webhook.
              in: path
              name: webhook_gid
              required: true
              type: string
              x-env-variable: webhook
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        delete:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested webhook.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Webhooks
            description: >-
                This method *permanently* removes a webhook. Note that it may be
                possible to receive a request that was already in flight after deleting
                the webhook, but no further requests will be issued.
            operationId: deleteWebhook
            summary: Delete a webhook
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested webhook.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WebhookResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Webhooks
            description: Returns the full record for the given webhook.
            operationId: getWebhook
            summary: Get a webhook
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The updated filters for the webhook.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/WebhookUpdateRequest"
                      type: object
            responses:
                "200":
                    description: Successfully updated the webhook.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WebhookResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Webhooks
            description: >-
                An existing webhook's filters can be updated by making a PUT request on
                the URL for that webhook. Note that the webhook's previous `filters`
                array will be completely overwritten by the `filters` sent in the PUT
                request.
            operationId: updateWebhook
            summary: Update a webhook
    "/workspace_memberships/{workspace_membership_gid}":
        parameters:
            - in: path
              name: workspace_membership_gid
              required: true
              type: string
              x-env-variable: workspace_membership
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested workspace membership.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WorkspaceMembershipResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspace memberships
            description: Returns the complete workspace record for a single workspace membership.
            operationId: getWorkspaceMembership
            summary: Get a workspace membership
    /workspaces:
        parameters:
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Return all workspaces visible to the authorized user.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/WorkspaceCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspaces
            description: >-
                Returns the compact records for all workspaces visible to the authorized
                user.
            operationId: getWorkspaces
            summary: Get multiple workspaces
    "/workspaces/{workspace_gid}":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Return the full workspace record.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WorkspaceResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspaces
            description: Returns the full workspace record for a single workspace.
            operationId: getWorkspace
            summary: Get a workspace
        put:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The workspace object with all updated properties.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/WorkspaceRequest"
                      type: object
            responses:
                "200":
                    description: Update for the workspace was successful.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/WorkspaceResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspaces
            description: >-
                A specific, existing workspace can be updated by making a PUT request on
                the URL for that workspace. Only the fields provided in the data block
                will be updated; any unspecified fields will remain unchanged.

                Currently the only field that can be modified for a workspace is its
                name.

                Returns the complete, updated workspace record.
            operationId: updateWorkspace
            summary: Update a workspace
    "/workspaces/{workspace_gid}/addUser":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The user to add to the workspace.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/WorkspaceAddUserRequest"
                      type: object
            responses:
                "200":
                    description: The user was added successfully to the workspace or organization.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/UserBaseResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspaces
            description: >-
                Add a user to a workspace or organization.

                The user can be referenced by their globally unique user ID or their
                email address. Returns the full user record for the invited user.
            operationId: addUserForWorkspace
            summary: Add a user to a workspace or organization
    "/workspaces/{workspace_gid}/audit_log_events":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - description: Filter to events created after this time (inclusive).
              format: date-time
              in: query
              name: start_at
              required: false
              type: string
            - description: Filter to events created before this time (exclusive).
              format: date-time
              in: query
              name: end_at
              required: false
              type: string
            - description: >-
                  Filter to events of this type.

                  Refer to the [Supported
                  AuditLogEvents](/docs/supported-auditlogevents) for a full list of
                  values.
              in: query
              name: event_type
              required: false
              type: string
            - description: >-
                  Filter to events with an actor of this type.

                  This only needs to be included if querying for actor types without an
                  ID. If `actor_gid` is included, this should be excluded.
              enum:
                  - user
                  - asana
                  - asana_support
                  - anonymous
                  - external_administrator
              in: query
              name: actor_type
              required: false
              type: string
            - description: Filter to events triggered by the actor with this ID.
              in: query
              name: actor_gid
              required: false
              type: string
            - description: Filter to events with this resource ID.
              in: query
              name: resource_gid
              required: false
              type: string
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: AuditLogEvents were successfully retrieved.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/AuditLogEvent"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Audit log API
            description: >-
                Retrieve the audit log events that have been captured in your domain.


                This endpoint will return a list of
                [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time
                in ascending order. Note that the Audit Log API captures events from
                October 8th, 2021 and later. Queries for events before this date will
                not return results.


                There are a number of query parameters (below) that can be used to
                filter the set of [AuditLogEvent](/docs/audit-log-event) objects that
                are returned in the response. Any combination of query parameters is
                valid. When no filters are provided, all of the events that have been
                captured in your domain will match.


                The list of events will always be [paginated](/docs/pagination). The
                default limit is 1000 events. The next set of events can be retrieved
                using the `offset` from the previous response. If there are no events
                that match the provided filters in your domain, the endpoint will return
                `null` for the `next_page` field. Querying again with the same filters
                may return new events if they were captured after the last request. Once
                a response includes a `next_page` with an `offset`, subsequent requests
                can be made with the latest `offset` to poll for new events that match
                the provided filters.


                When no `offset` is provided, the response will begin with the oldest
                events that match the provided filters. It is important to note that
                [AuditLogEvent](/docs/audit-log-event) objects will be permanently
                deleted from our systems after 90 days. If you wish to keep a permanent
                record of these events, we recommend using a SIEM tool to ingest and
                store these logs.
            operationId: getAuditLogEvents
            summary: Get audit log events
    "/workspaces/{workspace_gid}/custom_fields":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved all custom fields for the given workspace.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/CustomFieldResponse"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Custom fields
            description: >-
                Returns a list of the compact representation of all of the custom fields
                in a workspace.
            operationId: getCustomFieldsForWorkspace
            summary: Get a workspace's custom fields
    "/workspaces/{workspace_gid}/projects":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                - description: >-
                      Only return projects whose `archived` field takes on the value of
                      this parameter.
                  in: query
                  name: archived
                  type: boolean
                  x-example: false
            responses:
                "200":
                    description: Successfully retrieved the requested workspace's projects.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/ProjectCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: >-
                Returns the compact project records for all projects in the workspace.

                *Note: This endpoint may timeout for large domains. Prefer the
                `/teams/{team_gid}/projects` endpoint.*
            operationId: getProjectsForWorkspace
            summary: Get all projects in a workspace
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The new project to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/ProjectRequest"
                      type: object
            responses:
                "201":
                    description: Successfully created a new project in the specified workspace.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/ProjectResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Projects
            description: |-
                Returns the compact project records for all projects in the workspace.

                If the workspace for your project is an organization, you must also
                supply a team to share the project with.

                Returns the full record of the newly created project.
            operationId: createProjectForWorkspace
            summary: Create a project in a workspace
    "/workspaces/{workspace_gid}/removeUser":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The user to remove from the workspace.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/WorkspaceRemoveUserRequest"
                      type: object
            responses:
                "204":
                    description: The user was removed successfully to the workspace or organization.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/EmptyResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Workspaces
            description: >-
                Remove a user from a workspace or organization.

                The user making this call must be an admin in the workspace. The user
                can be referenced by their globally unique user ID or their email
                address.

                Returns an empty data record.
            operationId: removeUserForWorkspace
            summary: Remove a user from a workspace or organization
    "/workspaces/{workspace_gid}/tags":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters:
                - description: >-
                      Results per page.

                      The number of objects to return per page. The value must be between
                      1 and 100.
                  in: query
                  name: limit
                  type: integer
                  x-example: 50
                - description: >-
                      Offset token.

                      An offset to the next page returned by the API. A pagination request
                      will return an offset token, which can be used as an input parameter
                      to the next request. If an offset is not passed in, the API will
                      return the first page of results.

                      'Note: You can only pass in an offset that was returned to you via a
                      previously paginated request.'
                  in: query
                  name: offset
                  type: string
                  x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
            responses:
                "200":
                    description: Successfully retrieved the specified set of tags.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TagCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: >-
                Returns the compact tag records for some filtered set of tags. Use one
                or more of the parameters provided to filter the tags returned.
            operationId: getTagsForWorkspace
            summary: Get tags in a workspace
        post:
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - description: The tag to create.
                  in: body
                  name: body
                  required: true
                  schema:
                      properties:
                          data:
                              $ref: "#/definitions/TagResponse"
                      type: object
            responses:
                "201":
                    description: Successfully created the newly specified tag.
                    schema:
                        properties:
                            data:
                                $ref: "#/definitions/TagResponse"
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tags
            description: |-
                Creates a new tag in a workspace or organization.

                Every tag is required to be created in a specific workspace or
                organization, and this cannot be changed once set. Note that you can use
                the workspace parameter regardless of whether or not it is an
                organization.

                Returns the full record of the newly created tag.
            operationId: createTagForWorkspace
            summary: Create a tag in a workspace
    "/workspaces/{workspace_gid}/tasks/search":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: Performs full-text search on both task name and description
              in: query
              name: text
              type: string
              x-example: Bug
            - default: milestone
              description: Filters results by the task's resource_subtype
              enum:
                  - default_task
                  - milestone
              in: query
              name: resource_subtype
              type: string
            - description: Comma-separated list of user identifiers
              in: query
              name: assignee.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: assignee.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of portfolio IDs
              in: query
              name: portfolios.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of project IDs
              in: query
              name: projects.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of project IDs
              in: query
              name: projects.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of project IDs
              in: query
              name: projects.all
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of section or column IDs
              in: query
              name: sections.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of section or column IDs
              in: query
              name: sections.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of section or column IDs
              in: query
              name: sections.all
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of tag IDs
              in: query
              name: tags.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of tag IDs
              in: query
              name: tags.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of tag IDs
              in: query
              name: tags.all
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of team IDs
              in: query
              name: teams.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: followers.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: created_by.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: created_by.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: assigned_by.any
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: assigned_by.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: liked_by.not
              type: string
              x-example: "12345,23456,34567"
            - description: Comma-separated list of user identifiers
              in: query
              name: commented_on_by.not
              type: string
              x-example: "12345,23456,34567"
            - description: ISO 8601 date string
              format: date
              in: query
              name: due_on.before
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: due_on.after
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string or `null`
              format: date
              in: query
              name: due_on
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: due_at.before
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: due_at.after
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 date string
              format: date
              in: query
              name: start_on.before
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: start_on.after
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string or `null`
              format: date
              in: query
              name: start_on
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: created_on.before
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: created_on.after
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string or `null`
              format: date
              in: query
              name: created_on
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: created_at.before
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: created_at.after
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 date string
              format: date
              in: query
              name: completed_on.before
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: completed_on.after
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string or `null`
              format: date
              in: query
              name: completed_on
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: completed_at.before
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: completed_at.after
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 date string
              format: date
              in: query
              name: modified_on.before
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string
              format: date
              in: query
              name: modified_on.after
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 date string or `null`
              format: date
              in: query
              name: modified_on
              type: string
              x-example: "2019-09-15"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: modified_at.before
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: ISO 8601 datetime string
              format: date-time
              in: query
              name: modified_at.after
              type: string
              x-example: "2019-04-15T01:01:46.055Z"
            - description: Filter to incomplete tasks with dependents
              in: query
              name: is_blocking
              type: boolean
              x-example: false
            - description: Filter to tasks with incomplete dependencies
              in: query
              name: is_blocked
              type: boolean
              x-example: false
            - description: Filter to tasks with attachments
              in: query
              name: has_attachment
              type: boolean
              x-example: false
            - description: Filter to completed tasks
              in: query
              name: completed
              type: boolean
              x-example: false
            - description: Filter to subtasks
              in: query
              name: is_subtask
              type: boolean
              x-example: false
            - default: modified_at
              description: >-
                  One of `due_date`, `created_at`, `completed_at`, `likes`, or
                  `modified_at`, defaults to `modified_at`
              enum:
                  - due_date
                  - created_at
                  - completed_at
                  - likes
                  - modified_at
              in: query
              name: sort_by
              type: string
              x-example: likes
            - default: false
              description: Default `false`
              in: query
              name: sort_ascending
              type: boolean
              x-example: true
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the section's tasks.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TaskCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Tasks
            description: >-
                To mirror the functionality of the Asana web app's advanced search
                feature, the Asana API has a task search endpoint that allows you to
                build complex filters to find and retrieve the exact data you need.

                #### Premium access

                Like the Asana web product's advance search feature, this search
                endpoint will only be available to premium Asana users. A user is
                premium if any of the following is true:


                - The workspace in which the search is being performed is a premium
                workspace - The user is a member of a premium team inside the workspace


                Even if a user is only a member of a premium team inside a non-premium
                workspace, search will allow them to find data anywhere in the
                workspace, not just inside the premium team. Making a search request
                using credentials of a non-premium user will result in a `402 Payment
                Required` error.

                #### Pagination

                Search results are not stable; repeating the same query multiple times
                may return the data in a different order, even if the data do not
                change. Because of this, the traditional
                [pagination](https://developers.asana.com/docs/#pagination) available
                elsewhere in the Asana API is not available here. However, you can
                paginate manually by sorting the search results by their creation time
                and then modifying each subsequent query to exclude data you have
                already seen. Page sizes are limited to a maximum of 100 items, and can
                be specified by the `limit` query parameter.

                #### Eventual consistency

                Changes in Asana (regardless of whether they’re made though the web
                product or the API) are forwarded to our search infrastructure to be
                indexed. This process can take between 10 and 60 seconds to complete
                under normal operation, and longer during some production incidents.
                Making a change to a task that would alter its presence in a particular
                search query will not be reflected immediately. This is also true of the
                advanced search feature in the web product.

                #### Rate limits

                You may receive a `429 Too Many Requests` response if you hit any of our
                [rate limits](https://developers.asana.com/docs/#rate-limits).

                #### Custom field parameters

                | Parameter name | Custom field type | Accepted type |

                |---|---|---|

                | custom_fields.{gid}.is_set | All | Boolean |

                | custom_fields.{gid}.value | Text | String |

                | custom_fields.{gid}.value | Number | Number |

                | custom_fields.{gid}.value | Enum | Enum option ID |

                | custom_fields.{gid}.starts_with | Text only | String |

                | custom_fields.{gid}.ends_with | Text only | String |

                | custom_fields.{gid}.contains | Text only | String |

                | custom_fields.{gid}.less_than | Number only | Number |

                | custom_fields.{gid}.greater_than | Number only | Number |



                For example, if the gid of the custom field is 12345, these query
                parameter to find tasks where it is set would be
                `custom_fields.12345.is_set=true`. To match an exact value for an enum
                custom field, use the gid of the desired enum option and not the name of
                the enum option: `custom_fields.12345.value=67890`.


                **Not Supported**: searching for multiple exact matches of a custom
                field, searching for multi-enum custom field


                *Note: If you specify `projects.any` and `sections.any`, you will
                receive tasks for the project **and** tasks for the section. If you're
                looking for only tasks in a section, omit the `projects.any` from the
                request.*
            operationId: searchTasksForWorkspace
            summary: Search tasks in a workspace
    "/workspaces/{workspace_gid}/teams":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: >-
                        Returns the team records for all teams in the organization or
                        workspace accessible to the authenticated user.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/TeamCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Teams
            description: >-
                Returns the compact records for all teams in the workspace visible to
                the authorized user.
            operationId: getTeamsForWorkspace
            summary: Get teams in a workspace
    "/workspaces/{workspace_gid}/typeahead":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - default: user
              description: >-
                  The type of values the typeahead should return. You can choose from
                  one of the following: `custom_field`, `project`, `project_template`,
                  `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names
                  of endpoints, the types listed here are in singular form (e.g.
                  `task`). Using multiple types is not yet supported.
              enum:
                  - custom_field
                  - project
                  - project_template
                  - portfolio
                  - tag
                  - task
                  - user
              in: query
              name: resource_type
              required: true
              type: string
            - default: user
              description: "*Deprecated: new integrations should prefer the resource_type field.*"
              enum:
                  - custom_field
                  - portfolio
                  - project
                  - tag
                  - task
                  - user
              in: query
              name: type
              required: false
              type: string
            - description: >-
                  The string that will be used to search for relevant objects. If an
                  empty string is passed in, the API will return results.
              in: query
              name: query
              type: string
              x-example: Greg
            - description: >-
                  The number of results to return. The default is 20 if this parameter
                  is omitted, with a minimum of 1 and a maximum of 100. If there are
                  fewer results found than requested, all will be returned.
              in: query
              name: count
              type: integer
              x-example: 20
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved objects via a typeahead search algorithm.
                    schema:
                        description: >-
                            A generic list of objects, such as those returned by the typeahead
                            search endpoint.
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/AsanaNamedResource"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Typeahead
            description: >-
                Retrieves objects in the workspace based via an
                auto-completion/typeahead

                search algorithm. This feature is meant to provide results quickly, so
                do

                not rely on this API to provide extremely accurate search results. The

                result set is limited to a single page of results with a maximum size,
                so

                you won’t be able to fetch large numbers of results.


                The typeahead search API provides search for objects from a single

                workspace. This endpoint should be used to query for objects when

                creating an auto-completion/typeahead search feature. This API is meant

                to provide results quickly and should not be relied upon for accurate or

                exhaustive search results. The results sets are limited in size and

                cannot be paginated.


                Queries return a compact representation of each object which is
                typically

                the gid and name fields. Interested in a specific set of fields or all
                of

                the fields?! Of course you are. Use field selectors to manipulate what

                data is included in a response.


                Resources with type `user` are returned in order of most contacted to

                least contacted. This is determined by task assignments, adding the user

                to projects, and adding the user as a follower to tasks, messages,

                etc.


                Resources with type `project` are returned in order of recency. This is

                determined when the user visits the project, is added to the project,
                and

                completes tasks in the project.


                Resources with type `task` are returned with priority placed on tasks

                the user is following, but no guarantee on the order of those tasks.


                Resources with type `project_template` are returned with priority

                placed on favorited project templates.


                Leaving the `query` string empty or omitted will give you results, still

                following the resource ordering above. This could be used to list users
                or

                projects that are relevant for the requesting user's api token.
            operationId: typeaheadForWorkspace
            summary: Get objects via typeahead
    "/workspaces/{workspace_gid}/users":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Return the users in the specified workspace or org.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/UserCompact"
                                type: array
                        type: object
                "400":
                    description: >-
                        This usually occurs because of a missing or malformed parameter.
                        Check the documentation and the syntax of your request and try
                        again.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "401":
                    description: >-
                        A valid authentication token was not provided with the request, so
                        the API could not associate a user with the request.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "403":
                    description: >-
                        The authentication and request syntax was valid but the server is
                        refusing to complete the request. This can happen if you try to read
                        or write to objects or properties that the user does not have access
                        to.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "404":
                    description: >-
                        Either the request method and path supplied do not specify a known
                        action in the API, or the object specified by the request does not
                        exist.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                "500":
                    description: >-
                        There was a problem on Asana’s end. In the event of a server error
                        the response body should contain an error phrase. These phrases can
                        be used by Asana support to quickly look up the incident that caused
                        the server error. Some errors are due to server load, and will not
                        supply an error phrase.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags:
                - Users
            description: >-
                Returns the compact records for all users in the specified workspace or
                organization.

                Results are sorted alphabetically and limited to 2000. For more results
                use the `/users` endpoint.
            operationId: getUsersForWorkspace
            summary: Get users in a workspace or organization
    "/workspaces/{workspace_gid}/workspace_memberships":
        parameters:
            - description: Globally unique identifier for the workspace or organization.
              in: path
              name: workspace_gid
              required: true
              type: string
              x-env-variable: workspace
              x-example: "12345"
            - description: >-
                  A string identifying a user. This can either be the string "me", an
                  email, or the gid of a user.
              in: query
              name: user
              type: string
              x-env-variable: user
              x-example: me
            - allowEmptyValue: true
              description: >-
                  Provides “pretty” output.

                  Provides the response in a “pretty” format. In the case of JSON this
                  means doing proper line breaking and indentation to make it readable.
                  This will take extra time and increase the response size so it is
                  advisable only to use this during debugging.
              in: query
              name: opt_pretty
              required: false
              type: boolean
              x-example: true
            - collectionFormat: multi
              description: >-
                  Defines fields to return.

                  Some requests return *compact* representations of objects in order to
                  conserve resources and complete the request more efficiently. Other
                  times requests return more information than you may need. This option
                  allows you to list the exact set of fields that the API should be sure
                  to return for the objects. The field names should be provided as
                  paths, described below.

                  The id of included objects will always be returned, regardless of the
                  field options.
              in: query
              items:
                  type: string
              name: opt_fields
              required: false
              type: array
              x-example:
                  - followers
                  - assignee
            - description: >-
                  Results per page.

                  The number of objects to return per page. The value must be between 1
                  and 100.
              in: query
              name: limit
              type: integer
              x-example: 50
            - description: >-
                  Offset token.

                  An offset to the next page returned by the API. A pagination request
                  will return an offset token, which can be used as an input parameter
                  to the next request. If an offset is not passed in, the API will
                  return the first page of results.

                  'Note: You can only pass in an offset that was returned to you via a
                  previously paginated request.'
              in: query
              name: offset
              type: string
              x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        get:
            produces:
                - application/json
            parameters: []
            responses:
                "200":
                    description: Successfully retrieved the requested workspace's memberships.
                    schema:
                        properties:
                            data:
                                items:
                                    $ref: "#/definitions/WorkspaceMembershipCompact"
                                type: array
                        type: object
            tags:
                - Workspace memberships
            description: Returns the compact workspace membership records for the workspace.
            operationId: getWorkspaceMembershipsForWorkspace
            summary: Get the workspace memberships for a workspace
definitions:
    AddCustomFieldSettingRequest:
        properties:
            custom_field:
                description: The custom field to associate with this container.
                example: "14916"
                type: string
            insert_after:
                description: >-
                    A gid of a Custom Field Setting on this container, after which the new
                    Custom Field Setting will be added.  `insert_before` and
                    `insert_after` parameters cannot both be specified.
                example: "1331"
                type: string
            insert_before:
                description: >-
                    A gid of a Custom Field Setting on this container, before which the
                    new Custom Field Setting will be added.  `insert_before` and
                    `insert_after` parameters cannot both be specified.
                example: "1331"
                type: string
            is_important:
                description: >-
                    Whether this field should be considered important to this container
                    (for instance, to display in the list view of items in the container).
                example: true
                type: boolean
        required:
            - custom_field
        type: object
    AddFollowersRequest:
        properties:
            followers:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example: "521621,621373"
                type: string
        required:
            - followers
        type: object
    AddMembersRequest:
        properties:
            members:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example: "521621,621373"
                type: string
        required:
            - members
        type: object
    AsanaNamedResource:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  name:
                      description: The name of the object.
                      example: Bug Task
                      type: string
              type: object
    AsanaResource:
        description: "A generic Asana Resource, containing a globally unique identifier."
        properties:
            gid:
                description: "Globally unique identifier of the resource, as a string."
                example: "12345"
                readOnly: true
                type: string
                x-insert-after: false
            resource_type:
                description: The base type of this resource.
                example: task
                readOnly: true
                type: string
                x-insert-after: gid
        type: object
    AttachmentBase:
        $ref: "#/definitions/AttachmentCompact"
    AttachmentCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  An *attachment* object represents any file attached to a task in
                  Asana, whether it’s an uploaded file or one associated via a
                  third-party service such as Dropbox or Google Drive.
              properties:
                  name:
                      description: The name of the file.
                      example: Screenshot.png
                      readOnly: true
                      type: string
                  resource_subtype:
                      description: >-
                          The service hosting the attachment. Valid values are `asana`,
                          `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
                      example: dropbox
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: attachment
    AttachmentRequest:
        properties:
            connect_to_app:
                description: >
                    *Optional*. Only relevant for external attachments with a parent task.
                    A boolean indicating whether the current app should be connected with
                    the attachment for the purposes of showing an app components widget.
                    Requires the app to have been added to a project the parent task is
                    in.
                type: boolean
            file:
                description: |
                    Required for `asana` attachments.
                format: binary
                type: string
            name:
                description: >
                    The name of the external resource being attached. Required for
                    attachments of type `external`.
                type: string
            parent:
                description: >
                    Required identifier of the parent task, project, or project_brief, as
                    a string.
                type: string
            resource_subtype:
                description: >
                    The type of the attachment. Must be one of the given values. If not
                    specified, a file attachment of type `asana` will be assumed. Note
                    that if the value of `resource_subtype` is `external`, a `parent`,
                    `name`, and `url` must also be provided.
                enum:
                    - asana
                    - dropbox
                    - gdrive
                    - onedrive
                    - box
                    - vimeo
                    - external
                example: external
                type: string
            url:
                description: >
                    The URL of the external resource being attached. Required for
                    attachments of type `external`.
                type: string
        type: object
    AttachmentResponse:
        allOf:
            - $ref: "#/definitions/AttachmentBase"
            - properties:
                  host:
                      description: >-
                          The service hosting the attachment. Valid values are `asana`,
                          `dropbox`, `gdrive`, `box`, and `vimeo`.
                      example: dropbox
                      readOnly: true
                      type: string
                  connected_to_app:
                      description: >-
                          Whether the attachment is connected to the app making the request
                          for the purposes of showing an app components widget. Only present
                          when the `resource_subtype` is `external` or `gdrive`.
                      readOnly: true
                      type: boolean
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  download_url:
                      description: >-
                          The URL containing the content of the attachment.

                          *Note:* May be null if the attachment is hosted by
                          [Box](https://www.box.com/) and will be null if the attachment is
                          a Video Message hosted by [Vimeo](https://vimeo.com/). If present,
                          this URL may only be valid for two minutes from the time of
                          retrieval. You should avoid persisting this URL somewhere and just
                          refresh it on demand to ensure you do not keep stale URLs.
                      example: "https://s3.amazonaws.com/assets/123/Screenshot.png"
                      format: uri
                      readOnly: true
                      type: string
                      x-nullable: true
                  parent:
                      allOf:
                          - $ref: "#/definitions/TaskCompact"
                          - description: The task this attachment is attached to.
                            properties:
                                resource_subtype:
                                    description: >-
                                        The resource subtype of the parent resource that the
                                        filter applies to.
                                    example: default_task
                                    type: string
                                    x-nullable: true
                            readOnly: true
                            type: object
                  permanent_url:
                      description: ""
                      example: "https://s3.amazonaws.com/assets/123/Screenshot.png"
                      format: uri
                      readOnly: true
                      type: string
                      x-nullable: true
                  size:
                      description: >-
                          The size of the attachment in bytes. Only present when the
                          `resource_subtype` is `asana`.
                      example: 12345
                      readOnly: true
                      type: integer
                  view_url:
                      description: >-
                          The URL where the attachment can be viewed, which may be
                          friendlier to users in a browser than just directing them to a raw
                          file. May be null if no view URL exists for the service.
                      example: "https://www.dropbox.com/s/123/Screenshot.png"
                      format: uri
                      readOnly: true
                      type: string
                      x-nullable: true
              type: object
    AuditLogEvent:
        description: >-
            An object representing a single event within an Asana domain.


            Every audit log event is comprised of an `event_type`, `actor`,
            `resource`, and `context`. Some events will include additional metadata
            about the event under `details`. See our [currently supported list of
            events](/docs/supported-auditlogevents) for more details.
        properties:
            actor:
                allOf:
                    - $ref: "#/definitions/AuditLogEventActor"
            context:
                allOf:
                    - $ref: "#/definitions/AuditLogEventContext"
            created_at:
                description: The time the event was created.
                example: "2021-01-01T00:00:00.000Z"
                format: date-time
                type: string
            details:
                allOf:
                    - $ref: "#/definitions/AuditLogEventDetails"
            event_category:
                description: The category that this `event_type` belongs to.
                example: deletion
                type: string
            event_type:
                description: The type of the event.
                example: task_deleted
                type: string
            gid:
                description: "Globally unique identifier of the `AuditLogEvent`, as a string."
                example: "12345"
                type: string
                x-insert-after: false
            resource:
                allOf:
                    - $ref: "#/definitions/AuditLogEventResource"
        type: object
    AuditLogEventActor:
        description: The entity that triggered the event. Will typically be a user.
        properties:
            actor_type:
                description: >-
                    The type of actor.

                    Can be one of `user`, `asana`, `asana_support`, `anonymous`, or
                    `external_administrator`.
                enum:
                    - user
                    - asana
                    - asana_support
                    - anonymous
                    - external_administrator
                example: user
                type: string
            email:
                description: "The email of the actor, if it is a user."
                example: gregsanchez@example.com
                type: string
            gid:
                description: "Globally unique identifier of the actor, if it is a user."
                example: "1111"
                type: string
            name:
                description: "The name of the actor, if it is a user."
                example: Greg Sanchez
                type: string
        type: object
    AuditLogEventContext:
        description: The context from which this event originated.
        properties:
            api_authentication_method:
                description: >-
                    The authentication method used in the context of an API request.

                    Only present if the `context_type` is `api`. Can be one of `cookie`,
                    `oauth`, `personal_access_token`, or `service_account`.
                enum:
                    - cookie
                    - oauth
                    - personal_access_token
                    - service_account
                type: string
            client_ip_address:
                description: "The IP address of the client that initiated the event, if applicable."
                example: 1.1.1.1
                type: string
            context_type:
                description: >-
                    The type of context.

                    Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`,
                    `email`, or `api`.
                enum:
                    - web
                    - desktop
                    - mobile
                    - asana_support
                    - asana
                    - email
                    - api
                example: web
                type: string
            oauth_app_name:
                description: |-
                    The name of the OAuth App that initiated the event.
                    Only present if the `api_authentication_method` is `oauth`.
                type: string
            user_agent:
                description: "The user agent of the client that initiated the event, if applicable."
                example: >-
                    Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)
                    Chrome/51.0.2704.103 Safari/537.36
                type: string
        type: object
    AuditLogEventDetails:
        description: >-
            Event specific details. The schema will vary depending on the
            `event_type`.
        type: object
    AuditLogEventResource:
        description: The primary object that was affected by this event.
        properties:
            email:
                description: "The email of the resource, if applicable."
                type: string
            gid:
                description: Globally unique identifier of the resource.
                example: "1111"
                type: string
            name:
                description: The name of the resource.
                example: Example Task
                type: string
            resource_subtype:
                description: The subtype of resource. Most resources will not have a subtype.
                example: milestone
                type: string
            resource_type:
                description: The type of resource.
                example: task
                type: string
        type: object
    BatchRequest:
        description: A request object for use in a batch request.
        properties:
            actions:
                items:
                    $ref: "#/definitions/BatchRequestAction"
                type: array
        type: object
    BatchRequestAction:
        description: An action object for use in a batch request.
        properties:
            data:
                description: >-
                    For `GET` requests, this should be a map of query parameters you would
                    have normally passed in the URL. Options and pagination are not
                    accepted here; put them in `options` instead. For `POST`, `PATCH`, and
                    `PUT` methods, this should be the content you would have normally put
                    in the data field of the body.
                example:
                    assignee: me
                    workspace: "1337"
                type: object
            method:
                description: The HTTP method you wish to emulate for the action.
                enum:
                    - get
                    - post
                    - put
                    - delete
                    - patch
                    - head
                example: get
                type: string
            options:
                description: >-
                    Pagination (`limit` and `offset`) and output options (`fields` or
                    `expand`) for the action. “Pretty” JSON output is not an available
                    option on individual actions; if you want pretty output, specify that
                    option on the parent request.
                example:
                    fields:
                        - name
                        - notes
                        - completed
                    limit: 3
                properties:
                    fields:
                        description: The fields to retrieve in the request.
                        example:
                            - name
                            - gid
                            - notes
                            - completed
                        items:
                            type: string
                        type: array
                    limit:
                        description: Pagination limit for the request.
                        example: 50
                        type: integer
                    offset:
                        description: Pagination offset for the request.
                        example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                        type: integer
                type: object
            relative_path:
                description: >-
                    The path of the desired endpoint relative to the API’s base URL. Query
                    parameters are not accepted here; put them in `data` instead.
                example: /tasks/123
                type: string
        required:
            - relative_path
            - method
        type: object
    BatchResponse:
        description: A response object returned from a batch request.
        properties:
            body:
                description: The JSON body that the invoked endpoint returned.
                example:
                    data:
                        completed: false
                        gid: "1967"
                        name: "Hello, world!"
                        notes: How are you today?
                type: object
            headers:
                description: >-
                    A map of HTTP headers specific to this result. This is primarily used
                    for returning a `Location` header to accompany a `201 Created`
                    result.  The parent HTTP response will contain all common headers.
                example:
                    location: /tasks/1234
                type: object
            status_code:
                description: The HTTP status code that the invoked endpoint returned.
                example: 200
                type: integer
        type: object
    CustomFieldBase:
        allOf:
            - $ref: "#/definitions/CustomFieldCompact"
            - properties:
                  asana_created_field:
                      description: >-
                          *Conditional*. A unique identifier to associate this field with
                          the template source of truth.
                      enum:
                          - a_v_requirements
                          - account_name
                          - actionable
                          - align_shipping_link
                          - align_status
                          - allotted_time
                          - appointment
                          - approval_stage
                          - approved
                          - article_series
                          - board_committee
                          - browser
                          - campaign_audience
                          - campaign_project_status
                          - campaign_regions
                          - channel_primary
                          - client_topic_type
                          - complete_by
                          - contact
                          - contact_email_address
                          - content_channels
                          - content_channels_needed
                          - content_stage
                          - content_type
                          - contract
                          - contract_status
                          - cost
                          - creation_stage
                          - creative_channel
                          - creative_needed
                          - creative_needs
                          - data_sensitivity
                          - deal_size
                          - delivery_appt
                          - delivery_appt_date
                          - department
                          - department_responsible
                          - design_request_needed
                          - design_request_type
                          - discussion_category
                          - do_this_task
                          - editorial_content_status
                          - editorial_content_tag
                          - editorial_content_type
                          - effort
                          - effort_level
                          - est_completion_date
                          - estimated_time
                          - estimated_value
                          - expected_cost
                          - external_steps_needed
                          - favorite_idea
                          - feedback_type
                          - financial
                          - funding_amount
                          - grant_application_process
                          - hiring_candidate_status
                          - idea_status
                          - ids_link
                          - ids_patient_link
                          - implementation_stage
                          - insurance
                          - interview_area
                          - interview_question_score
                          - itero_scan_link
                          - job_s_applied_to
                          - lab
                          - launch_status
                          - lead_status
                          - localization_language
                          - localization_market_team
                          - localization_status
                          - meeting_minutes
                          - meeting_needed
                          - minutes
                          - mrr
                          - must_localize
                          - name_of_foundation
                          - need_to_follow_up
                          - next_appointment
                          - next_steps_sales
                          - num_people
                          - number_of_user_reports
                          - office_location
                          - onboarding_activity
                          - owner
                          - participants_needed
                          - patient_date_of_birth
                          - patient_email
                          - patient_phone
                          - patient_status
                          - phone_number
                          - planning_category
                          - point_of_contact
                          - position
                          - post_format
                          - prescription
                          - priority
                          - priority_level
                          - product
                          - product_stage
                          - progress
                          - project_size
                          - project_status
                          - proposed_budget
                          - publish_status
                          - reason_for_scan
                          - referral
                          - request_type
                          - research_status
                          - responsible_department
                          - responsible_team
                          - risk_assessment_status
                          - room_name
                          - sales_counterpart
                          - sentiment
                          - shipping_link
                          - social_channels
                          - stage
                          - status
                          - status_design
                          - status_of_initiative
                          - system_setup
                          - task_progress
                          - team
                          - team_marketing
                          - team_responsible
                          - time_it_takes_to_complete_tasks
                          - timeframe
                          - treatment_type
                          - type_work_requests_it
                          - use_agency
                          - user_name
                          - vendor_category
                          - vendor_type
                          - word_count
                      example: priority
                      readOnly: true
                      type: string
                      x-nullable: true
                  currency_code:
                      description: >-
                          ISO 4217 currency code to format this custom field. This will be
                          null if the `format` is not `currency`.
                      example: EUR
                      type: string
                      x-nullable: true
                  custom_label:
                      description: >-
                          This is the string that appears next to the custom field value.
                          This will be null if the `format` is not `custom`.
                      example: gold pieces
                      type: string
                      x-nullable: true
                  custom_label_position:
                      description: >-
                          Only relevant for custom fields with `custom` format. This depicts
                          where to place the custom label. This will be null if the `format`
                          is not `custom`.
                      enum:
                          - prefix
                          - suffix
                      example: suffix
                      type: string
                  description:
                      description: >-
                          [Opt In](/docs/input-output-options). The description of the
                          custom field.
                      example: Development team priority
                      type: string
                  enum_options:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type `enum`.
                          This array specifies the possible values which an `enum` custom
                          field can adopt. To modify the enum options, refer to [working
                          with enum options](/docs/create-an-enum-option).
                      items:
                          $ref: "#/definitions/EnumOption"
                      type: array
                  format:
                      description: The format of this custom field.
                      enum:
                          - currency
                          - identifier
                          - percentage
                          - custom
                          - none
                      example: custom
                      type: string
                  has_notifications_enabled:
                      description: >-
                          *Conditional*. This flag describes whether a follower of a task
                          with this field should receive inbox notifications from changes to
                          this field.
                      example: true
                      type: boolean
                  is_global_to_workspace:
                      description: >-
                          This flag describes whether this custom field is available to
                          every container in the workspace. Before project-specific custom
                          fields, this field was always true.
                      example: true
                      readOnly: true
                      type: boolean
                  precision:
                      description: >-
                          Only relevant for custom fields of type ‘Number’. This field
                          dictates the number of places after the decimal to round to, i.e.
                          0 is integer values, 1 rounds to the nearest tenth, and so on.
                          Must be between 0 and 6, inclusive.

                          For percentage format, this may be unintuitive, as a value of 0.25
                          has a precision of 0, while a value of 0.251 has a precision of 1.
                          This is due to 0.25 being displayed as 25%.

                          The identifier format will always have a precision of 0.
                      example: 2
                      type: integer
              type: object
    CustomFieldCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  Custom Fields store the metadata that is used in order to add
                  user-specified information to tasks in Asana. Be sure to reference the
                  [Custom Fields](/docs/asana-custom-fields) developer documentation for
                  more information about how custom fields relate to various resources
                  in Asana.


                  Users in Asana can [lock custom
                  fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields),
                  which will make them read-only when accessed by other users.
                  Attempting to edit a locked custom field will return HTTP error code
                  `403 Forbidden`.
              properties:
                  date_value:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type `date`.
                          This object reflects the chosen date (and optionally, time) value
                          of a `date` custom field. If no date is selected, the value of
                          `date_value` will be `null`.
                      properties:
                          date:
                              description: A string representing the date in YYYY-MM-DD format.
                              example: "2024-08-23"
                              type: string
                          date_time:
                              description: >-
                                  A string representing the date in ISO 8601 format. If no time
                                  value is selected, the value of `date-time` will be `null`.
                              example: "2024-08-23T22:00:00.000Z"
                              type: string
                      type: object
                  display_value:
                      description: >-
                          A string representation for the value of the custom field.
                          Integrations that don't require the underlying type should use
                          this field to read values. Using this field will future-proof an
                          app against new custom field types.
                      example: blue
                      readOnly: true
                      type: string
                      x-nullable: true
                  enabled:
                      description: "*Conditional*. Determines if the custom field is enabled or not."
                      example: true
                      type: boolean
                  enum_options:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type `enum`.
                          This array specifies the possible values which an `enum` custom
                          field can adopt. To modify the enum options, refer to [working
                          with enum options](/docs/create-an-enum-option).
                      items:
                          $ref: "#/definitions/EnumOption"
                      type: array
                  enum_value:
                      allOf:
                          - $ref: "#/definitions/EnumOption"
                          - description: >-
                                *Conditional*. Only relevant for custom fields of type `enum`.
                                This object is the chosen value of an `enum` custom field.
                            type: object
                  multi_enum_values:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type
                          `multi_enum`. This object is the chosen values of a `multi_enum`
                          custom field.
                      items:
                          $ref: "#/definitions/EnumOption"
                      type: array
                  name:
                      description: The name of the custom field.
                      example: Status
                      type: string
                  number_value:
                      description: >-
                          *Conditional*. This number is the value of a `number` custom
                          field.
                      example: 5.2
                      type: number
                  resource_subtype:
                      description: |
                          The type of the custom field. Must be one of the given values.
                      enum:
                          - text
                          - enum
                          - multi_enum
                          - number
                          - date
                          - people
                      example: text
                      type: string
                  text_value:
                      description: "*Conditional*. This string is the value of a `text` custom field."
                      example: Some Value
                      type: string
                  type:
                      description: >
                          *Deprecated: new integrations should prefer the resource_subtype
                          field.* The type of the custom field. Must be one of the given
                          values.
                      enum:
                          - text
                          - enum
                          - multi_enum
                          - number
                      readOnly: true
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: custom_field
    CustomFieldRequest:
        allOf:
            - $ref: "#/definitions/CustomFieldBase"
            - properties:
                  people_value:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type `people`.
                          This array of user GIDs reflects the users to be written to a
                          `people` custom field. Note that *write* operations will replace
                          existing users (if any) in the custom field with the users
                          specified in this array.
                      example:
                          - "12345"
                      items:
                          description: The GID of a user.
                          type: string
                      type: array
                  workspace:
                      description: "*Create-Only* The workspace to create a custom field in."
                      example: "1331"
                      type: string
              required:
                  - workspace
              type: object
    CustomFieldResponse:
        allOf:
            - $ref: "#/definitions/CustomFieldBase"
            - properties:
                  created_by:
                      $ref: "#/definitions/UserCompact"
                      x-nullable: true
                  people_value:
                      description: >-
                          *Conditional*. Only relevant for custom fields of type `people`.
                          This array of [compact user](/docs/user-compact) objects reflects
                          the values of a `people` custom field.
                      items:
                          $ref: "#/definitions/UserCompact"
                      type: array
              type: object
    CustomFieldSettingBase:
        $ref: "#/definitions/CustomFieldSettingCompact"
    CustomFieldSettingCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  Custom Fields Settings objects represent the many-to-many join of the
                  Custom Field and Project as well as stores information that is
                  relevant to that particular pairing.
              type: object
              x-docs-overrides:
                  properties.resource_type.example: custom_field_setting
    CustomFieldSettingResponse:
        allOf:
            - $ref: "#/definitions/CustomFieldSettingBase"
            - properties:
                  custom_field:
                      allOf:
                          - $ref: "#/definitions/CustomFieldResponse"
                          - description: The custom field that is applied to the `parent`.
                            readOnly: true
                            type: object
                  is_important:
                      description: >-
                          `is_important` is used in the Asana web application to determine
                          if this custom field is displayed in the list/grid view of a
                          project or portfolio.
                      example: false
                      readOnly: true
                      type: boolean
                  parent:
                      allOf:
                          - $ref: "#/definitions/ProjectCompact"
                          - description: >-
                                The parent to which the custom field is applied. This can be a
                                project or portfolio and indicates that the tasks or projects
                                that the parent contains may be given custom field values for
                                this custom field.
                            readOnly: true
                            type: object
                  project:
                      allOf:
                          - $ref: "#/definitions/ProjectCompact"
                          - description: >-
                                *Deprecated: new integrations should prefer the `parent`
                                field.* The id of the project that this custom field settings
                                refers to.
                            readOnly: true
                            type: object
              type: object
    DateVariableCompact:
        properties:
            description:
                description: >-
                    The description of what the date variable is used for when
                    instantiating a project.
                example: Choose a start date for your project.
                readOnly: true
                type: string
            gid:
                description: >-
                    Globally unique identifier of the date field in the project template.
                    A value of `1` refers to the project start date, while `2` refers to
                    the project due date.
                example: "1"
                readOnly: true
                type: string
            name:
                description: The name of the date variable.
                example: Start Date
                readOnly: true
                type: string
        type: object
    DateVariableRequest:
        properties:
            gid:
                description: >-
                    Globally unique identifier of the date field in the project template.
                    A value of `1` refers to the project start date, while `2` refers to
                    the project due date.
                example: "1"
                type: string
            value:
                description: >-
                    The date with which the date variable should be replaced when
                    instantiating a project. This takes a date with `YYYY-MM-DD` format.
                example: "2022-01-01"
                format: date-time
                type: string
                x-nullable: true
        type: object
    EmptyResponse:
        description: >-
            An empty object. Some endpoints do not return an object on success. The
            success is conveyed through a 2-- status code and returning an empty
            object.
        type: object
    EnumOption:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  Enum options are the possible values which an enum custom field can
                  adopt. An enum custom field must contain at least 1 enum option but no
                  more than 500.


                  You can add enum options to a custom field by using the `POST
                  /custom_fields/custom_field_gid/enum_options` endpoint.


                  **It is not possible to remove or delete an enum option**. Instead,
                  enum options can be disabled by updating the `enabled` field to false
                  with the `PUT /enum_options/enum_option_gid` endpoint. Other
                  attributes can be updated similarly.


                  On creation of an enum option, `enabled` is always set to `true`,
                  meaning the enum option is a selectable value for the custom field.
                  Setting `enabled=false` is equivalent to “trashing” the enum option in
                  the Asana web app within the “Edit Fields” dialog. The enum option
                  will no longer be selectable but, if the enum option value was
                  previously set within a task, the task will retain the value.


                  Enum options are an ordered list and by default new enum options are
                  inserted at the end. Ordering in relation to existing enum options can
                  be specified on creation by using `insert_before` or `insert_after` to
                  reference an existing enum option. Only one of `insert_before` and
                  `insert_after` can be provided when creating a new enum option.


                  An enum options list can be reordered with the `POST
                  /custom_fields/custom_field_gid/enum_options/insert` endpoint.
              properties:
                  color:
                      description: The color of the enum option. Defaults to ‘none’.
                      example: blue
                      type: string
                  enabled:
                      description: >-
                          Whether or not the enum option is a selectable value for the
                          custom field.
                      example: true
                      type: boolean
                  name:
                      description: The name of the enum option.
                      example: Low
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: enum_option
    EnumOptionBase:
        $ref: "#/definitions/EnumOption"
    EnumOptionInsertRequest:
        properties:
            after_enum_option:
                description: >-
                    An existing enum option within this custom field after which the new
                    enum option should be inserted. Cannot be provided together with
                    before_enum_option.
                example: "12345"
                type: string
            before_enum_option:
                description: >-
                    An existing enum option within this custom field before which the new
                    enum option should be inserted. Cannot be provided together with
                    after_enum_option.
                example: "12345"
                type: string
            enum_option:
                description: The gid of the enum option to relocate.
                example: "97285"
                type: string
        required:
            - enum_option
        type: object
    EnumOptionRequest:
        allOf:
            - $ref: "#/definitions/EnumOptionBase"
            - properties:
                  insert_after:
                      description: >-
                          An existing enum option within this custom field after which the
                          new enum option should be inserted. Cannot be provided together
                          with before_enum_option.
                      example: "12345"
                      type: string
                  insert_before:
                      description: >-
                          An existing enum option within this custom field before which the
                          new enum option should be inserted. Cannot be provided together
                          with after_enum_option.
                      example: "12345"
                      type: string
              type: object
    Error:
        properties:
            help:
                description: >-
                    Additional information directing developers to resources on how to
                    address and fix the problem, if available.
                example: >-
                    For more information on API status codes and how to handle them, read
                    the docs on errors: https://asana.github.io/developer-docs/#errors'
                readOnly: true
                type: string
            message:
                description: >-
                    Message providing more detail about the error that occurred, if
                    available.
                example: "project: Missing input"
                readOnly: true
                type: string
            phrase:
                description: >-
                    *500 errors only*. A unique error phrase which can be used when
                    contacting developer support to help identify the exact occurrence of
                    the problem in Asana’s logs.
                example: 6 sad squid snuggle softly
                readOnly: true
                type: string
        type: object
    ErrorResponse:
        description: |-
            Sadly, sometimes requests to the API are not successful. Failures can
            occur for a wide range of reasons. In all cases, the API should return
            an HTTP Status Code that indicates the nature of the failure,
            with a response body in JSON format containing additional information.


            In the event of a server error the response body will contain an error
            phrase. These phrases are automatically generated using the
            [node-asana-phrase
            library](https://github.com/Asana/node-asana-phrase) and can be used by
            Asana support to quickly look up the incident that caused the server
            error.
        properties:
            errors:
                items:
                    $ref: "#/definitions/Error"
                type: array
        type: object
    EventResponse:
        description: |-
            An *event* is an object representing a change to a resource that was
            observed by an event subscription or delivered asynchronously to
            the target location of an active webhook.

            The event may be triggered by a different `user` than the
            subscriber. For example, if user A subscribes to a task and user B
            modified it, the event’s user will be user B. Note: Some events
            are generated by the system, and will have `null` as the user. API
            consumers should make sure to handle this case.

            The `resource` that triggered the event may be different from the one
            that the events were requested for or the webhook is subscribed to. For
            example, a subscription to a project will contain events for tasks
            contained within the project.

            **Note:** pay close attention to the relationship between the fields
            `Event.action` and `Event.change.action`.
            `Event.action` represents the action taken on the resource
            itself, and `Event.change.action` represents how the information
            within the resource's fields have been modified.

            For instance, consider these scenarios:


            * When at task is added to a project, `Event.action` will be
            `added`, `Event.parent` will be an object with the `id` and
            `type` of the project, and there will be no `change` field.


            * When an assignee is set on the task, `Event.parent` will be
            `null`, `Event.action` will be `changed`,
            `Event.change.action` will be `changed`, and `new_value` will
            be an object with the user's `id` and `type`.


            * When a collaborator is added to the task, `Event.parent` will
            be `null`, `Event.action` will be `changed`,
            `Event.change.action` will be `added`, and `added_value` will be
            an object with the user's `id` and `type`.
        properties:
            action:
                description: >-
                    The type of action taken on the **resource** that triggered the
                    event.  This can be one of `changed`, `added`, `removed`, `deleted`,
                    or `undeleted` depending on the nature of the event.
                example: changed
                readOnly: true
                type: string
            change:
                description: >-
                    Information about the type of change that has occurred. This field is
                    only present when the value of the property `action`, describing the
                    action taken on the **resource**, is `changed`.
                properties:
                    action:
                        description: >-
                            The type of action taken on the **field** which has been changed. 
                            This can be one of `changed`, `added`, or `removed` depending on
                            the nature of the change.
                        example: changed
                        readOnly: true
                        type: string
                    added_value:
                        description: >-
                            *Conditional.* This property is only present when the **field's**
                            `action` is `added` _and_ the `added_value` is an Asana resource.
                            This will be only the `gid` and `resource_type` of the resource
                            when the events come from webhooks; this will be the compact
                            representation (and can have fields expanded with
                            [opt_fields](/docs/input-output-options)) when using the
                            [Events](/docs/asana-events) endpoint.
                        example:
                            gid: "12345"
                            resource_type: user
                    field:
                        description: The name of the field that has changed in the resource.
                        example: assignee
                        readOnly: true
                        type: string
                    new_value:
                        description: >-
                            *Conditional.* This property is only present when the **field's**
                            `action` is `changed` _and_ the `new_value` is an Asana resource.
                            This will be only the `gid` and `resource_type` of the resource
                            when the events come from webhooks; this will be the compact
                            representation (and can have fields expanded with
                            [opt_fields](/docs/input-output-options)) when using the
                            [Events](/docs/asana-events) endpoint.
                        example:
                            gid: "12345"
                            resource_type: user
                    removed_value:
                        description: >-
                            *Conditional.* This property is only present when the **field's**
                            `action` is `removed` _and_ the `removed_value` is an Asana
                            resource. This will be only the `gid` and `resource_type` of the
                            resource when the events come from webhooks; this will be the
                            compact representation (and can have fields expanded with
                            [opt_fields](/docs/input-output-options)) when using the
                            [Events](/docs/asana-events) endpoint.
                        example:
                            gid: "12345"
                            resource_type: user
                readOnly: true
                type: object
            created_at:
                description: The timestamp when the event occurred.
                example: "2012-02-22T02:06:58.147Z"
                format: date-time
                readOnly: true
                type: string
            parent:
                allOf:
                    - $ref: "#/definitions/AsanaNamedResource"
                    - description: >-
                          For added/removed events, the parent object that resource was
                          added to or removed from. The parent will be `null` for other
                          event types.
            resource:
                allOf:
                    - $ref: "#/definitions/AsanaNamedResource"
                    - description: >-
                          The resource which has triggered the event by being modified in
                          some way.
            type:
                description: >-
                    *Deprecated: Refer to the resource_type of the resource.* The type of
                    the resource that generated the event.
                example: task
                readOnly: true
                type: string
            user:
                allOf:
                    - $ref: "#/definitions/UserCompact"
                    - description: The user who triggered the event.
        type: object
    GoalAddSubgoalRequest:
        properties:
            insert_after:
                description: >-
                    An id of a subgoal of this parent goal. The new subgoal will be added
                    after the one specified here. `insert_before` and `insert_after`
                    parameters cannot both be specified.
                example: "1331"
                type: string
            insert_before:
                description: >-
                    An id of a subgoal of this parent goal. The new subgoal will be added
                    before the one specified here. `insert_before` and `insert_after`
                    parameters cannot both be specified.
                example: "1331"
                type: string
            subgoal:
                description: The goal gid to add as subgoal to a parent goal
                example: "1331"
                type: string
        required:
            - subgoal
        type: object
    GoalAddSupportingRelationshipRequest:
        properties:
            contribution_weight:
                description: >-
                    The weight that the supporting resource's progress will contribute to
                    the supported goal's progress. This can only be 0 or 1.
                example: 1
                type: number
            insert_after:
                description: >-
                    An id of a subgoal of this parent goal. The new subgoal will be added
                    after the one specified here. `insert_before` and `insert_after`
                    parameters cannot both be specified. Currently only supported when
                    adding a subgoal.
                example: "1331"
                type: string
            insert_before:
                description: >-
                    An id of a subgoal of this parent goal. The new subgoal will be added
                    before the one specified here. `insert_before` and `insert_after`
                    parameters cannot both be specified. Currently only supported when
                    adding a subgoal.
                example: "1331"
                type: string
            supporting_resource:
                description: >-
                    The gid of the supporting resource to add to the parent goal. Must be
                    the gid of a goal, project, or portfolio.
                example: "12345"
                type: string
        required:
            - supporting_resource
        type: object
    GoalAddSupportingWorkRequest:
        properties:
            supporting_work:
                description: The project/portfolio gid to add as supporting work for a goal
                example: "1331"
                type: string
        required:
            - supporting_work
        type: object
    GoalBase:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  due_on:
                      description: >-
                          The localized day on which this goal is due. This takes a date
                          with format `YYYY-MM-DD`.
                      example: "2019-09-15"
                      type: string
                      x-nullable: true
                  html_notes:
                      description: The notes of the goal with formatting as HTML.
                      example: <body>Start building brand awareness.</body>
                      type: string
                  is_workspace_level:
                      description: >-
                          *Conditional*. This property is only present when the `workspace`
                          provided is an organization. Whether the goal belongs to the
                          `workspace` (and is listed as part of the workspace’s goals) or
                          not. If it isn’t a workspace-level goal, it is a team-level goal,
                          and is associated with the goal’s team.
                      example: true
                      type: boolean
                  liked:
                      description: "True if the goal is liked by the authorized user, false if not."
                      example: false
                      type: boolean
                  name:
                      description: The name of the goal.
                      example: Grow web traffic by 30%
                      type: string
                  notes:
                      description: >-
                          Free-form textual information associated with the goal (i.e. its
                          description).
                      example: Start building brand awareness.
                      type: string
                  start_on:
                      description: >-
                          The day on which work for this goal begins, or null if the goal
                          has no start date. This takes a date with `YYYY-MM-DD` format, and
                          cannot be set unless there is an accompanying due date.
                      example: "2019-09-14"
                      type: string
                      x-nullable: true
                  status:
                      description: >-
                          The current status of this goal. When the goal is open, its status
                          can be `green`, `yellow`, and `red` to reflect "On Track", "At
                          Risk", and "Off Track", respectively. When the goal is closed, the
                          value can be `missed`, `achieved`, `partial`, or `dropped`.

                          *Note* you can only write to this property if `metric` is set.
                      example: green
                      type: string
                      x-nullable: true
              type: object
              x-docs-overrides:
                  properties.resource_type.example: goal
    GoalCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  name:
                      description: The name of the goal.
                      example: Grow web traffic by 30%
                      type: string
                  owner:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                          - type: object
                            x-nullable: true
              type: object
              x-docs-overrides:
                  properties.resource_type.example: goal
    GoalMembershipBase:
        $ref: "#/definitions/GoalMembershipCompact"
    GoalMembershipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: This object represents a user's connection to a goal.
              properties:
                  is_commenter:
                      description: Describes if the user is comment only in goal.
                      example: false
                      type: boolean
                  is_editor:
                      description: Describes if the user is editor in goal.
                      example: false
                      type: boolean
                  member:
                      $ref: "#/definitions/UserCompact"
              type: object
              x-docs-overrides:
                  properties.resource_type.example: goal_membership
    GoalMembershipResponse:
        $ref: "#/definitions/GoalMembershipBase"
    GoalMetricBase:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  currency_code:
                      description: >-
                          ISO 4217 currency code to format this custom field. This will be
                          null if the `unit` is not `currency`.
                      example: EUR
                      type: string
                      x-nullable: true
                  current_display_value:
                      description: This string is the current value of a goal metric of type string.
                      example: "8.12"
                      readOnly: true
                      type: string
                  current_number_value:
                      description: This number is the current value of a goal metric of type number.
                      example: 8.12
                      type: number
                  initial_number_value:
                      description: This number is the start value of a goal metric of type number.
                      example: 5.2
                      type: number
                  precision:
                      description: >-
                          *Conditional*. Only relevant for goal metrics of type ‘Number’.
                          This field dictates the number of places after the decimal to
                          round to, i.e. 0 is integer values, 1 rounds to the nearest tenth,
                          and so on. Must be between 0 and 6, inclusive.

                          For percentage format, this may be unintuitive, as a value of 0.25
                          has a precision of 0, while a value of 0.251 has a precision of 1.
                          This is due to 0.25 being displayed as 25%.
                      example: 2
                      type: integer
                  progress_source:
                      description: >-
                          This field defines how the progress value of a goal metric is
                          being calculated. A goal's progress can be provided manually by
                          the user, calculated automatically from contributing subgoals or
                          projects, or managed by an integration with an external data
                          source, such as Salesforce.
                      enum:
                          - manual
                          - subgoal_progress
                          - project_task_completion
                          - project_milestone_completion
                          - external
                      example: manual
                      type: string
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.
                      enum:
                          - number
                      example: number
                      readOnly: true
                      type: string
                  target_number_value:
                      description: >-
                          This number is the end value of a goal metric of type number. This
                          number cannot equal `initial_number_value`.
                      example: 10.2
                      type: number
                  unit:
                      description: "A supported unit of measure for the goal metric, or none."
                      enum:
                          - none
                          - currency
                          - percentage
                      type: string
              type: object
    GoalMetricCurrentValueRequest:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  current_number_value:
                      description: >-
                          *Conditional*. This number is the current value of a goal metric
                          of type number.
                      example: 8.12
                      type: number
              type: object
    GoalMetricRequest:
        $ref: "#/definitions/GoalMetricBase"
    GoalRelationshipBase:
        allOf:
            - $ref: "#/definitions/GoalRelationshipCompact"
            - properties:
                  supported_goal:
                      allOf:
                          - $ref: "#/definitions/GoalCompact"
                          - description: The goal that the supporting resource supports.
                            readOnly: true
                            type: object
              type: object
    GoalRelationshipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *goal relationship* is an object representing the relationship
                  between a goal and another goal, a project, or a portfolio.
              properties:
                  contribution_weight:
                      description: >-
                          The weight that the supporting resource's progress contributes to
                          the supported goal's progress. This can only be 0 or 1.
                      example: 1
                      type: number
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.
                      enum:
                          - subgoal
                          - supporting_work
                      example: subgoal
                      readOnly: true
                      type: string
                  supporting_resource:
                      allOf:
                          - $ref: "#/definitions/ProjectCompact"
                          - description: >-
                                The supporting resource that supports the goal. This can be
                                either a project, portfolio, or goal.
                            readOnly: true
                            type: object
              type: object
              x-docs-overrides:
                  properties.resource_type.example: goal_relationship
    GoalRelationshipRequest:
        allOf:
            - $ref: "#/definitions/GoalRelationshipBase"
            - type: object
    GoalRelationshipResponse:
        allOf:
            - $ref: "#/definitions/GoalRelationshipBase"
            - type: object
    GoalRemoveSubgoalRequest:
        properties:
            subgoal:
                description: The goal gid to remove as subgoal from the parent goal
                example: "1331"
                type: string
        required:
            - subgoal
        type: object
    GoalRemoveSupportingRelationshipRequest:
        properties:
            supporting_resource:
                description: >-
                    The gid of the supporting resource to remove from the parent goal.
                    Must be the gid of a goal, project, or portfolio.
                example: "12345"
                type: string
        required:
            - supporting_resource
        type: object
    GoalRequest:
        allOf:
            - $ref: "#/definitions/GoalBase"
            - properties:
                  followers:
                      example:
                          - "12345"
                      items:
                          description: The `gid` of a user.
                          type: string
                      type: array
                  owner:
                      description: The `gid` of a user.
                      example: "12345"
                      type: string
                      x-nullable: true
                  team:
                      description: >-
                          *Conditional*. This property is only present when the `workspace`
                          provided is an organization.
                      example: "12345"
                      type: string
                      x-nullable: true
                  time_period:
                      description: The `gid` of a time period.
                      example: "12345"
                      type: string
                      x-nullable: true
                  workspace:
                      description: The `gid` of a workspace.
                      example: "12345"
                      type: string
              type: object
    GoalResponse:
        allOf:
            - $ref: "#/definitions/GoalBase"
            - properties:
                  current_status_update:
                      allOf:
                          - $ref: "#/definitions/StatusUpdateCompact"
                      description: The latest `status_update` posted to this goal.
                      x-nullable: true
                  followers:
                      description: Array of users who are members of this goal.
                      items:
                          $ref: "#/definitions/UserCompact"
                      type: array
                  likes:
                      description: Array of likes for users who have liked this goal.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  metric:
                      allOf:
                          - $ref: "#/definitions/GoalMetricBase"
                          - properties:
                                can_manage:
                                    description: >-
                                        *Conditional*. Only relevant for `progress_source` of type
                                        `external`. This boolean indicates whether the requester
                                        has the ability to update the current value of this
                                        metric. This returns `true` if the external metric was
                                        created by the requester, `false` otherwise.
                                    example: true
                                    readOnly: true
                                    type: boolean
                            type: object
                            x-nullable: true
                  num_likes:
                      description: The number of users who have liked this goal.
                      example: 5
                      readOnly: true
                      type: integer
                  owner:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                          - type: object
                            x-nullable: true
                  team:
                      allOf:
                          - $ref: "#/definitions/TeamCompact"
                          - type: object
                            x-nullable: true
                      description: >-
                          *Conditional*. This property is only present when the `workspace`
                          provided is an organization.
                  time_period:
                      allOf:
                          - $ref: "#/definitions/TimePeriodCompact"
                          - type: object
                            x-nullable: true
                  workspace:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                          - type: object
              type: object
    JobBase:
        $ref: "#/definitions/JobCompact"
    JobCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *job* is an object representing a process that handles asynchronous
                  work.
              properties:
                  new_project:
                      $ref: "#/definitions/ProjectCompact"
                  new_project_template:
                      $ref: "#/definitions/ProjectTemplateCompact"
                  new_task:
                      $ref: "#/definitions/TaskCompact"
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.
                      example: duplicate_task
                      readOnly: true
                      type: string
                  status:
                      description: >-
                          The current status of this job. The value is one of:
                          `not_started`, `in_progress`, `succeeded`, or `failed`.
                      enum:
                          - not_started
                          - in_progress
                          - succeeded
                          - failed
                      example: in_progress
                      readOnly: true
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: job
    JobResponse:
        $ref: "#/definitions/JobBase"
    Like:
        description: An object to represent a user's like.
        properties:
            gid:
                description: "Globally unique identifier of the object, as a string."
                example: "12345"
                readOnly: true
                type: string
            user:
                $ref: "#/definitions/UserCompact"
        type: object
    ModifyDependenciesRequest:
        example:
            dependencies:
                - "133713"
                - "184253"
        properties:
            dependencies:
                description: An array of task gids that a task depends on.
                items:
                    type: string
                type: array
        type: object
    ModifyDependentsRequest:
        description: A set of dependent tasks.
        example:
            dependents:
                - "133713"
                - "184253"
        properties:
            dependents:
                description: An array of task gids that are dependents of the given task.
                items:
                    type: string
                type: array
        type: object
    OrganizationExportBase:
        $ref: "#/definitions/OrganizationExportCompact"
    OrganizationExportCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  An *organization_export* object represents a request to export the
                  complete data of an Organization in JSON format.
              properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  download_url:
                      description: |-
                          Download this URL to retreive the full export of the organization
                          in JSON format. It will be compressed in a gzip (.gz) container.

                          *Note: May be null if the export is still in progress or
                          failed.  If present, this URL may only be valid for 1 hour from
                          the time of retrieval. You should avoid persisting this URL
                          somewhere and rather refresh on demand to ensure you do not keep
                          stale URLs.*
                      example: >-
                          https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx
                      format: uri
                      readOnly: true
                      type: string
                      x-nullable: true
                  organization:
                      $ref: "#/definitions/WorkspaceCompact"
                  state:
                      description: The current state of the export.
                      enum:
                          - pending
                          - started
                          - finished
                          - error
                      example: started
                      readOnly: true
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: organization_export
    OrganizationExportRequest:
        description: >-
            An *organization_export* request starts a job to export the complete data
            of the given Organization.
        properties:
            organization:
                description: Globally unique identifier for the workspace or organization.
                example: "1331"
                type: string
        type: object
    OrganizationExportResponse:
        $ref: "#/definitions/OrganizationExportBase"
    PortfolioAddItemRequest:
        properties:
            insert_after:
                description: >-
                    An id of an item in this portfolio. The new item will be added after
                    the one specified here. `insert_before` and `insert_after` parameters
                    cannot both be specified.
                example: "1331"
                type: string
            insert_before:
                description: >-
                    An id of an item in this portfolio. The new item will be added before
                    the one specified here. `insert_before` and `insert_after` parameters
                    cannot both be specified.
                example: "1331"
                type: string
            item:
                description: The item to add to the portfolio.
                example: "1331"
                type: string
        required:
            - item
        type: object
    PortfolioBase:
        allOf:
            - $ref: "#/definitions/PortfolioCompact"
            - properties:
                  color:
                      description: Color of the portfolio.
                      enum:
                          - dark-pink
                          - dark-green
                          - dark-blue
                          - dark-red
                          - dark-teal
                          - dark-brown
                          - dark-orange
                          - dark-purple
                          - dark-warm-gray
                          - light-pink
                          - light-green
                          - light-blue
                          - light-red
                          - light-teal
                          - light-brown
                          - light-orange
                          - light-purple
                          - light-warm-gray
                      example: light-green
                      type: string
              type: object
    PortfolioCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *portfolio* gives a high-level overview of the status of multiple
                  initiatives in Asana. Portfolios provide a dashboard overview of the
                  state of multiple projects, including a progress report and the most
                  recent [project status](/docs/asana-project-statuses) update.

                  Portfolios have some restrictions on size. Each portfolio has a max of
                  500 items and, like projects, a max of 20 custom fields.
              properties:
                  name:
                      description: The name of the portfolio.
                      example: Bug Portfolio
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: portfolio
    PortfolioMembershipBase:
        $ref: "#/definitions/PortfolioMembershipCompact"
    PortfolioMembershipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: This object determines if a user is a member of a portfolio.
              properties:
                  portfolio:
                      $ref: "#/definitions/PortfolioCompact"
                      description: >-
                          [Opt In](/docs/input-output-options). The portfolio the user is a
                          member of.
                  user:
                      $ref: "#/definitions/UserCompact"
              type: object
              x-docs-overrides:
                  properties.resource_type.example: portfolio_membership
    PortfolioMembershipResponse:
        $ref: "#/definitions/PortfolioMembershipBase"
    PortfolioRemoveItemRequest:
        properties:
            item:
                description: The item to remove from the portfolio.
                example: "1331"
                type: string
        required:
            - item
        type: object
    PortfolioRequest:
        allOf:
            - $ref: "#/definitions/PortfolioBase"
            - properties:
                  members:
                      description: >-
                          An array of strings identifying users. These can either be the
                          string "me", an email, or the gid of a user.
                      example:
                          - "52164"
                          - "15363"
                      items:
                          description: Gid of an object.
                          type: string
                      readOnly: true
                      type: array
                  public:
                      description: True if the portfolio is public to its workspace members.
                      example: false
                      type: boolean
                  workspace:
                      description: Gid of an object.
                      example: "167589"
                      type: string
              type: object
    PortfolioResponse:
        allOf:
            - $ref: "#/definitions/PortfolioBase"
            - properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  created_by:
                      $ref: "#/definitions/UserCompact"
                  current_status_update:
                      allOf:
                          - $ref: "#/definitions/StatusUpdateCompact"
                      description: The latest `status_update` posted to this portfolio.
                      x-nullable: true
                  custom_field_settings:
                      description: Array of custom field settings applied to the portfolio.
                      items:
                          $ref: "#/definitions/CustomFieldSettingResponse"
                      type: array
                  custom_fields:
                      description: Array of Custom Fields.
                      items:
                          $ref: "#/definitions/CustomFieldCompact"
                      type: array
                  due_on:
                      description: >-
                          The localized day on which this portfolio is due. This takes a
                          date with format YYYY-MM-DD.
                      example: "2019-09-15"
                      format: date-time
                      type: string
                      x-nullable: true
                  members:
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  owner:
                      $ref: "#/definitions/UserCompact"
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/resource/123456789/list"
                      readOnly: true
                      type: string
                  public:
                      description: True if the portfolio is public to its workspace members.
                      example: false
                      type: boolean
                  start_on:
                      description: >-
                          The day on which work for this portfolio begins, or null if the
                          portfolio has no start date. This takes a date with `YYYY-MM-DD`
                          format. *Note: `due_on` must be present in the request when
                          setting or unsetting the `start_on` parameter. Additionally,
                          `start_on` and `due_on` cannot be the same date.*
                      example: "2019-09-14"
                      format: date
                      type: string
                      x-nullable: true
                  workspace:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                          - description: >-
                                *Create-only*. The workspace or organization that the
                                portfolio belongs to.
                            type: object
              type: object
    Preview:
        description: >-
            A collection of rich text that will be displayed as a preview to another
            app.


            This is read-only except for a small group of whitelisted apps.
        properties:
            fallback:
                description: Some fallback text to display if unable to display the full preview.
                example: >-
                    Greg: Great! I like this
                    idea.\n\nhttps//a_company.slack.com/archives/ABCDEFG/12345678
                type: string
            footer:
                description: Text to display in the footer.
                example: "Mar 17, 2019 1:25 PM"
                type: string
            header:
                description: Text to display in the header.
                example: Asana for Slack
                type: string
            header_link:
                description: Where the header will link to.
                example: "https://asana.comn/apps/slack"
                type: string
            html_text:
                description: HTML formatted text for the body of the preview.
                example: <body>Great! I like this idea.</body>
                type: string
            text:
                description: Text for the body of the preview.
                example: Great! I like this idea.
                type: string
            title:
                description: Text to display as the title.
                example: Greg
                type: string
            title_link:
                description: Where to title will link to.
                example: "https://asana.slack.com/archives/ABCDEFG/12345678"
                type: string
        readOnly: true
        type: object
    ProjectBase:
        allOf:
            - $ref: "#/definitions/ProjectCompact"
            - properties:
                  archived:
                      description: >-
                          True if the project is archived, false if not. Archived projects
                          do not show in the UI by default and may be treated differently
                          for queries.
                      example: false
                      type: boolean
                  color:
                      description: Color of the project.
                      enum:
                          - dark-pink
                          - dark-green
                          - dark-blue
                          - dark-red
                          - dark-teal
                          - dark-brown
                          - dark-orange
                          - dark-purple
                          - dark-warm-gray
                          - light-pink
                          - light-green
                          - light-blue
                          - light-red
                          - light-teal
                          - light-brown
                          - light-orange
                          - light-purple
                          - light-warm-gray
                      example: light-green
                      type: string
                      x-nullable: true
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  current_status:
                      allOf:
                          - $ref: "#/definitions/ProjectStatusResponse"
                      description: >-
                          *Deprecated: new integrations should prefer the
                          `current_status_update` resource.*
                      x-nullable: true
                  current_status_update:
                      allOf:
                          - $ref: "#/definitions/StatusUpdateCompact"
                      description: The latest `status_update` posted to this project.
                      x-nullable: true
                  custom_field_settings:
                      description: Array of Custom Field Settings (in compact form).
                      items:
                          $ref: "#/definitions/CustomFieldSettingResponse"
                      readOnly: true
                      type: array
                  default_view:
                      description: >-
                          The default view (list, board, calendar, or timeline) of a
                          project.
                      enum:
                          - list
                          - board
                          - calendar
                          - timeline
                      example: calendar
                      type: string
                  due_date:
                      description: "*Deprecated: new integrations should prefer the `due_on` field.*"
                      example: "2019-09-15"
                      format: date-time
                      type: string
                      x-nullable: true
                  due_on:
                      description: >-
                          The day on which this project is due. This takes a date with
                          format YYYY-MM-DD.
                      example: "2019-09-15"
                      format: date-time
                      type: string
                      x-nullable: true
                  html_notes:
                      description: >-
                          [Opt In](/docs/input-output-options). The notes of the project
                          with formatting as HTML.
                      example: <body>These are things we need to purchase.</body>
                      type: string
                  is_template:
                      description: >-
                          [Opt In](/docs/input-output-options). *Deprecated - please use a
                          project template endpoint instead (more in [this forum
                          post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).*
                          Determines if the project is a template.
                      example: false
                      type: boolean
                  members:
                      description: Array of users who are members of this project.
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  modified_at:
                      description: >-
                          The time at which this project was last modified.

                          *Note: This does not currently reflect any changes in associations
                          such as tasks or comments that may have been added or removed from
                          the project.*
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  notes:
                      description: >-
                          Free-form textual information associated with the project (ie.,
                          its description).
                      example: These are things we need to purchase.
                      type: string
                  public:
                      description: True if the project is public to its team.
                      example: false
                      type: boolean
                  start_on:
                      description: >-
                          The day on which work for this project begins, or null if the
                          project has no start date. This takes a date with `YYYY-MM-DD`
                          format. *Note: `due_on` or `due_at` must be present in the request
                          when setting or unsetting the `start_on` parameter. Additionally,
                          `start_on` and `due_on` cannot be the same date.*
                      example: "2019-09-14"
                      format: date
                      type: string
                      x-nullable: true
                  workspace:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                          - description: >-
                                *Create-only*. The workspace or organization this project is
                                associated with. Once created, projects cannot be moved to a
                                different workspace. This attribute can only be specified at
                                creation time.
                            readOnly: true
                            type: object
              type: object
    ProjectBriefBase:
        allOf:
            - $ref: "#/definitions/ProjectBriefCompact"
            - properties:
                  html_text:
                      description: HTML formatted text for the project brief.
                      example: <body>This is a <strong>project brief</strong>.</body>
                      type: string
                  title:
                      description: The title of the project brief.
                      example: Stuff to buy — Project Brief
                      type: string
              type: object
    ProjectBriefCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *Project Brief* allows you to explain the what and why of the
                  project to your team.
              type: object
              x-docs-overrides:
                  properties.resource_type.example: project_brief
    ProjectBriefRequest:
        allOf:
            - $ref: "#/definitions/ProjectBriefBase"
            - properties:
                  text:
                      description: >-
                          The plain text of the project brief. When writing to a project
                          brief, you can specify either `html_text` (preferred) or `text`,
                          but not both.
                      example: This is a project brief.
                      type: string
              type: object
    ProjectBriefResponse:
        allOf:
            - $ref: "#/definitions/ProjectBriefBase"
            - properties:
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/11111111/22222222"
                      readOnly: true
                      type: string
                  project:
                      allOf:
                          - $ref: "#/definitions/ProjectCompact"
                          - description: The project with which this project brief is associated.
                            type: object
                  text:
                      description: >-
                          [Opt In](/docs/input-output-options). The plain text of the
                          project brief.
                      example: This is a project brief.
                      type: string
              type: object
    ProjectCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *project* represents a prioritized list of tasks in Asana or a board
                  with columns of tasks represented as cards. It exists in a single
                  workspace or organization and is accessible to a subset of users in
                  that workspace or organization, depending on its permissions.
              properties:
                  name:
                      description: >-
                          Name of the project. This is generally a short sentence fragment
                          that fits on a line in the UI for maximum readability. However, it
                          can be longer.
                      example: Stuff to buy
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: project
    ProjectDuplicateRequest:
        properties:
            include:
                description: >-
                    The elements that will be duplicated to the new project. Tasks are
                    always included.
                enum:
                    - members
                    - notes
                    - forms
                    - task_notes
                    - task_assignee
                    - task_subtasks
                    - task_attachments
                    - task_dates
                    - task_dependencies
                    - task_followers
                    - task_tags
                    - task_projects
                example:
                    - members
                    - task_notes
                type: string
            name:
                description: The name of the new project.
                example: New Project Name
                type: string
            schedule_dates:
                description: >-
                    A dictionary of options to auto-shift dates. `task_dates` must be
                    included to use this option. Requires either `start_on` or `due_on`,
                    but not both.
                properties:
                    due_on:
                        description: >-
                            Sets the last due date in the duplicated project to the given
                            date. The rest of the due dates will be offset by the same amount
                            as the due dates in the original project.
                        example: "2019-05-21"
                        type: string
                    should_skip_weekends:
                        description: Determines if the auto-shifted dates should skip weekends.
                        example: true
                        type: boolean
                    start_on:
                        description: >-
                            Sets the first start date in the duplicated project to the given
                            date. The rest of the start dates will be offset by the same
                            amount as the start dates in the original project.
                        example: "2019-05-21"
                        type: string
                required:
                    - should_skip_weekends
                type: object
            team:
                description: >-
                    Sets the team of the new project. If team is not defined, the new
                    project will be in the same team as the the original project.
                example: "12345"
                type: string
        required:
            - name
        type: object
    ProjectMembershipBase:
        $ref: "#/definitions/ProjectMembershipCompact"
    ProjectMembershipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  With the introduction of “comment-only” projects in Asana, a user’s
                  membership in a project comes with associated permissions. These
                  permissions (whether a user has full access to the project or
                  comment-only access) are accessible through the project memberships
                  endpoints described here.
              properties:
                  user:
                      $ref: "#/definitions/UserCompact"
              type: object
              x-docs-overrides:
                  properties.resource_type.example: project_membership
    ProjectMembershipResponse:
        allOf:
            - $ref: "#/definitions/ProjectMembershipBase"
            - properties:
                  project:
                      $ref: "#/definitions/ProjectCompact"
                      description: >-
                          [Opt In](/docs/input-output-options). The project the user is a
                          member of.
                  write_access:
                      description: >-
                          Whether the user has full access to the project or has
                          comment-only access.
                      enum:
                          - full_write
                          - comment_only
                      example: full_write
                      readOnly: true
                      type: string
              type: object
    ProjectRequest:
        allOf:
            - $ref: "#/definitions/ProjectBase"
            - properties:
                  custom_fields:
                      additionalProperties:
                          description: '"{custom_field_gid}" => Value (Can be text, number, etc.)'
                          type: string
                      description: >-
                          An object where each key is a Custom Field GID and each value is
                          an enum GID, string, number, or object.
                      example:
                          "4578152156": Not Started
                          "5678904321": On Hold
                      type: object
                  followers:
                      description: >-
                          *Create-only*. Comma separated string of users. Followers are a
                          subset of members who have opted in to receive "tasks added"
                          notifications for a project.
                      example: "12345,23456"
                      type: string
                  owner:
                      description: "The current owner of the project, may be null."
                      example: "12345"
                      type: string
                      x-nullable: true
                  team:
                      description: The team that this project is shared with.
                      example: "12345"
                      type: string
              type: object
    ProjectResponse:
        allOf:
            - $ref: "#/definitions/ProjectBase"
            - properties:
                  completed:
                      description: "True if the project is currently marked complete, false if not."
                      example: false
                      readOnly: true
                      type: boolean
                  completed_at:
                      description: >-
                          The time at which this project was completed, or null if the
                          project is not completed.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                      x-nullable: true
                  completed_by:
                      $ref: "#/definitions/UserCompact"
                      description: >-
                          The user that marked this project complete, or null if the project
                          is not completed.
                      readOnly: true
                      x-nullable: true
                  created_from_template:
                      allOf:
                          - $ref: "#/definitions/ProjectTemplateCompact"
                          - description: >-
                                [Opt In](/docs/input-output-options). The project template
                                from which this project was created. If the project was not
                                created from a template, this field will be null.
                            type: object
                            x-nullable: true
                  custom_fields:
                      description: Array of Custom Fields.
                      items:
                          $ref: "#/definitions/CustomFieldCompact"
                      readOnly: true
                      type: array
                  followers:
                      description: >-
                          Array of users following this project. Followers are a subset of
                          members who have opted in to receive "tasks added" notifications
                          for a project.
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  icon:
                      description: The icon for a project.
                      enum:
                          - list
                          - board
                          - timeline
                          - calendar
                          - rocket
                          - people
                          - graph
                          - star
                          - bug
                          - light_bulb
                          - globe
                          - gear
                          - notebook
                          - computer
                          - check
                          - target
                          - html
                          - megaphone
                          - chat_bubbles
                          - briefcase
                          - page_layout
                          - mountain_flag
                          - puzzle
                          - presentation
                          - line_and_symbols
                          - speed_dial
                          - ribbon
                          - shoe
                          - shopping_basket
                          - map
                          - ticket
                          - coins
                      example: chat_bubbles
                      type: string
                      x-nullable: true
                  owner:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                      description: "The current owner of the project, may be null."
                      x-nullable: true
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/resource/123456789/list"
                      readOnly: true
                      type: string
                  project_brief:
                      allOf:
                          - $ref: "#/definitions/ProjectBriefCompact"
                          - description: >-
                                [Opt In](/docs/input-output-options). The project brief
                                associated with this project.
                            type: object
                            x-nullable: true
                  team:
                      allOf:
                          - $ref: "#/definitions/TeamCompact"
                          - description: The team that this project is shared with.
                            type: object
              type: object
    ProjectSaveAsTemplateRequest:
        properties:
            name:
                description: The name of the new project template.
                example: New Project Template
                type: string
            public:
                description: Sets the project template to public to its team.
                example: true
                type: boolean
            team:
                description: >-
                    Sets the team of the new project template. If the project exists in an
                    organization, specify team and not workspace.
                example: "12345"
                type: string
            workspace:
                description: >-
                    Sets the workspace of the new project template. Only specify workspace
                    if the project exists in a workspace.
                example: "12345"
                type: string
        required:
            - name
            - public
        type: object
    ProjectSectionInsertRequest:
        properties:
            after_section:
                description: >-
                    Insert the given section immediately after the section specified by
                    this parameter.
                example: "987654"
                type: string
            before_section:
                description: >-
                    Insert the given section immediately before the section specified by
                    this parameter.
                example: "86420"
                type: string
            project:
                description: The project in which to reorder the given section.
                example: "123456"
                type: string
            section:
                description: The section to reorder.
                example: "321654"
                type: string
        required:
            - project
            - section
        type: object
    ProjectStatusBase:
        allOf:
            - $ref: "#/definitions/ProjectStatusCompact"
            - properties:
                  color:
                      description: The color associated with the status update.
                      enum:
                          - green
                          - yellow
                          - red
                          - blue
                      type: string
                  html_text:
                      description: >-
                          [Opt In](/docs/input-output-options). The text content of the
                          status update with formatting as HTML.
                      example: >-
                          <body>The project <strong>is</strong> moving forward according to
                          plan...</body>
                      type: string
                  text:
                      description: The text content of the status update.
                      example: The project is moving forward according to plan...
                      type: string
              required:
                  - text
                  - color
              type: object
    ProjectStatusCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  *Deprecated: new integrations should prefer the `status_update`
                  resource.*

                  A *project status* is an update on the progress of a particular
                  project, and is sent out to all project followers when created. These
                  updates include both text describing the update and a color code
                  intended to represent the overall state of the project: "green" for
                  projects that are on track, "yellow" for projects at risk, and "red"
                  for projects that are behind.
              properties:
                  title:
                      description: The title of the project status update.
                      example: Status Update - Jun 15
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: project_status
    ProjectStatusRequest:
        $ref: "#/definitions/ProjectStatusBase"
    ProjectStatusResponse:
        allOf:
            - $ref: "#/definitions/ProjectStatusBase"
            - properties:
                  author:
                      $ref: "#/definitions/UserCompact"
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  created_by:
                      $ref: "#/definitions/UserCompact"
                  modified_at:
                      description: >-
                          The time at which this project status was last modified.

                          *Note: This does not currently reflect any changes in associations
                          such as comments that may have been added or removed from the
                          project status.*
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
              type: object
    ProjectTemplateBase:
        allOf:
            - $ref: "#/definitions/ProjectTemplateCompact"
            - properties:
                  color:
                      description: Color of the project template.
                      enum:
                          - dark-pink
                          - dark-green
                          - dark-blue
                          - dark-red
                          - dark-teal
                          - dark-brown
                          - dark-orange
                          - dark-purple
                          - dark-warm-gray
                          - light-pink
                          - light-green
                          - light-blue
                          - light-red
                          - light-teal
                          - light-brown
                          - light-orange
                          - light-purple
                          - light-warm-gray
                      example: light-green
                      type: string
                      x-nullable: true
                  description:
                      description: Free-form textual information associated with the project template
                      example: These are things we need to pack for a trip.
                      type: string
                  html_description:
                      description: The description of the project template with formatting as HTML.
                      example: <body>These are things we need to pack for a trip.</body>
                      type: string
                  owner:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                      description: "The current owner of the project template, may be null."
                      x-nullable: true
                  public:
                      description: True if the project template is public to its team.
                      example: false
                      type: boolean
                  requested_dates:
                      description: >-
                          Array of date variables in this project template. Calendar dates
                          must be provided for these variables when instantiating a project.
                      items:
                          $ref: "#/definitions/DateVariableCompact"
                      readOnly: true
                      type: array
                  team:
                      allOf:
                          - $ref: "#/definitions/TeamCompact"
              type: object
    ProjectTemplateCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *project template* is an object that allows new projects to be
                  created with a predefined setup, which may include tasks, sections,
                  Rules, etc. It simplifies the process of running a workflow that
                  involves a similar set of work every time.
              properties:
                  name:
                      description: Name of the project template.
                      example: Packing list
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: project_template
    ProjectTemplateInstantiateProjectRequest:
        properties:
            is_strict:
                description: >-
                    *Optional*. If set to `true`, the endpoint returns an "Unprocessable
                    Entity" error if you fail to provide a calendar date value for any
                    date variable. If set to `false`, a default date is used for each
                    unfulfilled date variable (e.g., the current date is used as the Start
                    Date of a project).
                example: true
                type: boolean
            name:
                description: The name of the new project.
                example: New Project Name
                type: string
            public:
                description: Sets the project to public to its team.
                example: true
                type: boolean
            requested_dates:
                description: Array of mappings of date variables to calendar dates.
                items:
                    $ref: "#/definitions/DateVariableRequest"
                type: array
            team:
                description: >-
                    *Conditional*. Sets the team of the new project. If the project
                    template exists in an _organization_, you must specify a value for
                    `team` and not `workspace`.
                example: "12345"
                type: string
            workspace:
                description: >-
                    *Conditional*. Sets the workspace of the new project. If the project
                    template exists in a _workspace_, you must specify a value for
                    `workspace` and not `team`.
                example: "12345"
                type: string
        required:
            - name
            - public
        type: object
    ProjectTemplateResponse:
        allOf:
            - $ref: "#/definitions/ProjectTemplateBase"
    RemoveCustomFieldSettingRequest:
        properties:
            custom_field:
                description: The custom field to remove from this portfolio.
                example: "14916"
                type: string
        required:
            - custom_field
        type: object
    RemoveFollowersRequest:
        properties:
            followers:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example: "521621,621373"
                type: string
        required:
            - followers
        type: object
    RemoveMembersRequest:
        properties:
            members:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example: "521621,621373"
                type: string
        required:
            - members
        type: object
    SectionBase:
        $ref: "#/definitions/SectionCompact"
    SectionCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *section* is a subdivision of a project that groups tasks together.
                  It can either be a header above a list of tasks in a list view or a
                  column in a board view of a project.
              properties:
                  name:
                      description: >-
                          The name of the section (i.e. the text displayed as the section
                          header).
                      example: Next Actions
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: section
    SectionRequest:
        properties:
            insert_after:
                description: >-
                    An existing section within this project after which the added section
                    should be inserted. Cannot be provided together with insert_before.
                example: "987654"
                type: string
            insert_before:
                description: >-
                    An existing section within this project before which the added section
                    should be inserted. Cannot be provided together with insert_after.
                example: "86420"
                type: string
            name:
                description: >-
                    The text to be displayed as the section name. This cannot be an empty
                    string.
                example: Next Actions
                type: string
            project:
                description: The project to add the task to.
                example: "13579"
                type: string

        required:
            - project
            - name
        type: object
    SectionResponse:
        allOf:
            - $ref: "#/definitions/SectionBase"
            - properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  project:
                      $ref: "#/definitions/ProjectCompact"
                  projects:
                      description: "*Deprecated - please use project instead*"
                      items:
                          $ref: "#/definitions/ProjectCompact"
                      readOnly: true
                      type: array
              type: object
    SectionTaskInsertRequest:
        properties:
            insert_after:
                description: >-
                    An existing task within this section after which the added task should
                    be inserted. Cannot be provided together with insert_before.
                example: "987654"
                type: string
            insert_before:
                description: >-
                    An existing task within this section before which the added task
                    should be inserted. Cannot be provided together with insert_after.
                example: "86420"
                type: string
            task:
                description: The task to add to this section.
                example: "123456"
                type: string
        required:
            - task
        type: object
    StatusUpdateBase:
        allOf:
            - $ref: "#/definitions/StatusUpdateCompact"
            - properties:
                  html_text:
                      description: >-
                          [Opt In](/docs/input-output-options). The text content of the
                          status update with formatting as HTML.
                      example: >-
                          <body>The project <strong>is</strong> moving forward according to
                          plan...</body>
                      type: string
                  status_type:
                      description: >-
                          The type associated with the status update. This represents the
                          current state of the object this object is on.
                      enum:
                          - on_track
                          - at_risk
                          - off_track
                          - on_hold
                          - complete
                          - achieved
                          - partial
                          - missed
                          - dropped
                      type: string
                  text:
                      description: The text content of the status update.
                      example: The project is moving forward according to plan...
                      type: string
              required:
                  - text
                  - status_type
              type: object
    StatusUpdateCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *status update* is an update on the progress of a particular
                  project, portfolio, or goal, and is sent out to all of its parent's
                  followers when created. These updates include both text describing the
                  update and a `status_type` intended to represent the overall state of
                  the project.
              properties:
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.

                          The `resource_subtype`s for `status` objects represent the type of
                          their parent.
                      enum:
                          - project_status_update
                          - portfolio_status_update
                          - goal_status_update
                      example: project_status_update
                      readOnly: true
                      type: string
                  title:
                      description: The title of the status update.
                      example: Status Update - Jun 15
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: status_update
    StatusUpdateRequest:
        allOf:
            - $ref: "#/definitions/StatusUpdateBase"
            - properties:
                  parent:
                      allOf:
                          - description: >-
                                The id of parent to send this status update to. This can be a
                                project, goal or portfolio.
                            type: string
              required:
                  - parent
              type: object
    StatusUpdateResponse:
        allOf:
            - $ref: "#/definitions/StatusUpdateBase"
            - properties:
                  author:
                      $ref: "#/definitions/UserCompact"
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  created_by:
                      $ref: "#/definitions/UserCompact"
                  hearted:
                      description: >-
                          *Deprecated - please use liked instead* True if the status is
                          hearted by the authorized user, false if not.
                      example: true
                      readOnly: true
                      type: boolean
                  hearts:
                      description: >-
                          *Deprecated - please use likes instead* Array of likes for users
                          who have hearted this status.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  liked:
                      description: "True if the status is liked by the authorized user, false if not."
                      example: true
                      type: boolean
                  likes:
                      description: Array of likes for users who have liked this status.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  modified_at:
                      description: >-
                          The time at which this project status was last modified.

                          *Note: This does not currently reflect any changes in associations
                          such as comments that may have been added or removed from the
                          status.*
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  num_hearts:
                      description: >-
                          *Deprecated - please use likes instead* The number of users who
                          have hearted this status.
                      example: 5
                      readOnly: true
                      type: integer
                  num_likes:
                      description: The number of users who have liked this status.
                      example: 5
                      readOnly: true
                      type: integer
                  parent:
                      allOf:
                          - $ref: "#/definitions/ProjectCompact"
                          - description: >-
                                The parent of the status update. This can be a project, goal
                                or portfolio, and indicates that this status was sent on that
                                object.
                            type: object
              type: object
    StoryBase:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A story represents an activity associated with an object in the Asana
                  system.
              properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  html_text:
                      description: >-
                          [Opt In](/docs/input-output-options). HTML formatted text for a
                          comment. This will not include the name of the creator.
                      example: <body>This is a comment.</body>
                      type: string
                  is_pinned:
                      description: "*Conditional*. Whether the story should be pinned on the resource."
                      example: false
                      type: boolean
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.
                      example: comment_added
                      readOnly: true
                      type: string
                  sticker_name:
                      description: >-
                          The name of the sticker in this story. `null` if there is no
                          sticker.
                      enum:
                          - green_checkmark
                          - people_dancing
                          - dancing_unicorn
                          - heart
                          - party_popper
                          - people_waving_flags
                          - splashing_narwhal
                          - trophy
                          - yeti_riding_unicorn
                          - celebrating_people
                          - determined_climbers
                          - phoenix_spreading_love
                      example: dancing_unicorn
                      type: string
                  text:
                      description: >-
                          The plain text of the comment to add. Cannot be used with
                          html_text.
                      example: This is a comment.
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: story
    StoryCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A story represents an activity associated with an object in the Asana
                  system.
              properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  created_by:
                      $ref: "#/definitions/UserCompact"
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.
                      example: comment_added
                      readOnly: true
                      type: string
                  text:
                      description: >-
                          *Create-only*. Human-readable text for the story or comment.

                          This will not include the name of the creator.

                          *Note: This is not guaranteed to be stable for a given type of
                          story. For example, text for a reassignment may not always say
                          “assigned to …” as the text for a story can both be edited and
                          change based on the language settings of the user making the
                          request.*

                          Use the `resource_subtype` property to discover the action that
                          created the story.
                      example: marked today
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: story
    StoryRequest:
        $ref: "#/definitions/StoryBase"
    StoryResponse:
        allOf:
            - $ref: "#/definitions/StoryBase"
            - properties:
                  assignee:
                      $ref: "#/definitions/UserCompact"
                      description: "*Conditional*"
                      readOnly: true
                  created_by:
                      $ref: "#/definitions/UserCompact"
                  custom_field:
                      $ref: "#/definitions/CustomFieldCompact"
                      description: "*Conditional*"
                      readOnly: true
                  dependency:
                      $ref: "#/definitions/TaskCompact"
                      description: "*Conditional*"
                      readOnly: true
                  duplicate_of:
                      $ref: "#/definitions/TaskCompact"
                      description: "*Conditional*"
                      readOnly: true
                  duplicated_from:
                      $ref: "#/definitions/TaskCompact"
                      description: "*Conditional*"
                      readOnly: true
                  follower:
                      $ref: "#/definitions/UserCompact"
                      description: "*Conditional*"
                      readOnly: true
                  hearted:
                      description: >-
                          *Deprecated - please use likes instead*

                          *Conditional*. True if the story is hearted by the authorized
                          user, false if not.
                      example: false
                      readOnly: true
                      type: boolean
                  hearts:
                      description: >-
                          *Deprecated - please use likes instead*


                          *Conditional*. Array of likes for users who have hearted this
                          story.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  is_editable:
                      description: >-
                          *Conditional*. Whether the text of the story can be edited after
                          creation.
                      example: false
                      readOnly: true
                      type: boolean
                  is_edited:
                      description: >-
                          *Conditional*. Whether the text of the story has been edited after
                          creation.
                      example: false
                      readOnly: true
                      type: boolean
                  liked:
                      description: >-
                          *Conditional*. True if the story is liked by the authorized user,
                          false if not.
                      example: false
                      readOnly: true
                      type: boolean
                  likes:
                      description: "*Conditional*. Array of likes for users who have liked this story."
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  new_approval_status:
                      description: "*Conditional*. The new value of approval status."
                      example: approved
                      readOnly: true
                      type: string
                  new_date_value:
                      allOf:
                          - $ref: "#/definitions/StoryResponseDates"
                          - description: "*Conditional* The new value of a date custom field story."
                      readOnly: true
                  new_dates:
                      $ref: "#/definitions/StoryResponseDates"
                  new_enum_value:
                      $ref: "#/definitions/EnumOption"
                      description: "*Conditional*"
                      readOnly: true
                  new_multi_enum_values:
                      description: "*Conditional*. The new value of a multi-enum custom field story."
                      items:
                          $ref: "#/definitions/EnumOption"
                      readOnly: true
                      type: array
                  new_name:
                      description: "*Conditional*"
                      example: This is the New Name
                      readOnly: true
                      type: string
                  new_number_value:
                      description: "*Conditional*"
                      example: 2
                      readOnly: true
                      type: integer
                  new_people_value:
                      description: "*Conditional*. The new value of a people custom field story."
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  new_resource_subtype:
                      description: "*Conditional*"
                      example: milestone
                      readOnly: true
                      type: string
                  new_section:
                      $ref: "#/definitions/SectionCompact"
                      description: "*Conditional*"
                      readOnly: true
                  new_text_value:
                      description: "*Conditional*"
                      example: This is the New Text
                      readOnly: true
                      type: string
                  num_hearts:
                      description: |-
                          *Deprecated - please use likes instead*

                          *Conditional*. The number of users who have hearted this story.
                      example: 5
                      readOnly: true
                      type: integer
                  num_likes:
                      description: "*Conditional*. The number of users who have liked this story."
                      example: 5
                      readOnly: true
                      type: integer
                  old_approval_status:
                      description: "*Conditional*. The old value of approval status."
                      example: pending
                      readOnly: true
                      type: string
                  old_date_value:
                      allOf:
                          - $ref: "#/definitions/StoryResponseDates"
                          - description: "*Conditional*. The old value of a date custom field story."
                      readOnly: true
                  old_dates:
                      $ref: "#/definitions/StoryResponseDates"
                  old_enum_value:
                      $ref: "#/definitions/EnumOption"
                      description: "*Conditional*"
                      readOnly: true
                  old_multi_enum_values:
                      description: "*Conditional*. The old value of a multi-enum custom field story."
                      items:
                          $ref: "#/definitions/EnumOption"
                      readOnly: true
                      type: array
                  old_name:
                      description: "*Conditional*'"
                      example: This was the Old Name
                      type: string
                  old_number_value:
                      description: "*Conditional*"
                      example: 1
                      readOnly: true
                      type: integer
                  old_people_value:
                      description: "*Conditional*. The old value of a people custom field story."
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  old_resource_subtype:
                      description: "*Conditional*"
                      example: default_task
                      readOnly: true
                      type: string
                  old_section:
                      $ref: "#/definitions/SectionCompact"
                      description: "*Conditional*"
                      readOnly: true
                  old_text_value:
                      description: "*Conditional*"
                      example: This was the Old Text
                      readOnly: true
                      type: string
                  previews:
                      description: >-
                          *Conditional*. A collection of previews to be displayed in the
                          story.


                          *Note: This property only exists for comment stories.*
                      items:
                          $ref: "#/definitions/Preview"
                      readOnly: true
                      type: array
                  project:
                      $ref: "#/definitions/ProjectCompact"
                      description: "*Conditional*"
                      readOnly: true
                  source:
                      description: >-
                          The component of the Asana product the user used to trigger the
                          story.
                      enum:
                          - web
                          - email
                          - mobile
                          - api
                          - unknown
                      example: web
                      readOnly: true
                      type: string
                  story:
                      $ref: "#/definitions/StoryCompact"
                      description: "*Conditional*"
                      readOnly: true
                  tag:
                      $ref: "#/definitions/TagCompact"
                      description: "*Conditional*"
                      readOnly: true
                  target:
                      allOf:
                          - $ref: "#/definitions/TaskCompact"
                          - description: >-
                                The object this story is associated with. Currently may only
                                be a task.
                            readOnly: true
                            type: object
                  task:
                      $ref: "#/definitions/TaskCompact"
                      description: "*Conditional*"
                      readOnly: true
                  type:
                      enum:
                          - comment
                          - system
                      example: comment
                      readOnly: true
                      type: string
              type: object
    StoryResponseDates:
        description: "*Conditional*"
        properties:
            due_at:
                description: >-
                    The UTC date and time on which this task is due, or null if the task
                    has no due time. This takes an ISO 8601 date string in UTC and should
                    not be used together with `due_on`.
                example: "2019-09-15T02:06:58.158Z"
                format: date-time
                type: string
                x-nullable: true
            due_on:
                description: >-
                    The localized day on which this goal is due. This takes a date with
                    format `YYYY-MM-DD`.
                example: "2019-09-15"
                format: date
                type: string
            start_on:
                description: >-
                    The day on which work for this goal begins, or null if the goal has no
                    start date. This takes a date with `YYYY-MM-DD` format, and cannot be
                    set unless there is an accompanying due date.
                example: "2019-09-14"
                format: date
                type: string
                x-nullable: true
        readOnly: true
        type: object
    TagBase:
        allOf:
            - $ref: "#/definitions/TagCompact"
            - properties:
                  color:
                      description: Color of the tag.
                      enum:
                          - dark-pink
                          - dark-green
                          - dark-blue
                          - dark-red
                          - dark-teal
                          - dark-brown
                          - dark-orange
                          - dark-purple
                          - dark-warm-gray
                          - light-pink
                          - light-green
                          - light-blue
                          - light-red
                          - light-teal
                          - light-brown
                          - light-orange
                          - light-purple
                          - light-warm-gray
                      example: light-green
                      type: string
                      x-nullable: true
                  notes:
                      description: >-
                          Free-form textual information associated with the tag (i.e. its
                          description).
                      example: Mittens really likes the stuff from Humboldt.
                      type: string
              type: object
    TagCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *tag* is a label that can be attached to any task in Asana. It
                  exists in a single workspace or organization.
              properties:
                  name:
                      description: >-
                          Name of the tag. This is generally a short sentence fragment that
                          fits on a line in the UI for maximum readability. However, it can
                          be longer.
                      example: Stuff to buy
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: tag
    TagRequest:
        allOf:
            - $ref: "#/definitions/TagBase"
            - properties:
                  followers:
                      description: >-
                          An array of strings identifying users. These can either be the
                          string "me", an email, or the gid of a user.
                      example:
                          - "12345"
                          - "42563"
                      items:
                          type: string
                      type: array
                  workspace:
                      description: Gid of an object.
                      example: "12345"
                      type: string
                      x-env-variable: true
              type: object
    TagResponse:
        allOf:
            - $ref: "#/definitions/TagBase"
            - properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  followers:
                      description: Array of users following this tag.
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/resource/123456789/list"
                      readOnly: true
                      type: string
                  workspace:
                      $ref: "#/definitions/WorkspaceCompact"
              type: object
    TaskAddFollowersRequest:
        properties:
            followers:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example:
                    - "13579"
                    - "321654"
                items:
                    type: string
                type: array
        required:
            - followers
        type: object
    TaskAddProjectRequest:
        properties:
            insert_after:
                description: >-
                    A task in the project to insert the task after, or `null` to insert at
                    the beginning of the list.
                example: "124816"
                type: string
                x-nullable: true
            insert_before:
                description: >-
                    A task in the project to insert the task before, or `null` to insert
                    at the end of the list.
                example: "432134"
                type: string
                x-nullable: true
            project:
                description: The project to add the task to.
                example: "13579"
                type: string
            section:
                description: >-
                    A section in the project to insert the task into. The task will be
                    inserted at the bottom of the section.
                example: "987654"
                type: string
                x-nullable: true
        required:
            - project
        type: object
    TaskAddTagRequest:
        properties:
            tag:
                description: The tag to add to the task.
                example: "13579"
                type: string
        required:
            - tag
        type: object
    TaskBase:
        allOf:
            - $ref: "#/definitions/TaskCompact"
            - properties:
                  actual_time_minutes:
                      description: >-
                          This value represents the sum of all the Time Tracking entries in
                          the Actual Time field on a given Task. It is represented as a
                          nullable long value.
                      example: 200
                      readOnly: true
                      type: number
                      x-nullable: true
                  approval_status:
                      description: >-
                          *Conditional* Reflects the approval status of this task. This
                          field is kept in sync with `completed`, meaning `pending`
                          translates to false while `approved`, `rejected`, and
                          `changes_requested` translate to true. If you set completed to
                          true, this field will be set to `approved`.
                      enum:
                          - pending
                          - approved
                          - rejected
                          - changes_requested
                      example: pending
                      type: string
                  assignee_status:
                      description: >-
                          *Deprecated* Scheduling status of this task for the user it is
                          assigned to. This field can only be set if the assignee is
                          non-null. Setting this field to "inbox" or "upcoming" inserts it
                          at the top of the section, while the other options will insert at
                          the bottom.
                      enum:
                          - today
                          - upcoming
                          - later
                          - new
                          - inbox
                      example: upcoming
                      type: string
                  completed:
                      description: "True if the task is currently marked complete, false if not."
                      example: false
                      type: boolean
                  completed_at:
                      description: >-
                          The time at which this task was completed, or null if the task is
                          incomplete.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                      x-nullable: true
                  completed_by:
                      $ref: "#/definitions/UserCompact"
                      readOnly: true
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  dependencies:
                      description: >-
                          [Opt In](/docs/input-output-options). Array of resources
                          referencing tasks that this task depends on. The objects contain
                          only the gid of the dependency.
                      items:
                          $ref: "#/definitions/AsanaResource"
                      readOnly: true
                      type: array
                  dependents:
                      description: >-
                          [Opt In](/docs/input-output-options). Array of resources
                          referencing tasks that depend on this task. The objects contain
                          only the ID of the dependent.
                      items:
                          $ref: "#/definitions/AsanaResource"
                      readOnly: true
                      type: array
                  due_at:
                      description: >-
                          The UTC date and time on which this task is due, or null if the
                          task has no due time. This takes an ISO 8601 date string in UTC
                          and should not be used together with `due_on`.
                      example: "2019-09-15T02:06:58.147Z"
                      format: date
                      type: string
                      x-nullable: true
                  due_on:
                      description: >-
                          The localized date on which this task is due, or null if the task
                          has no due date. This takes a date with `YYYY-MM-DD` format and
                          should not be used together with `due_at`.
                      example: "2019-09-15"
                      format: date
                      type: string
                      x-nullable: true
                  external:
                      description: >-
                          *OAuth Required*. *Conditional*. This field is returned only if
                          external values are set or included by using [Opt In]
                          (/docs/input-output-options).

                          The external field allows you to store app-specific metadata on
                          tasks, including a gid that can be used to retrieve tasks and a
                          data blob that can store app-specific character strings. Note that
                          you will need to authenticate with Oauth to access or modify this
                          data. Once an external gid is set, you can use the notation
                          `external:custom_gid` to reference your object anywhere in the API
                          where you may use the original object gid. See the page on Custom
                          External Data for more details.
                      example:
                          data: A blob of information
                          gid: my_gid
                      properties:
                          data:
                              example: A blob of information.
                              type: string
                          gid:
                              example: "1234"
                              type: string
                      type: object
                  hearted:
                      description: >-
                          *Deprecated - please use liked instead* True if the task is
                          hearted by the authorized user, false if not.
                      example: true
                      readOnly: true
                      type: boolean
                  hearts:
                      description: >-
                          *Deprecated - please use likes instead* Array of likes for users
                          who have hearted this task.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  html_notes:
                      description: >-
                          [Opt In](/docs/input-output-options). The notes of the text with
                          formatting as HTML.
                      example: >-
                          <body>Mittens <em>really</em> likes the stuff from
                          Humboldt.</body>
                      type: string
                  is_rendered_as_separator:
                      description: >-
                          [Opt In](/docs/input-output-options). In some contexts tasks can
                          be rendered as a visual separator; for instance, subtasks can
                          appear similar to [sections](/docs/asana-sections) without being
                          true `section` objects. If a `task` object is rendered this way in
                          any context it will have the property `is_rendered_as_separator`
                          set to `true`.
                      example: false
                      readOnly: true
                      type: boolean
                  liked:
                      description: "True if the task is liked by the authorized user, false if not."
                      example: true
                      type: boolean
                  likes:
                      description: Array of likes for users who have liked this task.
                      items:
                          $ref: "#/definitions/Like"
                      readOnly: true
                      type: array
                  memberships:
                      description: >-
                          *Create-only*. Array of projects this task is associated with and
                          the section it is in. At task creation time, this array can be
                          used to add the task to specific sections. After task creation,
                          these associations can be modified using the `addProject` and
                          `removeProject` endpoints. Note that over time, more types of
                          memberships may be added to this property.
                      items:
                          properties:
                              project:
                                  $ref: "#/definitions/ProjectCompact"
                              section:
                                  $ref: "#/definitions/SectionCompact"
                          type: object
                      readOnly: true
                      type: array
                  modified_at:
                      description: |-
                          The time at which this task was last modified.

                          *Note: This does not currently reflect any changes in
                          associations such as projects or comments that may have been
                          added or removed from the task.*
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  name:
                      description: >-
                          Name of the task. This is generally a short sentence fragment that
                          fits on a line in the UI for maximum readability. However, it can
                          be longer.
                      example: Buy catnip
                      type: string
                  notes:
                      description: >-
                          Free-form textual information associated with the task (i.e. its
                          description).
                      example: Mittens really likes the stuff from Humboldt.
                      type: string
                  num_hearts:
                      description: >-
                          *Deprecated - please use likes instead* The number of users who
                          have hearted this task.
                      example: 5
                      readOnly: true
                      type: integer
                  num_likes:
                      description: The number of users who have liked this task.
                      example: 5
                      readOnly: true
                      type: integer
                  num_subtasks:
                      description: >
                          [Opt In](/docs/input-output-options). The number of subtasks on
                          this task.
                      example: 3
                      readOnly: true
                      type: integer
                  start_at:
                      description: >-
                          Date and time on which work begins for the task, or null if the
                          task has no start time. This takes an ISO 8601 date string in UTC
                          and should not be used together with `start_on`.

                          *Note: `due_at` must be present in the request when setting or
                          unsetting the `start_at` parameter.*
                      example: "2019-09-14T02:06:58.147Z"
                      format: date
                      type: string
                      x-nullable: true
                  start_on:
                      description: >-
                          The day on which work begins for the task , or null if the task
                          has no start date. This takes a date with `YYYY-MM-DD` format and
                          should not be used together with `start_at`.

                          *Note: `due_on` or `due_at` must be present in the request when
                          setting or unsetting the `start_on` parameter.*
                      example: "2019-09-14"
                      format: date
                      type: string
                      x-nullable: true
              type: object
    TaskCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  The *task* is the basic object around which many operations in Asana
                  are centered.
              properties:
                  name:
                      description: The name of the task.
                      example: Bug Task
                      type: string
                  resource_subtype:
                      description: >-
                          The subtype of this resource. Different subtypes retain many of
                          the same fields and behavior, but may render differently in Asana
                          or represent resources with different semantic meaning.

                          The resource_subtype `milestone` represent a single moment in
                          time. This means tasks with this subtype cannot have a start_date.
                      enum:
                          - default_task
                          - milestone
                          - section
                          - approval
                      example: default_task
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: task
    TaskCountResponse:
        description: A response object returned from the task count endpoint.
        properties:
            num_completed_milestones:
                description: The number of completed milestones in a project.
                example: 3
                type: integer
            num_completed_tasks:
                description: The number of completed tasks in a project.
                example: 150
                type: integer
            num_incomplete_milestones:
                description: The number of incomplete milestones in a project.
                example: 7
                type: integer
            num_incomplete_tasks:
                description: The number of incomplete tasks in a project.
                example: 50
                type: integer
            num_milestones:
                description: The number of milestones in a project.
                example: 10
                type: integer
            num_tasks:
                description: The number of tasks in a project.
                example: 200
                type: integer
        type: object
    TaskDuplicateRequest:
        properties:
            include:
                description: The fields that will be duplicated to the new task.
                enum:
                    - notes
                    - assignee
                    - subtasks
                    - attachments
                    - tags
                    - followers
                    - projects
                    - dates
                    - dependencies
                    - parent
                example:
                    - notes
                    - assignee
                type: string
            name:
                description: The name of the new task.
                example: New Task Name
                type: string
        type: object
    TaskRemoveFollowersRequest:
        properties:
            followers:
                description: >-
                    An array of strings identifying users. These can either be the string
                    "me", an email, or the gid of a user.
                example:
                    - "13579"
                    - "321654"
                items:
                    type: string
                type: array
        required:
            - followers
        type: object
    TaskRemoveProjectRequest:
        properties:
            project:
                description: The project to remove the task from.
                example: "13579"
                type: string
        required:
            - project
        type: object
    TaskRemoveTagRequest:
        properties:
            tag:
                description: The tag to remove from the task.
                example: "13579"
                type: string
        required:
            - tag
        type: object
    TaskRequest:
        allOf:
            - $ref: "#/definitions/TaskBase"
            - properties:
                  tags:
                      description: >-
                          *Create-Only* Array of tag gids. In order to change tags on an
                          existing task use `addTag` and `removeTag`.
                      example:
                          - "12345"
                      items:
                          description: Gid of a tag.
                          type: string
                      type: array
                  assignee:
                      description: Gid of a user.
                      example: "12345"
                      readOnly: false
                      type: string
                      x-env-variable: true
                      x-nullable: true
                  assignee_section:
                      description: >-
                          The *assignee section* is a subdivision of a project that groups
                          tasks together in the assignee's "My Tasks" list. It can either be
                          a header above a list of tasks in a list view or a column in a
                          board view of "My Tasks."

                          The `assignee_section` property will be returned in the response
                          only if the request was sent by the user who is the assignee of
                          the task. Note that you can only write to `assignee_section` with
                          the gid of an existing section visible in the user's "My Tasks"
                          list.
                      example: "12345"
                      type: string
                      x-nullable: true
                  custom_fields:
                      additionalProperties:
                          description: '"{custom_field_gid}" => Value (Can be text, number, etc.)'
                          type: string
                      description: >-
                          An object where each key is a Custom Field GID and each value is
                          an enum GID, string, number, object, or array.
                      example:
                          "4578152156": Not Started
                          "5678904321": On Hold
                      type: object
                  followers:
                      description: >-
                          *Create-Only* An array of strings identifying users. These can
                          either be the string "me", an email, or the gid of a user. In
                          order to change followers on an existing task use `addFollowers`
                          and `removeFollowers`.
                      example:
                          - "12345"
                      items:
                          description: Gid of a user.
                          type: string
                      type: array
                  parent:
                      description: Gid of a task.
                      example: "12345"
                      readOnly: false
                      type: string
                      x-env-variable: true
                      x-nullable: true
                  projects:
                      description: >-
                          *Create-Only* Array of project gids. In order to change projects
                          on an existing task use `addProject` and `removeProject`.
                      example:
                          - "12345"
                      items:
                          description: Gid of a project.
                          type: string
                      type: array
                  workspace:
                      description: Gid of a workspace.
                      example: "12345"
                      readOnly: false
                      type: string
                      x-env-variable: true
              type: object
    TaskResponse:
        allOf:
            - $ref: "#/definitions/TaskBase"
            - properties:
                  tags:
                      description: >-
                          Array of tags associated with this task. In order to change tags
                          on an existing task use `addTag` and `removeTag`.
                      example:
                          - gid: "59746"
                            name: Grade A
                      items:
                          $ref: "#/definitions/TagCompact"
                      readOnly: true
                      type: array
                  assignee:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                      x-nullable: true
                  assignee_section:
                      allOf:
                          - $ref: "#/definitions/SectionCompact"
                          - description: >-
                                The *assignee section* is a subdivision of a project that
                                groups tasks together in the assignee's "My Tasks" list. It
                                can either be a header above a list of tasks in a list view or
                                a column in a board view of "My Tasks."

                                The `assignee_section` property will be returned in the
                                response only if the request was sent by the user who is the
                                assignee of the task. Note that you can only write to
                                `assignee_section` with the gid of an existing section visible
                                in the user's "My Tasks" list.
                      x-nullable: true
                  custom_fields:
                      description: >-
                          Array of custom field values applied to the task. These represent
                          the custom field values recorded on this project for a particular
                          custom field. For example, these custom field values will contain
                          an `enum_value` property for custom fields of type `enum`, a
                          `text_value` property for custom fields of type `text`, and so on.
                          Please note that the `gid` returned on each custom field value *is
                          identical* to the `gid` of the custom field, which allows
                          referencing the custom field metadata through the
                          `/custom_fields/custom_field-gid` endpoint.
                      items:
                          $ref: "#/definitions/CustomFieldResponse"
                      readOnly: true
                      type: array
                  followers:
                      description: Array of users following this task.
                      items:
                          $ref: "#/definitions/UserCompact"
                      readOnly: true
                      type: array
                  parent:
                      allOf:
                          - $ref: "#/definitions/TaskCompact"
                          - description: >-
                                The parent of this task, or `null` if this is not a subtask.
                                This property cannot be modified using a PUT request but you
                                can change it with the `setParent` endpoint. You can create
                                subtasks by using the subtasks endpoint.
                            readOnly: true
                            type: object
                            x-nullable: true
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/resource/123456789/list"
                      readOnly: true
                      type: string
                  projects:
                      description: >-
                          *Create-only.* Array of projects this task is associated with. At
                          task creation time, this array can be used to add the task to many
                          projects at once. After task creation, these associations can be
                          modified using the addProject and removeProject endpoints.
                      items:
                          $ref: "#/definitions/ProjectCompact"
                      readOnly: true
                      type: array
                  workspace:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                          - description: >-
                                *Create-only*. The workspace this task is associated with.
                                Once created, task cannot be moved to a different workspace.
                                This attribute can only be specified at creation time.
                            readOnly: true
                            type: object
              type: object
    TaskSetParentRequest:
        properties:
            insert_after:
                description: >-
                    A subtask of the parent to insert the task after, or `null` to insert
                    at the beginning of the list.
                example: "null"
                type: string
            insert_before:
                description: >-
                    A subtask of the parent to insert the task before, or `null` to insert
                    at the end of the list.
                example: "124816"
                type: string
            parent:
                description: "The new parent of the task, or `null` for no parent."
                example: "987654"
                type: string
        required:
            - parent
        type: object
    TeamAddUserRequest:
        description: >-
            A user identification object for specification with the addUser/removeUser
            endpoints.
        properties:
            user:
                description: >-
                    A string identifying a user. This can either be the string "me", an
                    email, or the gid of a user.
                example: "12345"
                type: string
        type: object
    TeamBase:
        $ref: "#/definitions/TeamCompact"
    TeamCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *team* is used to group related projects and people together within
                  an organization. Each project in an organization is associated with a
                  team.
              properties:
                  name:
                      description: The name of the team.
                      example: Marketing
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: team
    TeamMembershipBase:
        $ref: "#/definitions/TeamMembershipCompact"
    TeamMembershipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: This object represents a user's connection to a team.
              properties:
                  is_guest:
                      description: Describes if the user is a guest in the team.
                      example: false
                      type: boolean
                  team:
                      $ref: "#/definitions/TeamCompact"
                  user:
                      $ref: "#/definitions/UserCompact"
              type: object
              x-docs-overrides:
                  properties.resource_type.example: team_membership
    TeamMembershipResponse:
        $ref: "#/definitions/TeamMembershipBase"
    TeamRemoveUserRequest:
        description: >-
            A user identification object for specification with the addUser/removeUser
            endpoints.
        properties:
            user:
                description: >-
                    A string identifying a user. This can either be the string "me", an
                    email, or the gid of a user.
                example: "12345"
                type: string
        type: object
    TeamRequest:
        allOf:
            - $ref: "#/definitions/TeamBase"
            - properties:
                  description:
                      description: |
                          The description of the team.
                      example: All developers should be members of this team.
                      type: string
                  html_description:
                      description: |
                          The description of the team with formatting as HTML.
                      example: >-
                          <body><em>All</em> developers should be members of this
                          team.</body>
                      type: string
                  organization:
                      description: >
                          The organization/workspace the team belongs to. This must be the
                          same organization you are in and cannot be changed once set.
                      example: "123456789"
                      type: string
                  visibility:
                      description: |
                          The visibility of the team to users in the same organization
                      enum:
                          - secret
                          - request_to_join
                          - public
                      type: string
              type: object
    TeamResponse:
        allOf:
            - $ref: "#/definitions/TeamBase"
            - properties:
                  description:
                      description: |
                          [Opt In](/docs/input-output-options). The description of the team.
                      example: All developers should be members of this team.
                      type: string
                  html_description:
                      description: >
                          [Opt In](/docs/input-output-options). The description of the team
                          with formatting as HTML.
                      example: >-
                          <body><em>All</em> developers should be members of this
                          team.</body>
                      type: string
                  organization:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                          - description: |
                                The organization/workspace the team belongs to.
                            type: object
                  permalink_url:
                      description: A url that points directly to the object within Asana.
                      example: "https://app.asana.com/0/resource/123456789/list"
                      readOnly: true
                      type: string
                  visibility:
                      description: |
                          The visibility of the team to users in the same organization
                      enum:
                          - secret
                          - request_to_join
                          - public
                      type: string
              type: object
    TimePeriodBase:
        allOf:
            - $ref: "#/definitions/TimePeriodCompact"
            - properties:
                  parent:
                      $ref: "#/definitions/TimePeriodCompact"
              type: object
    TimePeriodCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - properties:
                  display_name:
                      description: A string representing the cadence code and the fiscal year.
                      example: Q1 FY22
                      type: string
                  end_on:
                      description: The localized end date of the time period in `YYYY-MM-DD` format.
                      example: "2019-09-14"
                      type: string
                  period:
                      description: >-
                          The cadence and index of the time period. The value is one of:
                          `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
                      enum:
                          - FY
                          - H1
                          - H2
                          - Q1
                          - Q2
                          - Q3
                          - Q4
                      example: Q1
                      type: string
                  start_on:
                      description: >-
                          The localized start date of the time period in `YYYY-MM-DD`
                          format.
                      example: "2019-09-13"
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: time_period
    TimePeriodResponse:
        allOf:
            - $ref: "#/definitions/TimePeriodBase"
            - type: object
    UserBase:
        $ref: "#/definitions/UserCompact"
    UserBaseResponse:
        allOf:
            - $ref: "#/definitions/UserBase"
            - properties:
                  email:
                      description: The user's email address.
                      example: gsanchez@example.com
                      format: email
                      readOnly: true
                      type: string
                  photo:
                      description: >-
                          A map of the user’s profile photo in various sizes, or null if no
                          photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024.
                          All images are in PNG format, except for 1024 (which is in JPEG
                          format).
                      example:
                          image_1024x1024: "https://..."
                          image_128x128: "https://..."
                          image_21x21: "https://..."
                          image_27x27: "https://..."
                          image_36x36: "https://..."
                          image_60x60: "https://..."
                      properties:
                          image_1024x1024:
                              format: uri
                              type: string
                          image_128x128:
                              format: uri
                              type: string
                          image_21x21:
                              format: uri
                              type: string
                          image_27x27:
                              format: uri
                              type: string
                          image_36x36:
                              format: uri
                              type: string
                          image_60x60:
                              format: uri
                              type: string
                      readOnly: true
                      type: object
                      x-nullable: true
              type: object
    UserCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *user* object represents an account in Asana that can be given
                  access to various workspaces, projects, and tasks.
              properties:
                  name:
                      description: "*Read-only except when same user as requester*. The user’s name."
                      example: Greg Sanchez
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: user
    UserRequest:
        $ref: "#/definitions/UserBase"
    UserResponse:
        allOf:
            - $ref: "#/definitions/UserBaseResponse"
            - properties:
                  workspaces:
                      description: >-
                          Workspaces and organizations this user may access.

                          Note\: The API will only return workspaces and organizations that
                          also contain the authenticated user.
                      items:
                          $ref: "#/definitions/WorkspaceCompact"
                      readOnly: true
                      type: array
              type: object
    UserTaskListBase:
        $ref: "#/definitions/UserTaskListCompact"
    UserTaskListCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A user task list represents the tasks assigned to a particular user.
                  It provides API access to a user’s [My
                  Tasks](https://asana.com/guide/help/fundamentals/my-tasks) view in
                  Asana.
              properties:
                  name:
                      description: The name of the user task list.
                      example: My Tasks in My Workspace
                      type: string
                  owner:
                      allOf:
                          - $ref: "#/definitions/UserCompact"
                      description: >-
                          The owner of the user task list, i.e. the person whose My Tasks is
                          represented by this resource.
                      readOnly: true
                  workspace:
                      allOf:
                          - $ref: "#/definitions/WorkspaceCompact"
                      description: The workspace in which the user task list is located.
                      readOnly: true
              type: object
              x-docs-overrides:
                  properties.resource_type.example: user_task_list
    UserTaskListRequest:
        $ref: "#/definitions/UserTaskListBase"
    UserTaskListResponse:
        $ref: "#/definitions/UserTaskListBase"
    WebhookCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  Webhook objects represent the state of an active subscription for a
                  server to be updated with information from Asana. This schema
                  represents the subscription itself, not the objects that are sent to
                  the server. For information on those please refer to the
                  [Event](/docs/tocS_Event) schema.
              properties:
                  active:
                      description: >-
                          If true, the webhook will send events - if false it is considered
                          inactive and will not generate events.
                      example: false
                      readOnly: true
                      type: boolean
                  resource:
                      $ref: "#/definitions/AsanaNamedResource"
                  target:
                      description: The URL to receive the HTTP POST.
                      example: "https://example.com/receive-webhook/7654"
                      format: uri
                      readOnly: true
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: webhook
    WebhookFilter:
        description: >-
            A WebhookFilter can be passed on creation of a webhook in order to filter
            the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
        properties:
            action:
                description: >-
                    The type of change on the **resource** to pass through the filter. For
                    more information refer to `Event.action` in the
                    [Event](/docs/tocS_Event) schema. This can be one of `changed`,
                    `added`, `removed`, `deleted`, and `undeleted` depending on the nature
                    of what has occurred on the resource.
                example: changed
                type: string
            fields:
                description: >-
                    *Conditional.* A whitelist of fields for events which will pass the
                    filter when the resource is changed. These can be any combination of
                    the fields on the resources themselves. This field is only valid for
                    `action` of type `changed`
                example:
                    - due_at
                    - due_on
                    - dependencies
                items:
                    type: string
                type: array
            resource_subtype:
                description: >-
                    The resource subtype of the resource that the filter applies to. This
                    should be set to the same value as is returned on the
                    `resource_subtype` field on the resources themselves.
                example: milestone
                type: string
            resource_type:
                description: >-
                    The type of the resource which created the event when modified; for
                    example, to filter to changes on regular tasks this field should be
                    set to `task`.
                example: task
                type: string
        type: object
    WebhookRequest:
        properties:
            filters:
                description: >-
                    An array of WebhookFilter objects to specify a whitelist of filters to
                    apply to events from this webhook. If a webhook event passes any of
                    the filters the event will be delivered; otherwise no event will be
                    sent to the receiving server.
                items:
                    allOf:
                        - $ref: "#/definitions/WebhookFilter"
                        - description: >-
                              A set of filters to specify a whitelist for what types of events
                              will be delivered.
                        - type: object
                type: array
            resource:
                description: >-
                    A resource ID to subscribe to. Many Asana resources are valid to
                    create webhooks on, but higher-level resources require filters.
                example: "12345"
                type: string
            target:
                description: >-
                    The URL to receive the HTTP POST. The full URL will be used to deliver
                    events from this webhook (including parameters) which allows encoding
                    of application-specific state when the webhook is created.
                example: >-
                    https://example.com/receive-webhook/7654?app_specific_param=app_specific_value
                format: uri
                type: string
        required:
            - resource
            - target
        type: object
    WebhookResponse:
        allOf:
            - $ref: "#/definitions/WebhookCompact"
            - properties:
                  created_at:
                      description: The time at which this resource was created.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  filters:
                      description: >-
                          Whitelist of filters to apply to events from this webhook. If a
                          webhook event passes any of the filters the event will be
                          delivered; otherwise no event will be sent to the receiving
                          server.
                      items:
                          allOf:
                              - $ref: "#/definitions/WebhookFilter"
                              - description: >-
                                    A set of filters to specify a whitelist for what types of
                                    events will be delivered.
                              - type: object
                      type: array
                  last_failure_at:
                      description: >-
                          The timestamp when the webhook last received an error when sending
                          an event to the target.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
                  last_failure_content:
                      description: >-
                          The contents of the last error response sent to the webhook when
                          attempting to deliver events to the target.
                      example: 500 Server Error\n\nCould not complete the request
                      readOnly: true
                      type: string
                  last_success_at:
                      description: >-
                          The timestamp when the webhook last successfully sent an event to
                          the target.
                      example: "2012-02-22T02:06:58.147Z"
                      format: date-time
                      readOnly: true
                      type: string
              type: object
    WebhookUpdateRequest:
        properties:
            filters:
                description: >-
                    An array of WebhookFilter objects to specify a whitelist of filters to
                    apply to events from this webhook. If a webhook event passes any of
                    the filters the event will be delivered; otherwise no event will be
                    sent to the receiving server.
                items:
                    allOf:
                        - $ref: "#/definitions/WebhookFilter"
                        - description: >-
                              A set of filters to specify a whitelist for what types of events
                              will be delivered.
                        - type: object
                type: array
        type: object
    WorkspaceAddUserRequest:
        description: >-
            A user identification object for specification with the addUser/removeUser
            endpoints.
        properties:
            user:
                description: >-
                    A string identifying a user. This can either be the string "me", an
                    email, or the gid of a user.
                example: "12345"
                type: string
        type: object
    WorkspaceBase:
        $ref: "#/definitions/WorkspaceCompact"
    WorkspaceCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: >-
                  A *workspace* is the highest-level organizational unit in Asana. All
                  projects and tasks have an associated workspace.
              properties:
                  name:
                      description: The name of the workspace.
                      example: My Company Workspace
                      type: string
              type: object
              x-docs-overrides:
                  properties.resource_type.example: workspace
    WorkspaceMembershipBase:
        $ref: "#/definitions/WorkspaceMembershipCompact"
    WorkspaceMembershipCompact:
        allOf:
            - $ref: "#/definitions/AsanaResource"
            - description: This object determines if a user is a member of a workspace.
              properties:
                  user:
                      $ref: "#/definitions/UserCompact"
                  workspace:
                      $ref: "#/definitions/WorkspaceCompact"
              type: object
              x-docs-overrides:
                  properties.resource_type.example: workspace_membership
    WorkspaceMembershipRequest:
        $ref: "#/definitions/WorkspaceMembershipBase"
    WorkspaceMembershipResponse:
        allOf:
            - $ref: "#/definitions/WorkspaceMembershipBase"
            - properties:
                  is_active:
                      description: Reflects if this user still a member of the workspace.
                      readOnly: true
                      type: boolean
                  is_admin:
                      description: Reflects if this user is an admin of the workspace.
                      readOnly: true
                      type: boolean
                  is_guest:
                      description: Reflects if this user is a guest of the workspace.
                      readOnly: true
                      type: boolean
                  user_task_list:
                      $ref: "#/definitions/UserTaskListResponse"
                      description: The user's "My Tasks" in the workspace.
                      readOnly: true
                  vacation_dates:
                      description: >-
                          Contains keys `start_on` and `end_on` for the vacation dates for
                          the user in this workspace. If `start_on` is null, the entire
                          `vacation_dates` object will be null. If `end_on` is before today,
                          the entire `vacation_dates` object will be null.
                      properties:
                          end_on:
                              description: >-
                                  The day on which the user's vacation in this workspace ends,
                                  or null if there is no end date. This is a date with
                                  `YYYY-MM-DD` format.
                              example: "2022-11-07"
                              type: string
                              x-nullable: true
                          start_on:
                              description: >-
                                  The day on which the user's vacation in this workspace starts.
                                  This is a date with `YYYY-MM-DD` format.
                              example: "2022-11-05"
                              type: string
                      readOnly: true
                      type: object
                      x-nullable: true
              type: object
    WorkspaceRemoveUserRequest:
        description: >-
            A user identification object for specification with the addUser/removeUser
            endpoints.
        properties:
            user:
                description: >-
                    A string identifying a user. This can either be the string "me", an
                    email, or the gid of a user.
                example: "12345"
                type: string
        type: object
    WorkspaceRequest:
        $ref: "#/definitions/WorkspaceBase"
    WorkspaceResponse:
        allOf:
            - $ref: "#/definitions/WorkspaceBase"
            - properties:
                  email_domains:
                      description: The email domains that are associated with this workspace.
                      example:
                          - asana.com
                      items:
                          format: uri
                          type: string
                      type: array
                  is_organization:
                      description: Whether the workspace is an *organization*.
                      example: false
                      type: boolean
              type: object
securityDefinitions:
    oauth2:
        authorizationUrl: "https://app.asana.com/-/oauth_authorize"
        description: >-
            We require that applications designed to access the Asana API on behalf of
            multiple users implement OAuth 2.0.

            Asana supports the Authorization Code Grant flow.
        flow: accessCode
        scopes:
            default: >-
                Provides access to all endpoints documented in our API reference. If no
                scopes are requested, this scope is assumed by default.
            email: >-
                Provides access to the user’s email through the OpenID Connect user info
                endpoint.
            openid: >-
                Provides access to OpenID Connect ID tokens and the OpenID Connect user
                info endpoint.
            profile: >-
                Provides access to the user’s name and profile photo through the OpenID
                Connect user info endpoint.
        tokenUrl: "https://app.asana.com/-/oauth_token"
        type: oauth2
    personalAccessToken:
        description: >-
            A personal access token allows access to the api for the user who created
            it. This should be kept a secret and be treated like a password.
        in: header
        name: Authorization
        type: apiKey
security:
    - personalAccessToken: []
    - oauth2: []
tags:
    - description: >-
          An *attachment* object represents any file attached to a task in Asana,
          whether it’s an uploaded file or one associated via a third-party service
          such as Dropbox or Google Drive.
      name: Attachments
    - description: >-
          Asana's audit log is an immutable log of [important
          events](/docs/supported-auditlogevents) in your organization's Asana
          instance.


          The audit log API allows you to monitor and act upon important security
          and compliance-related changes. Organizations might use this API endpoint
          to:


          * Set up proactive alerting with a Security Information and Event
          Management (SIEM) tool like
          [Splunk](https://asana.com/guide/help/api/splunk)

          * Conduct reactive investigations when a security incident takes place

          * Visualize key domain data in aggregate to identify security trends


          Note that since the API provides insight into what is happening in an
          Asana instance, the data is [read-only](/docs/get-audit-log-events). That
          is, there are no "write" or "update" endpoints for audit log events.


          Only [Service
          Accounts](https://asana.com/guide/help/premium/service-accounts) in
          [Enterprise Domains](https://asana.com/enterprise) can access audit log
          API endpoints. Authentication with a Service Account's [personal access
          token](/docs/personal-access-token) is required.


          For a full list of supported events, see [supported
          AuditLogEvents](/docs/supported-auditlogevents).
      name: Audit log API
    - description: >-
          There are many cases where you want to accomplish a variety of work in the
          Asana API but want to minimize the number of HTTP requests you make. For
          example:


          * Modern browsers limit the number of requests that a single web page can
            make at once.
          * Mobile apps will use more battery life to keep the cellular radio on
            when making a series of requests.
          * There is an overhead cost to developing software that can make multiple
            requests in parallel.
          * Some cloud platforms handle parallelism poorly, or disallow it
            entirely.


          To make development easier in these use cases, Asana provides a **batch
          API** that enables developers to perform multiple “actions” by making only
          a single HTTP request.


          #### Making a batch request


          To make a batch request, send a `POST` request to `/batch`. Like other
          `POST` endpoints, the body should contain a `data` envelope. Inside this
          envelope should be a single `actions` field, containing a list of “action”
          objects.  Each action represents a standard request to an existing
          endpoint in the Asana API.


          **The maximum number of actions allowed in a single batch request is 10**.
          Making a batch request with no actions in it will result in a `400 Bad
          Request`.


          When the batch API receives the list of actions to execute, it will
          dispatch those actions to the already-implemented endpoints specified by
          the `relative_path` and `method` for each action. This happens in
          parallel, so all actions in the request will be processed simultaneously.
          There is no guarantee of the execution order for these actions, nor is
          there a way to use the output of one action as the input of another action
          (such as creating a task and then commenting on it).


          The response to the batch request will contain (within the `data`
          envelope) a list of result objects, one for each action. The results are
          guaranteed to be in the same order as the actions in the request (e.g.,
          the first result in the response corresponds to the first action in the
          request)


          The batch API will always attempt to return a `200 Success` response with
          individual result objects for each individual action in the request. Only
          in certain cases (such as missing authorization or malformed JSON in the
          body) will the entire request fail with another status code. Even if every
          individual action in the request fails, the batch API will still return a
          `200 Success` response, and each result object in the response will
          contain the errors encountered with each action.


          #### Rate limiting


          The batch API fully respects all of our rate limiting. This means that a
          batch request counts against *both* the standard rate limiter and the
          concurrent request limiter as though you had made a separate HTTP request
          for every individual action. For example, a batch request with five
          actions counts as five separate requests in the standard rate limiter, and
          counts as five concurrent requests in the concurrent request limiter. The
          batch request itself incurs no cost.


          If any of the actions in a batch request would exceed any of the enforced
          limits, the *entire* request will fail with a `429 Too Many Requests`
          error. This is to prevent the unpredictability of which actions might
          succeed if not all of them could succeed.


          #### Restrictions


          Not every endpoint can be accessed through the batch API. Specifically,
          the following actions cannot be taken and will result in a `400 Bad
          Request` for that action:


          * Uploading attachments

          * Creating, getting, or deleting organization exports

          * Any SCIM operations

          * Nested calls to the batch API
      name: Batch API
    - description: >-
          _Note: Custom fields are a premium feature. Integrations which work with
          custom fields need to handle an assortment of use cases for free and
          premium users in context of free and premium organizations. For a detailed
          examination of which data users will have access in different
          circumstances, review the section below on access control._


          In the Asana application, tasks, projects, and portfolios can hold
          user-specified [custom
          fields](https://asana.com/guide/help/premium/custom-fields) which provide
          extra information (e.g., a "priority" property with an associated value,
          or a number representing the time required to complete a task). This lets
          a user define the type of information that each item within a project or
          portfolio can contain in addition to the built-in fields that Asana
          provides.

          `display_value` is a read-only field that will always be a string. For
          apps that use custom fields, this is a great way to safely display/export
          the value of a custom field, regardless of its type. We suggest apps use
          this field in order to future-proof for changes to custom fields.


          #### Characteristics of custom fields


          * There is metadata that defines the custom field. This metadata can be
          shared across an entire workspace, or be specific to a project or
          portfolio.

          * Creating a custom field setting on a project or portfolio means each
          direct child will have the custom field. This is conceptually akin to
          adding columns in a database or a spreadsheet: every task (row) in the
          project (table) can contain information for that field, including "blank"
          values (i.e., `null` data). For portfolio custom fields, every project
          (row) in the portfolio (table) will contain information for the custom
          field.

          * Custom field settings only go one child deep. This means that a custom
          field setting on a portfolio will give each project the custom field, but
          not each task within those projects.

          * Tasks have custom field _values_ assigned to them.


          #### Types of custom fields


          Integrations using custom fields need to be aware of the six basic types
          that a custom field can adopt. These types are:


          * `text` - an arbitrary, relatively short string of text

          * `number` - a number with a defined level of precision

          * `enum` - a selection of a single option from a defined list of options
          (i.e., mutually exclusive selections)

          * `multi_enum` - a selection of one or more options from a defined list of
          options (i.e., mutually inclusive selections)

          * `date` - a reference date with an optional time value

          * `people` - a list of active contributors (i.e., where their relationship
          to the work is defined in the custom field title)


          #### Example use case


          Consider an organization that has defined a custom field for "Priority".
          This field is of `enum` type and can have user-defined values of `Low`,
          `Medium`, or `High`. This is the field metadata, and it is visible within,
          and shared across, the entire organization.


          A project is then created in the organization, called "Bugs", and the
          "Priority" custom field is associated with that project. This will allow
          all tasks within the "Bugs" project to have an associated "Priority".


          A new task is created within "Bugs". This task, then, has a field named
          "Priority" which can take on the custom field value of one of `[null]`,
          `Low`, `Medium`, and `High`.


          #### Custom fields in the API


          These custom fields are accessible via the API through a number of
          endpoints at the top level (e.g. `/custom_fields` and
          `/custom_field_settings`) and through requests on workspaces, portfolios,
          projects, and tasks resources. The API also provides a way to fetch both
          the metadata and data which define each particular custom field, so that a
          client application may render proper UI to display or edit the values.


          Text fields are currently limited to 1024 characters. On tasks, their
          custom field value will have a `text_value` property to represent this
          field.


          Number fields can have an arbitrary `precision` associated with them; for
          example, a precision of `2` would round its value to the second
          (hundredths) place (e.g., `1.2345` would round to `1.23`). On tasks, the
          custom field value will have a `number_value` property to represent this
          field.


          #### Enum fields


          Enum fields represent a selection from a list of options. On the metadata,
          they will contain all of the options in an array. Each option has 4
          properties:


          * `gid` - the GID of this enum option. Note that this is the GID of the
          individual _option_. The custom field itself has a separate `gid`.

          * `name` - the name of the option (e.g., "Choice #1")

          * `enabled` - whether this field is enabled. Disabled fields are not
          available to choose from when disabled, and are visually hidden in the
          Asana application, but they remain in the metadata for custom field values
          which were set to the option before the option was disabled.

          * `color` - a color associated with this choice.


          On the task's custom field value, the enum will have an `enum_value`
          property which will be the same as one of the choices from the list
          defined in the custom field metadata.


          #### Querying an organization for its custom fields


          For custom fields shared across the workspace or organization, the
          workspace [can be queried](/docs/get-a-workspaces-custom-fields) for its
          list of defined custom fields. Like other collection queries, the fields
          will be returned as a compact record; slightly different from most other
          compact records is the fact that the compact record for custom fields
          includes `type` as well as `gid` and `name`.


          #### Accessing custom field definitions


          The [custom fields](/docs/get-a-custom-field) reference describes how the
          metadata which defines a custom field is accessed. A GET request with a
          `gid` can be issued on the `/custom_fields` endpoint to fetch the full
          definition of a single custom field given its `gid` from (for instance)
          listing all custom fields on a workspace, or getting the `gid` from a
          custom field settings object or a task.


          #### Associating custom fields with a project or portfolio


          A mapping between a custom field and a project or portfolio is handled
          with a [custom field settings](/docs/asana-custom-field-settings) object.
          This object contains a reference for each of the custom fields and the
          project or portfolio, as well as additional information about the status
          of that particular custom field (e.g., `is_important`, which defines
          whether or not the custom field will appear in the list/grid on the Asana
          application).


          #### Accessing custom field values on tasks or projects


          The [tasks](/docs/get-a-task) reference has information on how custom
          fields look on tasks. custom fields will return as an array on the
          property `custom_fields`, and each entry will contain, side-by-side, the
          compact representation of the custom field metadata and a
          `{typename}_value` property that stores the value set for the custom
          field.


          Of particular note is that the top-level `gid` of each entry in the
          `custom_fields` array is the `gid` of the custom field metadata, as it is
          the compact representation of this metadata. This can be used to refer to
          the full metadata by making a request to the
          `/custom_fields/{custom_fields_id}` endpoint as described above.


          Custom fields can be set just as in the Asana-defined fields on a task via
          `POST` or `PUT` requests. You can see an example in the [update a
          task](/docs/update-a-task) endpoint.


          Custom fields on projects follow this same pattern.


          #### Warning: Program defensively with regards to custom field definitions


          Asana application users have the ability to change the definitions of
          custom field metadata. This means that as you write scripts or
          applications to work with them, it is possible for the definitions to
          change at any time, which may cause an application using them to break or
          malfunction if it makes assumptions about the metadata for a particular
          custom field. When using custom fields, it is a good idea to program
          *defensively*, meaning you your application should double-check that the
          custom field metadata are what it expects.


          Storing the state of the custom field metadata for too long if you
          dynamically create a model for it can cause your model to become out of
          sync with the model stored in Asana. For example, if you encounter an
          `enum` value on a task that does not match any option in your metadata
          model, your metadata model has become out of date with the custom field
          metadata.


          #### Enabled and disabled values


          When information that is contained in a custom field value loses a logical
          association with its metadata definition, the value becomes disabled. This
          can happen in a couple of simple ways, for example, if you remove the
          custom field metadata from a project, or move a task with a custom field
          to a different project which does not have the custom field metadata
          associated with it. The value remains on the task, and the custom field
          metadata can still be found and examined, but as the context in which the
          custom field makes sense is gone, the custom field cannot change its
          value; it can only be cleared.


          _Note: Tasks that are associated with multiple projects do not become
          disabled, so long as at least one of the projects is still associated with
          the custom field metadata. In other words, tasks with multiple projects
          will retain logically associated to the set of custom field metadata
          represented by all of their projects._


          Moving the task back under a project with that custom field applied to it
          or applying the custom field metadata to the current project will return
          the custom field value to an enabled state. In this scenario, the custom
          field will be re-enabled and editable again.


          In the Asana application, disabled fields are grayed out and not allowed
          to change, other than to be discarded. In the API, we return a property
          `enabled: false` to inform the external application that the value has
          been disabled.


          Note that the API enforces the same operations on disabled custom field
          values as hold in the Asana application: they may not have their values
          changed, since the lack of context for the values of a custom field in
          general doesn't provide enough information to know what new values should
          be. Setting the custom field value to `null` will clear and remove the
          custom field value from the task.


          #### Custom field access control


          Custom fields are a complex feature of the Asana platform, and their
          access in the Asana application and in the API vary based on the status of
          the user and project. When building your application, it is best to be
          defensive and not assume the given user will have read or write access to
          a custom field, and fail gracefully when this occurs.
      name: Custom fields
    - description: >-
          Custom fields are attached to a particular project with the custom field
          settings resource. This resource both represents the many-to-many join of
          the custom field and project as well as stores information that is
          relevant to that particular pairing. For instance, the `is_important`
          property determines some possible application-specific handling of that
          custom field.
      name: Custom field settings
    - description: >-
          An event is an object representing a change to a resource that was
          observed by an event subscription. Event streams rely on the same
          infrastructure as webhooks, which ensures events are delivered within a
          minute (on average). This system is designed for at most once delivery,
          meaning in exceptional circumstances a small number of events may be
          missing from the stream. For this reason, if your use case requires strong
          guarantees about processing all changes on a resource and cannot tolerate
          any missing events, regardless of how rare that might be, we recommend
          building a fallback polling system that fetches the resource periodically
          as well. Note that while webhooks cannot be replayed once delivered,
          events are retrievable from the event stream for 24 hours after being
          processed.


          In general, requesting events on a resource is faster and subject to
          higher rate limits than requesting the resource itself. Additionally,
          change events "bubble up" (e.g., listening to events on a project would
          include when stories are added to tasks in the project, and even to
          subtasks).


          Establish an initial sync token by making a request with no sync token.
          The response will be a `412 Precondition Failed` error - the same as if
          the sync token had expired.


          Subsequent requests should always provide the sync token from the
          immediately preceding call.


          Sync tokens may not be valid if you attempt to go "backward" in the
          history by requesting previous tokens, though re-requesting the current
          sync token is generally safe, and will always return the same results.


          When you receive a `412 Precondition Failed` error, it means that the sync
          token is either invalid or expired. If you are attempting to keep a set of
          data in sync, this signals you may need to re-crawl the data.


          Sync tokens always expire after 24 hours, but may expire sooner, depending
          on load on the service.
      name: Events
    - description: >-
          A goal is an object in the goal-tracking system that helps your
          organization drive measurable results.
      name: Goals
    - description: >-
          A goal relationship is an object representing the relationship between a
          goal and another goal, a project, or a portfolio.
      name: Goal relationships
    - description: >-
          Jobs represent processes that handle asynchronous work. A job created when
          an endpoint requests an action that will be handled asynchronously, such
          as project or task duplication.


          Only the creator of the duplication process can access the duplication
          status of the new object.


          *Note*: With any work that is handled asynchronously (e.g., [project
          instantation from a
          template](/docs/instantiate-a-project-from-a-project-template),
          duplicating a [task](/docs/duplicate-a-task) or
          [project](/docs/duplicate-a-project), etc.), the *intermittent states* of
          newly-created objects may not be consistent. That is, object properties
          may return different values each time when polled until the job `status`
          has returned a `succeeded` value.
      name: Jobs
    - description: >-
          An `organization_export` object represents a request to export the
          complete data of an organization in JSON format.


          To export an organization using this API:


          * Create an `organization_export`
            [request](/docs/create-an-organization-export-request)
            and store the ID that is returned.
          * Request the `organization_export` every few minutes, until the
            `state` field contains ‘finished’.
          * Download the file located at the URL in the `download_url` field. *
          Exports can take a long time, from several minutes to a few hours
            for large organizations.


          *Note: These endpoints are only available to [Service
          Accounts](https://asana.com/guide/help/premium/service-accounts) of an
          [Enterprise](https://asana.com/enterprise) organization.*
      name: Organization exports
    - description: >-
          A portfolio gives a high-level overview of the status of multiple
          initiatives in Asana. Portfolios provide a dashboard overview of the state
          of multiple projects, including a progress report and the most recent
          [status update](/docs/asana-statuses).

          Portfolios have some restrictions on size. Each portfolio has a max of 500
          items and, like projects, a maximum of 20 custom fields.
      name: Portfolios
    - description: This object determines if a user is a member of a portfolio.
      name: Portfolio memberships
    - description: >-
          A project represents a prioritized list of tasks in Asana or a board with
          columns of tasks represented as cards. A project exists in a single
          workspace or organization and is accessible to a subset of users in that
          workspace or organization, depending on its permissions.


          Projects in organizations are shared with a single team. Currently, the
          team of a project cannot be changed via the API. Non-organization
          workspaces do not have teams and so you should not specify the team of
          project in a regular workspace.


          Followers of a project are a subset of the members of that project.
          Followers of a project will receive all updates including tasks created,
          added and removed from that project. Members of the project have access to
          and will receive status updates of the project. Adding followers to a
          project will add them as members if they are not already, removing
          followers from a project will not affect membership.


          **Note:** You can use certain project endpoints to operate on [user task
          lists](/docs/user-task-lists) ([My
          Tasks](https://asana.com/guide/help/fundamentals/my-tasks)) by
          substituting the `{project_gid}` with the `{user_task_list_gid}`. For
          example, you can perform operations on the custom fields of a [user task
          list](/docs/user-task-lists) by using the following projects endpoints:
          [Add a custom field to a project](/docs/add-a-custom-field-to-a-project),
          [Remove a custom field from a
          project](/docs/remove-a-custom-field-from-a-project) and [Get a project's
          custom fields](/docs/get-a-projects-custom-fields)
      name: Projects
    - description: >-
          A project brief object represents a rich text document that describes a
          project.


          Please note that this API is in *preview*, and is expected to change. This
          API is to be used for development and testing only as an advance view into
          the upcoming rich text format experience in the task description. For more
          information, see [this
          post](https://forum.asana.com/t/project-brief-api-now-available-as-a-preview/150885)
          in the developer forum.
      name: Project briefs
    - description: >-
          With the introduction of “comment-only” projects in Asana, a user’s
          membership in a project comes with associated permissions. These
          permissions (i.e., whether a user has full access to the project or
          comment-only access) are accessible through the project memberships
          endpoints described here.
      name: Project memberships
    - description: >-
          *Deprecated: new integrations should prefer using [status
          updates](/docs/asana-statuses)*


          A project status is an update on the progress of a particular project,

          and is sent out to all project followers when created. These updates

          include both text describing the update and a color code intended to

          represent the overall state of the project: "green" for projects that

          are on track, "yellow" for projects at risk, "red" for projects that

          are behind, and "blue" for projects on hold.


          Project statuses can be created and deleted, but not modified.
      name: Project statuses
    - description: >-
          A project template is an object that allows new projects to be created

          with a predefined setup, which may include tasks, sections, rules, etc.

          It simplifies the process of running a workflow that involves a similar

          set of work every time.



          Project templates in organizations are shared with a single team.
          Currently, the

          team of a project template cannot be changed via the API.
      name: Project templates
    - description: >-
          A section is a subdivision of a project that groups tasks together. It can
          either be a header above a list of tasks in a list view or a column in a
          board view of a project.


          Sections are largely a shared idiom in Asana’s API for both list and board
          views of a project regardless of the project’s layout.


          The ‘memberships’ property when [getting a task](/docs/get-a-task) will
          return the information for the section or the column under ‘section’ in
          the response.
      name: Sections
    - description: >-
          A status update is an update on the progress of a particular object,

          and is sent out to all followers when created. These updates

          include both text describing the update and a `status_type` intended to

          represent the overall state of the project. These include: `on_track` for
          projects that

          are on track, `at_risk` for projects at risk, `off_track` for projects
          that

          are behind, and `on_hold` for projects on hold.


          Status updates can be created and deleted, but not modified.
      name: Status updates
    - description: >-
          *See [our forum
          post](https://forum.asana.com/t/no-more-parsing-story-text-new-fields-on-stories/42924)
          for more info on when conditional fields are returned.*


          A story represents an activity associated with an object in the Asana
          system. Stories are generated by the system whenever users take actions
          such as creating or assigning tasks, or moving tasks between projects.
          "Comments" are also a form of user-generated story.
      name: Stories
    - description: >-
          A tag is a label that can be attached to any task in Asana. It exists in a
          single workspace or organization.


          Tags have some metadata associated with them, but it is possible that we
          will simplify them in the future so it is not encouraged to rely too
          heavily on it. Unlike projects, tags do not provide any ordering on the
          tasks they are associated with.
      name: Tags
    - description: >-
          The task is the basic object around which many operations in Asana are
          centered. In the Asana application, multiple tasks populate the middle
          pane according to some view parameters, and the set of selected tasks
          determines the more detailed information presented in the details pane.


          Sections are unique in that they will be included in the `memberships`
          field of task objects returned in the API when the task is within a
          section. They can also be used to manipulate the ordering of a task within
          a project.


          [Queries](/docs/get-multiple-tasks) return a [compact representation of
          each task object](/docs/task-compact). To retrieve *all* fields or
          *specific set* of the fields, use [field
          selectors](/docs/input-output-options) to manipulate what data is included
          in a response.
      name: Tasks
    - description: >-
          A team is used to group related projects and people together within an
          organization. Each project in an organization is associated with a team.
      name: Teams
    - description: This object determines if a user is a member of a team.
      name: Team memberships
    - description: >-
          A time period is an object that represents a domain-scoped date range that
          can be set on [goals](/docs/goals).
      name: Time periods
    - description: >-
          The typeahead search API provides search for objects from a single
          workspace.
      name: Typeahead
    - description: >-
          A user object represents an account in Asana that can be given access to
          various workspaces, projects, and tasks.


          Like other objects in the system, users are referred to by numerical IDs.
          However, the special string identifier `me` can be used anywhere a user ID
          is accepted, to refer to the current authenticated user (e.g, `GET
          /users/me`).
      name: Users
    - description: >-
          A user task list represents the tasks assigned to a particular user. This
          list is the user's [My
          Tasks](https://asana.com/guide/help/fundamentals/my-tasks) list.
      name: User task lists
    - description: >-
          Webhooks allow you to subscribe to notifications about events that occur
          on Asana resources (e.g., tasks, projects, stories, etc.).


          For a more detailed explanation of webhooks see the [overview of
          webhooks](/docs/overview-of-webhooks).
      name: Webhooks
    - description: >-
          A *workspace* is the highest-level organizational unit in Asana. All
          projects and tasks have an associated workspace.


          An *organization* is a special kind of workspace that represents a
          company. In an organization, you can group your projects into teams. You
          can read more about how organizations work on the Asana Guide. To tell if
          your workspace is an organization or not, check its `is_organization`
          property.


          Over time, we intend to migrate most workspaces into organizations and to
          release more organization-specific functionality. We may eventually
          deprecate using workspace-based APIs for organizations. Currently, and
          until after some reasonable grace period following any further
          announcements, you can still reference organizations in any `workspace`
          parameter.
      name: Workspaces
    - description: This object determines if a user is a member of a workspace.
      name: Workspace memberships
x-components:
    parameters:
        archived_query_param:
            description: >-
                Only return projects whose `archived` field takes on the value of this
                parameter.
            in: query
            name: archived
            type: boolean
            x-example: false
        attachment_path_gid:
            description: Globally unique identifier for the attachment.
            in: path
            name: attachment_gid
            required: true
            type: string
            x-env-variable: attachment
            x-example: "12345"
        audit_log_actor_gid:
            description: Filter to events triggered by the actor with this ID.
            in: query
            name: actor_gid
            required: false
            type: string
        audit_log_actor_type:
            description: >-
                Filter to events with an actor of this type.

                This only needs to be included if querying for actor types without an
                ID. If `actor_gid` is included, this should be excluded.
            enum:
                - user
                - asana
                - asana_support
                - anonymous
                - external_administrator
            in: query
            name: actor_type
            required: false
            type: string
        audit_log_end_at:
            description: Filter to events created before this time (exclusive).
            format: date-time
            in: query
            name: end_at
            required: false
            type: string
        audit_log_event_type:
            description: >-
                Filter to events of this type.

                Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents)
                for a full list of values.
            in: query
            name: event_type
            required: false
            type: string
        audit_log_resource_gid:
            description: Filter to events with this resource ID.
            in: query
            name: resource_gid
            required: false
            type: string
        audit_log_start_at:
            description: Filter to events created after this time (inclusive).
            format: date-time
            in: query
            name: start_at
            required: false
            type: string
        completed_since:
            description: >
                Only return tasks that are either incomplete or that have been completed
                since this time. Accepts a date-time string or the keyword *now*.
            in: query
            name: completed_since
            required: false
            type: string
            x-example: "2012-02-22T02:06:58.158Z"
        custom_field_path_gid:
            description: Globally unique identifier for the custom field.
            in: path
            name: custom_field_gid
            required: true
            type: string
            x-env-variable: custom_field
            x-example: "12345"
        fields:
            collectionFormat: multi
            description: >-
                Defines fields to return.

                Some requests return *compact* representations of objects in order to
                conserve resources and complete the request more efficiently. Other
                times requests return more information than you may need. This option
                allows you to list the exact set of fields that the API should be sure
                to return for the objects. The field names should be provided as paths,
                described below.

                The id of included objects will always be returned, regardless of the
                field options.
            in: query
            items:
                type: string
            name: opt_fields
            required: false
            type: array
            x-example:
                - followers
                - assignee
        goal_path_gid:
            description: Globally unique identifier for the goal.
            in: path
            name: goal_gid
            required: true
            type: string
            x-env-variable: goal
            x-example: "12345"
        goal_relationship_path_gid:
            description: Globally unique identifier for the goal relationship.
            in: path
            name: goal_relationship_gid
            required: true
            type: string
            x-env-variable: goal_relationship
            x-example: "12345"
        job_path_gid:
            description: Globally unique identifier for the job.
            in: path
            name: job_gid
            required: true
            type: string
            x-env-variable: job
            x-example: "12345"
        limit:
            description: >-
                Results per page.

                The number of objects to return per page. The value must be between 1
                and 100.
            in: query
            name: limit
            type: integer
            x-example: 50
        member:
            description: |
                Member object gid can be user or team.
            example: "123"
            in: query
            name: member
            required: false
            schema:
                type: string
        message_path_gid:
            description: The message to get.
            example: "321654"
            in: path
            name: message_gid
            required: true
            schema:
                type: string
            x-env-variable: message
        offset:
            description: >-
                Offset token.

                An offset to the next page returned by the API. A pagination request
                will return an offset token, which can be used as an input parameter to
                the next request. If an offset is not passed in, the API will return the
                first page of results.

                'Note: You can only pass in an offset that was returned to you via a
                previously paginated request.'
            in: query
            name: offset
            type: string
            x-example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
        organization_export_path_gid:
            description: Globally unique identifier for the organization export.
            in: path
            name: organization_export_gid
            required: true
            type: string
            x-env-variable: organization_export
            x-example: "12345"
        parent:
            description: |
                Membership parent object gid.
            example: "123"
            in: query
            name: parent
            required: true
            schema:
                type: string
        portfolio_membership_path_gid:
            in: path
            name: portfolio_membership_gid
            required: true
            type: string
            x-env-variable: portfolio_membership
            x-example: "1331"
        portfolio_path_gid:
            description: Globally unique identifier for the portfolio.
            in: path
            name: portfolio_gid
            required: true
            type: string
            x-env-variable: portfolio
            x-example: "12345"
        portfolio_query_param:
            description: The portfolio to filter results on.
            in: query
            name: portfolio
            type: string
            x-env-variable: portfolio
            x-example: "12345"
        pretty:
            allowEmptyValue: true
            description: >-
                Provides “pretty” output.

                Provides the response in a “pretty” format. In the case of JSON this
                means doing proper line breaking and indentation to make it readable.
                This will take extra time and increase the response size so it is
                advisable only to use this during debugging.
            in: query
            name: opt_pretty
            required: false
            type: boolean
            x-example: true
        project_brief_path_gid:
            description: Globally unique identifier for the project brief.
            in: path
            name: project_brief_gid
            required: true
            type: string
            x-env-variable: project_brief
            x-example: "12345"
        project_membership_path_gid:
            in: path
            name: project_membership_gid
            required: true
            type: string
            x-env-variable: project_membership
            x-example: "1331"
        project_path_gid:
            description: Globally unique identifier for the project.
            in: path
            name: project_gid
            required: true
            type: string
            x-env-variable: project
            x-example: "1331"
        project_status_path_gid:
            description: The project status update to get.
            in: path
            name: project_status_gid
            required: true
            type: string
            x-env-variable: project_status
            x-example: "321654"
        project_template_path_gid:
            description: Globally unique identifier for the project template.
            in: path
            name: project_template_gid
            required: true
            type: string
            x-env-variable: project_template
            x-example: "1331"
        section_path_gid:
            description: The globally unique identifier for the section.
            in: path
            name: section_gid
            required: true
            type: string
            x-env-variable: section
            x-example: "321654"
        status_path_gid:
            description: The status update to get.
            in: path
            name: status_gid
            required: true
            type: string
            x-env-variable: status
            x-example: "321654"
        story_path_gid:
            description: Globally unique identifier for the story.
            in: path
            name: story_gid
            required: true
            type: string
            x-env-variable: story
            x-example: "35678"
        tag_path_gid:
            description: Globally unique identifier for the tag.
            in: path
            name: tag_gid
            required: true
            type: string
            x-env-variable: tag
            x-example: "11235"
        task_path_gid:
            description: The task to operate on.
            in: path
            name: task_gid
            required: true
            type: string
            x-env-variable: task
            x-example: "321654"
        team_membership_path_gid:
            in: path
            name: team_membership_gid
            required: true
            type: string
            x-env-variable: team_membership
            x-example: "724362"
        team_path_gid:
            description: Globally unique identifier for the team.
            in: path
            name: team_gid
            required: true
            type: string
            x-env-variable: team
            x-example: "159874"
        team_query_param:
            description: The team to filter projects on.
            in: query
            name: team
            type: string
            x-env-variable: team
            x-example: "14916"
        time_period_path_gid:
            description: Globally unique identifier for the time period.
            in: path
            name: time_period_gid
            required: true
            type: string
            x-env-variable: time_period
            x-example: "917392"
        user_path_gid:
            description: >-
                A string identifying a user. This can either be the string "me", an
                email, or the gid of a user.
            in: path
            name: user_gid
            required: true
            type: string
            x-env-variable: user
            x-example: me
        user_query_param:
            description: >-
                A string identifying a user. This can either be the string "me", an
                email, or the gid of a user.
            in: query
            name: user
            type: string
            x-env-variable: user
            x-example: me
        user_task_list_path_gid:
            description: Globally unique identifier for the user task list.
            in: path
            name: user_task_list_gid
            required: true
            type: string
            x-env-variable: user_task_list
            x-example: "12345"
        webhook_path_gid:
            description: Globally unique identifier for the webhook.
            in: path
            name: webhook_gid
            required: true
            type: string
            x-env-variable: webhook
            x-example: "12345"
        workspace_membership_path_gid:
            in: path
            name: workspace_membership_gid
            required: true
            type: string
            x-env-variable: workspace_membership
            x-example: "12345"
        workspace_path_gid:
            description: Globally unique identifier for the workspace or organization.
            in: path
            name: workspace_gid
            required: true
            type: string
            x-env-variable: workspace
            x-example: "12345"
        workspace_query_param:
            description: The workspace to filter results on.
            in: query
            name: workspace
            type: string
            x-env-variable: workspace
            x-example: "12345"
    responses:
        BadGateway:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: There is an issue between the load balancers and Asana's API.
        BadRequest:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                This usually occurs because of a missing or malformed parameter. Check
                the documentation and the syntax of your request and try again.
        Forbidden:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                The authentication and request syntax was valid but the server is
                refusing to complete the request. This can happen if you try to read or
                write to objects or properties that the user does not have access to.
        GatewayTimeout:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: This request took too long to complete.
        GenericErrorResponse:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                Sadly, sometimes requests to the API are not successful. Failures can
                occur for a wide range of reasons. In all cases, the API should return
                an HTTP Status Code that indicates the nature of the failure, with a
                response body in JSON format containing additional information. In the
                event of a server error the response body will contain an error phrase.
                These phrases are automatically generated using the [node-asana-phrase
                library](https://github.com/Asana/node-asana-phrase) and can be used by
                Asana support to quickly look up the incident that caused the server
                error.
        InternalServerError:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                There was a problem on Asana’s end. In the event of a server error the
                response body should contain an error phrase. These phrases can be used
                by Asana support to quickly look up the incident that caused the server
                error. Some errors are due to server load, and will not supply an error
                phrase.
        NotFound:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                Either the request method and path supplied do not specify a known
                action in the API, or the object specified by the request does not
                exist.
        PaymentRequired:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                The request was valid, but the queried object or object mutation
                specified in the request is above your current premium level.
        ServiceUnavailable:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                Either the upstream service is unavailable to the API, or the API has
                been intentionally shut off.
        TooManyRequests:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                You have exceeded one of the enforced rate limits in the API. See the
                [documentation on rate
                limiting](https://developers.asana.com/docs/#rate-limits) for more
                information.
        Unauthorized:
            content:
                application/json:
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            description: >-
                A valid authentication token was not provided with the request, so the
                API could not associate a user with the request.
x-readme:
    proxy-enabled: false

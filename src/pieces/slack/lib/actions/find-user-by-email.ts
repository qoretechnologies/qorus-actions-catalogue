import { WebClient } from '@slack/web-api';
import { createAction, Property } from 'core/framework';
import { IActionResponse } from 'global/models/actions';
import { slackAuth } from '../../';

const findUserByEmailResponseType: IActionResponse = {
  ok: {
    type: 'boolean',
    name: 'ok',
    display_name: 'Success',
    short_desc: 'Indicates if the channel was successfully created',
    desc: 'Indicates if the channel was successfully created',
    example_value: true,
  },
  user: {
    name: 'user',
    display_name: 'User',
    short_desc: 'The user found by email',
    desc: 'The user found by email',
    type: {
      id: {
        type: 'string',
        name: 'id',
        display_name: 'User ID',
        short_desc: 'The unique identifier for the user',
        desc: 'The unique identifier for the user',
        example_value: 'U1234567890',
      },
      name: {
        type: 'string',
        name: 'name',
        display_name: 'User Name',
        short_desc: 'The name of the user',
        desc: 'The name of the user',
        example_value: 'john.doe',
      },
      profile: {
        name: 'profile',
        display_name: 'Profile',
        short_desc: 'The profile of the user',
        desc: 'The profile of the user',
        type: {
          title: {
            type: 'string',
            name: 'title',
            display_name: 'Title',
            short_desc: 'The title of the user',
            desc: 'The title of the user',
            example_value: 'Software Engineer',
          },
          phone: {
            type: 'string',
            name: 'phone',
            display_name: 'Phone',
            short_desc: 'The phone number of the user',
            desc: 'The phone number of the user',
            example_value: '+1 123-456-7890',
          },
          skype: {
            type: 'string',
            name: 'skype',
            display_name: 'Skype',
            short_desc: 'The Skype ID of the user',
            desc: 'The Skype ID of the user',
            example_value: 'my.skype.id',
          },
          real_name: {
            type: 'string',
            name: 'real_name',
            display_name: 'Real Name',
            short_desc: 'The real name of the user',
            desc: 'The real name of the user',
            example_value: 'John Doe',
          },
          real_name_normalized: {
            type: 'string',
            name: 'real_name_normalized',
            display_name: 'Normalized Real Name',
            short_desc: 'The normalized real name of the user',
            desc: 'The normalized real name of the user',
            example_value: 'John Doe',
          },
          display_name: {
            type: 'string',
            name: 'display_name',
            display_name: 'Display Name',
            short_desc: 'The display name of the user',
            desc: 'The display name of the user',
            example_value: 'John Doe',
          },
          display_name_normalized: {
            type: 'string',
            name: 'display_name_normalized',
            display_name: 'Normalized Display Name',
            short_desc: 'The normalized display name of the user',
            desc: 'The normalized display name of the user',
            example_value: 'John Doe',
          },
          status_text: {
            type: 'string',
            name: 'status_text',
            display_name: 'Status Text',
            short_desc: 'The status text of the user',
            desc: 'The status text of the user',
            example_value: 'Working from home',
          },
          status_emoji: {
            type: 'string',
            name: 'status_emoji',
            display_name: 'Status Emoji',
            short_desc: 'The status emoji of the user',
            desc: 'The status emoji of the user',
            example_value: ':house_with_garden:',
          },
          status_expiration: {
            type: 'number',
            name: 'status_expiration',
            display_name: 'Status Expiration',
            short_desc: 'The status expiration of the user',
            desc: 'The status expiration of the user',
            example_value: 0,
          },
          avatar_hash: {
            type: 'string',
            name: 'avatar_hash',
            display_name: 'Avatar Hash',
            short_desc: 'The avatar hash of the user',
            desc: 'The avatar hash of the user',
            example_value: 'g216345234',
          },
          email: {
            type: 'string',
            name: 'email',
            display_name: 'Email',
            short_desc: 'The email address of the user',
            desc: 'The email address of the user',
            example_value: 'example@email.com',
          },
          first_name: {
            type: 'string',
            name: 'first_name',
            display_name: 'First Name',
            short_desc: 'The first name of the user',
            desc: 'The first name of the user',
            example_value: 'John',
          },
          last_name: {
            type: 'string',
            name: 'last_name',
            display_name: 'Last Name',
            short_desc: 'The last name of the user',
            desc: 'The last name of the user',
            example_value: 'Doe',
          },
          image_24: {
            type: 'string',
            name: 'image_24',
            display_name: 'Image 24',
            short_desc: 'The 24x24 image of the user',
            desc: 'The 24x24 image of the user',
            example_value: 'https://example.com/image_24.jpg',
          },
          image_32: {
            type: 'string',
            name: 'image_32',
            display_name: 'Image 32',
            short_desc: 'The 32x32 image of the user',
            desc: 'The 32x32 image of the user',
            example_value: 'https://example.com/image_32.jpg',
          },
          image_48: {
            type: 'string',
            name: 'image_48',
            display_name: 'Image 48',
            short_desc: 'The 48x48 image of the user',
            desc: 'The 48x48 image of the user',
            example_value: 'https://example.com/image_48.jpg',
          },
          image_72: {
            type: 'string',
            name: 'image_72',
            display_name: 'Image 72',
            short_desc: 'The 72x72 image of the user',
            desc: 'The 72x72 image of the user',
            example_value: 'https://example.com/image_72.jpg',
          },
          image_192: {
            type: 'string',
            name: 'image_192',
            display_name: 'Image 192',
            short_desc: 'The 192x192 image of the user',
            desc: 'The 192x192 image of the user',
            example_value: 'https://example.com/image_192.jpg',
          },
          image_512: {
            type: 'string',
            name: 'image_512',
            display_name: 'Image 512',
            short_desc: 'The 512x512 image of the user',
            desc: 'The 512x512 image of the user',
            example_value: 'https://example.com/image_512.jpg',
          },
          team: {
            type: 'string',
            name: 'team',
            display_name: 'Team',
            short_desc: 'The team of the user',
            desc: 'The team of the user',
            example_value: 'T1234567890',
          },
        },
      },
      team_id: {
        type: 'string',
        name: 'team_id',
        display_name: 'Team ID',
        short_desc: 'The unique identifier for the team',
        desc: 'The unique identifier for the team',
        example_value: 'T1234567890',
      },
      deleted: {
        type: 'boolean',
        name: 'deleted',
        display_name: 'Deleted?',
        short_desc: 'Indicates if the user has been deleted',
        desc: 'Indicates if the user has been deleted',
        example_value: false,
      },
      color: {
        type: 'string',
        name: 'color',
        display_name: 'Color',
        short_desc: 'The color of the user',
        desc: 'The color of the user',
        example_value: '9f69e7',
      },
      real_name: {
        type: 'string',
        name: 'real_name',
        display_name: 'Real Name',
        short_desc: 'The real name of the user',
        desc: 'The real name of the user',
        example_value: 'John Doe',
      },
      tz: {
        type: 'string',
        name: 'tz',
        display_name: 'Timezone',
        short_desc: 'The timezone of the user',
        desc: 'The timezone of the user',
        example_value: 'America/Los_Angeles',
      },
      tz_label: {
        type: 'string',
        name: 'tz_label',
        display_name: 'Timezone Label',
        short_desc: 'The timezone label of the user',
        desc: 'The timezone label of the user',
        example_value: 'Pacific Daylight Time',
      },
      tz_offset: {
        type: 'number',
        name: 'tz_offset',
        display_name: 'Timezone Offset',
        short_desc: 'The timezone offset of the user',
        desc: 'The timezone offset of the user',
        example_value: -25200,
      },
      is_admin: {
        type: 'boolean',
        name: 'is_admin',
        display_name: 'Is Admin?',
        short_desc: 'Indicates if the user is an admin',
        desc: 'Indicates if the user is an admin',
        example_value: false,
      },
      is_owner: {
        type: 'boolean',
        name: 'is_owner',
        display_name: 'Is Owner?',
        short_desc: 'Indicates if the user is an owner',
        desc: 'Indicates if the user is an owner',
        example_value: false,
      },
      is_primary_owner: {
        type: 'boolean',
        name: 'is_primary_owner',
        display_name: 'Is Primary Owner?',
        short_desc: 'Indicates if the user is a primary owner',
        desc: 'Indicates if the user is a primary owner',
        example_value: false,
      },
      is_restricted: {
        type: 'boolean',
        name: 'is_restricted',
        display_name: 'Is Restricted?',
        short_desc: 'Indicates if the user is restricted',
        desc: 'Indicates if the user is restricted',
        example_value: false,
      },
      is_ultra_restricted: {
        type: 'boolean',
        name: 'is_ultra_restricted',
        display_name: 'Is Ultra Restricted?',
        short_desc: 'Indicates if the user is ultra restricted',
        desc: 'Indicates if the user is ultra restricted',
        example_value: false,
      },
      is_bot: {
        type: 'boolean',
        name: 'is_bot',
        display_name: 'Is Bot?',
        short_desc: 'Indicates if the user is a bot',
        desc: 'Indicates if the user is a bot',
        example_value: false,
      },
      updated: {
        type: 'number',
        name: 'updated',
        display_name: 'Updated',
        short_desc: 'The date the user was last updated',
        desc: 'The date the user was last updated',
        example_value: 1629983662,
      },
      is_app_user: {
        type: 'boolean',
        name: 'is_app_user',
        display_name: 'Is App User?',
        short_desc: 'Indicates if the user is an app user',
        desc: 'Indicates if the user is an app user',
        example_value: false,
      },
      is_email_confirmed: {
        type: 'boolean',
        name: 'is_email_confirmed',
        display_name: 'Is Email Confirmed?',
        short_desc: 'Indicates if the user has confirmed their email',
        desc: 'Indicates if the user has confirmed their email',
        example_value: true,
      },
    },
  },
};

export const findUserByEmailAction = createAction({
  auth: slackAuth,
  name: 'slack-find-user-by-email',
  displayName: 'Find User by Email',
  description: 'Finds a user by matching against their email address.',
  props: {
    email: Property.ShortText({
      displayName: 'Email',
      required: true,
    }),
  },
  responseType: findUserByEmailResponseType,
  async run({ auth, propsValue }) {
    const email = propsValue.email;
    const client = new WebClient(auth.access_token);

    return await client.users.lookupByEmail({
      email,
    });
  },
});
